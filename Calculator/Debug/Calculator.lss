
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000110  00800060  00004286  0000431a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000058  00800170  00800170  0000442a  2**0
                  ALLOC
  3 .stab         00002c94  00000000  00000000  0000442c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dcb  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00007e8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000802b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000821d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000a628  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000cb84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000cd44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000d03a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__fixsfsi+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e6 e8       	ldi	r30, 0x86	; 134
     162:	f2 e4       	ldi	r31, 0x42	; 66
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a0 37       	cpi	r26, 0x70	; 112
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a0 e7       	ldi	r26, 0x70	; 112
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	a8 3c       	cpi	r26, 0xC8	; 200
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 f2 0e 	call	0x1de4	; 0x1de4 <main>
     184:	0c 94 41 21 	jmp	0x4282	; 0x4282 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	a8 e6       	ldi	r26, 0x68	; 104
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 6a 1e 	jmp	0x3cd4	; 0x3cd4 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	88 e6       	ldi	r24, 0x68	; 104
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 86 1e 	jmp	0x3d0c	; 0x3d0c <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	68 e6       	ldi	r22, 0x68	; 104
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 76 1e 	jmp	0x3cec	; 0x3cec <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 3b 07 	call	0xe76	; 0xe76 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__epilogue_restores__+0x18>

000009a4 <__fixsfsi>:
     9a4:	ac e0       	ldi	r26, 0x0C	; 12
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 7a 1e 	jmp	0x3cf4	; 0x3cf4 <__prologue_saves__+0x20>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	be 01       	movw	r22, r28
     9be:	6b 5f       	subi	r22, 0xFB	; 251
     9c0:	7f 4f       	sbci	r23, 0xFF	; 255
     9c2:	0e 94 c3 06 	call	0xd86	; 0xd86 <__unpack_f>
     9c6:	8d 81       	ldd	r24, Y+5	; 0x05
     9c8:	82 30       	cpi	r24, 0x02	; 2
     9ca:	61 f1       	breq	.+88     	; 0xa24 <__fixsfsi+0x80>
     9cc:	82 30       	cpi	r24, 0x02	; 2
     9ce:	50 f1       	brcs	.+84     	; 0xa24 <__fixsfsi+0x80>
     9d0:	84 30       	cpi	r24, 0x04	; 4
     9d2:	21 f4       	brne	.+8      	; 0x9dc <__fixsfsi+0x38>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	88 23       	and	r24, r24
     9d8:	51 f1       	breq	.+84     	; 0xa2e <__fixsfsi+0x8a>
     9da:	2e c0       	rjmp	.+92     	; 0xa38 <__fixsfsi+0x94>
     9dc:	2f 81       	ldd	r18, Y+7	; 0x07
     9de:	38 85       	ldd	r19, Y+8	; 0x08
     9e0:	37 fd       	sbrc	r19, 7
     9e2:	20 c0       	rjmp	.+64     	; 0xa24 <__fixsfsi+0x80>
     9e4:	6e 81       	ldd	r22, Y+6	; 0x06
     9e6:	2f 31       	cpi	r18, 0x1F	; 31
     9e8:	31 05       	cpc	r19, r1
     9ea:	1c f0       	brlt	.+6      	; 0x9f2 <__fixsfsi+0x4e>
     9ec:	66 23       	and	r22, r22
     9ee:	f9 f0       	breq	.+62     	; 0xa2e <__fixsfsi+0x8a>
     9f0:	23 c0       	rjmp	.+70     	; 0xa38 <__fixsfsi+0x94>
     9f2:	8e e1       	ldi	r24, 0x1E	; 30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	82 1b       	sub	r24, r18
     9f8:	93 0b       	sbc	r25, r19
     9fa:	29 85       	ldd	r18, Y+9	; 0x09
     9fc:	3a 85       	ldd	r19, Y+10	; 0x0a
     9fe:	4b 85       	ldd	r20, Y+11	; 0x0b
     a00:	5c 85       	ldd	r21, Y+12	; 0x0c
     a02:	04 c0       	rjmp	.+8      	; 0xa0c <__fixsfsi+0x68>
     a04:	56 95       	lsr	r21
     a06:	47 95       	ror	r20
     a08:	37 95       	ror	r19
     a0a:	27 95       	ror	r18
     a0c:	8a 95       	dec	r24
     a0e:	d2 f7       	brpl	.-12     	; 0xa04 <__fixsfsi+0x60>
     a10:	66 23       	and	r22, r22
     a12:	b1 f0       	breq	.+44     	; 0xa40 <__fixsfsi+0x9c>
     a14:	50 95       	com	r21
     a16:	40 95       	com	r20
     a18:	30 95       	com	r19
     a1a:	21 95       	neg	r18
     a1c:	3f 4f       	sbci	r19, 0xFF	; 255
     a1e:	4f 4f       	sbci	r20, 0xFF	; 255
     a20:	5f 4f       	sbci	r21, 0xFF	; 255
     a22:	0e c0       	rjmp	.+28     	; 0xa40 <__fixsfsi+0x9c>
     a24:	20 e0       	ldi	r18, 0x00	; 0
     a26:	30 e0       	ldi	r19, 0x00	; 0
     a28:	40 e0       	ldi	r20, 0x00	; 0
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	09 c0       	rjmp	.+18     	; 0xa40 <__fixsfsi+0x9c>
     a2e:	2f ef       	ldi	r18, 0xFF	; 255
     a30:	3f ef       	ldi	r19, 0xFF	; 255
     a32:	4f ef       	ldi	r20, 0xFF	; 255
     a34:	5f e7       	ldi	r21, 0x7F	; 127
     a36:	04 c0       	rjmp	.+8      	; 0xa40 <__fixsfsi+0x9c>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	50 e8       	ldi	r21, 0x80	; 128
     a40:	b9 01       	movw	r22, r18
     a42:	ca 01       	movw	r24, r20
     a44:	2c 96       	adiw	r28, 0x0c	; 12
     a46:	e2 e0       	ldi	r30, 0x02	; 2
     a48:	0c 94 96 1e 	jmp	0x3d2c	; 0x3d2c <__epilogue_restores__+0x20>

00000a4c <__floatunsisf>:
     a4c:	a8 e0       	ldi	r26, 0x08	; 8
     a4e:	b0 e0       	ldi	r27, 0x00	; 0
     a50:	ec e2       	ldi	r30, 0x2C	; 44
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__prologue_saves__+0x10>
     a58:	7b 01       	movw	r14, r22
     a5a:	8c 01       	movw	r16, r24
     a5c:	61 15       	cp	r22, r1
     a5e:	71 05       	cpc	r23, r1
     a60:	81 05       	cpc	r24, r1
     a62:	91 05       	cpc	r25, r1
     a64:	19 f4       	brne	.+6      	; 0xa6c <__floatunsisf+0x20>
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	89 83       	std	Y+1, r24	; 0x01
     a6a:	60 c0       	rjmp	.+192    	; 0xb2c <__floatunsisf+0xe0>
     a6c:	83 e0       	ldi	r24, 0x03	; 3
     a6e:	89 83       	std	Y+1, r24	; 0x01
     a70:	8e e1       	ldi	r24, 0x1E	; 30
     a72:	c8 2e       	mov	r12, r24
     a74:	d1 2c       	mov	r13, r1
     a76:	dc 82       	std	Y+4, r13	; 0x04
     a78:	cb 82       	std	Y+3, r12	; 0x03
     a7a:	ed 82       	std	Y+5, r14	; 0x05
     a7c:	fe 82       	std	Y+6, r15	; 0x06
     a7e:	0f 83       	std	Y+7, r16	; 0x07
     a80:	18 87       	std	Y+8, r17	; 0x08
     a82:	c8 01       	movw	r24, r16
     a84:	b7 01       	movw	r22, r14
     a86:	0e 94 9f 05 	call	0xb3e	; 0xb3e <__clzsi2>
     a8a:	fc 01       	movw	r30, r24
     a8c:	31 97       	sbiw	r30, 0x01	; 1
     a8e:	f7 ff       	sbrs	r31, 7
     a90:	3b c0       	rjmp	.+118    	; 0xb08 <__floatunsisf+0xbc>
     a92:	22 27       	eor	r18, r18
     a94:	33 27       	eor	r19, r19
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	57 01       	movw	r10, r14
     a9c:	68 01       	movw	r12, r16
     a9e:	02 2e       	mov	r0, r18
     aa0:	04 c0       	rjmp	.+8      	; 0xaaa <__floatunsisf+0x5e>
     aa2:	d6 94       	lsr	r13
     aa4:	c7 94       	ror	r12
     aa6:	b7 94       	ror	r11
     aa8:	a7 94       	ror	r10
     aaa:	0a 94       	dec	r0
     aac:	d2 f7       	brpl	.-12     	; 0xaa2 <__floatunsisf+0x56>
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	50 e0       	ldi	r21, 0x00	; 0
     ab2:	60 e0       	ldi	r22, 0x00	; 0
     ab4:	70 e0       	ldi	r23, 0x00	; 0
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__floatunsisf+0x7c>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	2a 95       	dec	r18
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__floatunsisf+0x74>
     acc:	01 97       	sbiw	r24, 0x01	; 1
     ace:	a1 09       	sbc	r26, r1
     ad0:	b1 09       	sbc	r27, r1
     ad2:	8e 21       	and	r24, r14
     ad4:	9f 21       	and	r25, r15
     ad6:	a0 23       	and	r26, r16
     ad8:	b1 23       	and	r27, r17
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	a1 05       	cpc	r26, r1
     ade:	b1 05       	cpc	r27, r1
     ae0:	21 f0       	breq	.+8      	; 0xaea <__floatunsisf+0x9e>
     ae2:	41 e0       	ldi	r20, 0x01	; 1
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	4a 29       	or	r20, r10
     aec:	5b 29       	or	r21, r11
     aee:	6c 29       	or	r22, r12
     af0:	7d 29       	or	r23, r13
     af2:	4d 83       	std	Y+5, r20	; 0x05
     af4:	5e 83       	std	Y+6, r21	; 0x06
     af6:	6f 83       	std	Y+7, r22	; 0x07
     af8:	78 87       	std	Y+8, r23	; 0x08
     afa:	8e e1       	ldi	r24, 0x1E	; 30
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8e 1b       	sub	r24, r30
     b00:	9f 0b       	sbc	r25, r31
     b02:	9c 83       	std	Y+4, r25	; 0x04
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	12 c0       	rjmp	.+36     	; 0xb2c <__floatunsisf+0xe0>
     b08:	30 97       	sbiw	r30, 0x00	; 0
     b0a:	81 f0       	breq	.+32     	; 0xb2c <__floatunsisf+0xe0>
     b0c:	0e 2e       	mov	r0, r30
     b0e:	04 c0       	rjmp	.+8      	; 0xb18 <__floatunsisf+0xcc>
     b10:	ee 0c       	add	r14, r14
     b12:	ff 1c       	adc	r15, r15
     b14:	00 1f       	adc	r16, r16
     b16:	11 1f       	adc	r17, r17
     b18:	0a 94       	dec	r0
     b1a:	d2 f7       	brpl	.-12     	; 0xb10 <__floatunsisf+0xc4>
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	ce 1a       	sub	r12, r30
     b26:	df 0a       	sbc	r13, r31
     b28:	dc 82       	std	Y+4, r13	; 0x04
     b2a:	cb 82       	std	Y+3, r12	; 0x03
     b2c:	1a 82       	std	Y+2, r1	; 0x02
     b2e:	ce 01       	movw	r24, r28
     b30:	01 96       	adiw	r24, 0x01	; 1
     b32:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__pack_f>
     b36:	28 96       	adiw	r28, 0x08	; 8
     b38:	ea e0       	ldi	r30, 0x0A	; 10
     b3a:	0c 94 8e 1e 	jmp	0x3d1c	; 0x3d1c <__epilogue_restores__+0x10>

00000b3e <__clzsi2>:
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	7b 01       	movw	r14, r22
     b48:	8c 01       	movw	r16, r24
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	e8 16       	cp	r14, r24
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	f8 06       	cpc	r15, r24
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	08 07       	cpc	r16, r24
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	18 07       	cpc	r17, r24
     b5a:	88 f4       	brcc	.+34     	; 0xb7e <__clzsi2+0x40>
     b5c:	8f ef       	ldi	r24, 0xFF	; 255
     b5e:	e8 16       	cp	r14, r24
     b60:	f1 04       	cpc	r15, r1
     b62:	01 05       	cpc	r16, r1
     b64:	11 05       	cpc	r17, r1
     b66:	31 f0       	breq	.+12     	; 0xb74 <__clzsi2+0x36>
     b68:	28 f0       	brcs	.+10     	; 0xb74 <__clzsi2+0x36>
     b6a:	88 e0       	ldi	r24, 0x08	; 8
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	a0 e0       	ldi	r26, 0x00	; 0
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	17 c0       	rjmp	.+46     	; 0xba2 <__clzsi2+0x64>
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	a0 e0       	ldi	r26, 0x00	; 0
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <__clzsi2+0x64>
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	e8 16       	cp	r14, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	f8 06       	cpc	r15, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	08 07       	cpc	r16, r24
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	18 07       	cpc	r17, r24
     b8e:	28 f0       	brcs	.+10     	; 0xb9a <__clzsi2+0x5c>
     b90:	88 e1       	ldi	r24, 0x18	; 24
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	a0 e0       	ldi	r26, 0x00	; 0
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__clzsi2+0x64>
     b9a:	80 e1       	ldi	r24, 0x10	; 16
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	20 e2       	ldi	r18, 0x20	; 32
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	28 1b       	sub	r18, r24
     bac:	39 0b       	sbc	r19, r25
     bae:	4a 0b       	sbc	r20, r26
     bb0:	5b 0b       	sbc	r21, r27
     bb2:	04 c0       	rjmp	.+8      	; 0xbbc <__clzsi2+0x7e>
     bb4:	16 95       	lsr	r17
     bb6:	07 95       	ror	r16
     bb8:	f7 94       	ror	r15
     bba:	e7 94       	ror	r14
     bbc:	8a 95       	dec	r24
     bbe:	d2 f7       	brpl	.-12     	; 0xbb4 <__clzsi2+0x76>
     bc0:	f7 01       	movw	r30, r14
     bc2:	e0 59       	subi	r30, 0x90	; 144
     bc4:	ff 4f       	sbci	r31, 0xFF	; 255
     bc6:	80 81       	ld	r24, Z
     bc8:	28 1b       	sub	r18, r24
     bca:	31 09       	sbc	r19, r1
     bcc:	41 09       	sbc	r20, r1
     bce:	51 09       	sbc	r21, r1
     bd0:	c9 01       	movw	r24, r18
     bd2:	1f 91       	pop	r17
     bd4:	0f 91       	pop	r16
     bd6:	ff 90       	pop	r15
     bd8:	ef 90       	pop	r14
     bda:	08 95       	ret

00000bdc <__pack_f>:
     bdc:	df 92       	push	r13
     bde:	ef 92       	push	r14
     be0:	ff 92       	push	r15
     be2:	0f 93       	push	r16
     be4:	1f 93       	push	r17
     be6:	fc 01       	movw	r30, r24
     be8:	e4 80       	ldd	r14, Z+4	; 0x04
     bea:	f5 80       	ldd	r15, Z+5	; 0x05
     bec:	06 81       	ldd	r16, Z+6	; 0x06
     bee:	17 81       	ldd	r17, Z+7	; 0x07
     bf0:	d1 80       	ldd	r13, Z+1	; 0x01
     bf2:	80 81       	ld	r24, Z
     bf4:	82 30       	cpi	r24, 0x02	; 2
     bf6:	48 f4       	brcc	.+18     	; 0xc0a <__pack_f+0x2e>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e1       	ldi	r26, 0x10	; 16
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e8 2a       	or	r14, r24
     c02:	f9 2a       	or	r15, r25
     c04:	0a 2b       	or	r16, r26
     c06:	1b 2b       	or	r17, r27
     c08:	a5 c0       	rjmp	.+330    	; 0xd54 <__pack_f+0x178>
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	09 f4       	brne	.+2      	; 0xc10 <__pack_f+0x34>
     c0e:	9f c0       	rjmp	.+318    	; 0xd4e <__pack_f+0x172>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	21 f4       	brne	.+8      	; 0xc1c <__pack_f+0x40>
     c14:	ee 24       	eor	r14, r14
     c16:	ff 24       	eor	r15, r15
     c18:	87 01       	movw	r16, r14
     c1a:	05 c0       	rjmp	.+10     	; 0xc26 <__pack_f+0x4a>
     c1c:	e1 14       	cp	r14, r1
     c1e:	f1 04       	cpc	r15, r1
     c20:	01 05       	cpc	r16, r1
     c22:	11 05       	cpc	r17, r1
     c24:	19 f4       	brne	.+6      	; 0xc2c <__pack_f+0x50>
     c26:	e0 e0       	ldi	r30, 0x00	; 0
     c28:	f0 e0       	ldi	r31, 0x00	; 0
     c2a:	96 c0       	rjmp	.+300    	; 0xd58 <__pack_f+0x17c>
     c2c:	62 81       	ldd	r22, Z+2	; 0x02
     c2e:	73 81       	ldd	r23, Z+3	; 0x03
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	62 38       	cpi	r22, 0x82	; 130
     c34:	79 07       	cpc	r23, r25
     c36:	0c f0       	brlt	.+2      	; 0xc3a <__pack_f+0x5e>
     c38:	5b c0       	rjmp	.+182    	; 0xcf0 <__pack_f+0x114>
     c3a:	22 e8       	ldi	r18, 0x82	; 130
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	26 1b       	sub	r18, r22
     c40:	37 0b       	sbc	r19, r23
     c42:	2a 31       	cpi	r18, 0x1A	; 26
     c44:	31 05       	cpc	r19, r1
     c46:	2c f0       	brlt	.+10     	; 0xc52 <__pack_f+0x76>
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e0       	ldi	r20, 0x00	; 0
     c4e:	50 e0       	ldi	r21, 0x00	; 0
     c50:	2a c0       	rjmp	.+84     	; 0xca6 <__pack_f+0xca>
     c52:	b8 01       	movw	r22, r16
     c54:	a7 01       	movw	r20, r14
     c56:	02 2e       	mov	r0, r18
     c58:	04 c0       	rjmp	.+8      	; 0xc62 <__pack_f+0x86>
     c5a:	76 95       	lsr	r23
     c5c:	67 95       	ror	r22
     c5e:	57 95       	ror	r21
     c60:	47 95       	ror	r20
     c62:	0a 94       	dec	r0
     c64:	d2 f7       	brpl	.-12     	; 0xc5a <__pack_f+0x7e>
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	a0 e0       	ldi	r26, 0x00	; 0
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0x9c>
     c70:	88 0f       	add	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	aa 1f       	adc	r26, r26
     c76:	bb 1f       	adc	r27, r27
     c78:	2a 95       	dec	r18
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__pack_f+0x94>
     c7c:	01 97       	sbiw	r24, 0x01	; 1
     c7e:	a1 09       	sbc	r26, r1
     c80:	b1 09       	sbc	r27, r1
     c82:	8e 21       	and	r24, r14
     c84:	9f 21       	and	r25, r15
     c86:	a0 23       	and	r26, r16
     c88:	b1 23       	and	r27, r17
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	a1 05       	cpc	r26, r1
     c8e:	b1 05       	cpc	r27, r1
     c90:	21 f0       	breq	.+8      	; 0xc9a <__pack_f+0xbe>
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e0       	ldi	r26, 0x00	; 0
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	9a 01       	movw	r18, r20
     c9c:	ab 01       	movw	r20, r22
     c9e:	28 2b       	or	r18, r24
     ca0:	39 2b       	or	r19, r25
     ca2:	4a 2b       	or	r20, r26
     ca4:	5b 2b       	or	r21, r27
     ca6:	da 01       	movw	r26, r20
     ca8:	c9 01       	movw	r24, r18
     caa:	8f 77       	andi	r24, 0x7F	; 127
     cac:	90 70       	andi	r25, 0x00	; 0
     cae:	a0 70       	andi	r26, 0x00	; 0
     cb0:	b0 70       	andi	r27, 0x00	; 0
     cb2:	80 34       	cpi	r24, 0x40	; 64
     cb4:	91 05       	cpc	r25, r1
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	39 f4       	brne	.+14     	; 0xcca <__pack_f+0xee>
     cbc:	27 ff       	sbrs	r18, 7
     cbe:	09 c0       	rjmp	.+18     	; 0xcd2 <__pack_f+0xf6>
     cc0:	20 5c       	subi	r18, 0xC0	; 192
     cc2:	3f 4f       	sbci	r19, 0xFF	; 255
     cc4:	4f 4f       	sbci	r20, 0xFF	; 255
     cc6:	5f 4f       	sbci	r21, 0xFF	; 255
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <__pack_f+0xf6>
     cca:	21 5c       	subi	r18, 0xC1	; 193
     ccc:	3f 4f       	sbci	r19, 0xFF	; 255
     cce:	4f 4f       	sbci	r20, 0xFF	; 255
     cd0:	5f 4f       	sbci	r21, 0xFF	; 255
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	a0 e0       	ldi	r26, 0x00	; 0
     cda:	3a 07       	cpc	r19, r26
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	4a 07       	cpc	r20, r26
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	5a 07       	cpc	r21, r26
     ce4:	10 f0       	brcs	.+4      	; 0xcea <__pack_f+0x10e>
     ce6:	e1 e0       	ldi	r30, 0x01	; 1
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	79 01       	movw	r14, r18
     cec:	8a 01       	movw	r16, r20
     cee:	27 c0       	rjmp	.+78     	; 0xd3e <__pack_f+0x162>
     cf0:	60 38       	cpi	r22, 0x80	; 128
     cf2:	71 05       	cpc	r23, r1
     cf4:	64 f5       	brge	.+88     	; 0xd4e <__pack_f+0x172>
     cf6:	fb 01       	movw	r30, r22
     cf8:	e1 58       	subi	r30, 0x81	; 129
     cfa:	ff 4f       	sbci	r31, 0xFF	; 255
     cfc:	d8 01       	movw	r26, r16
     cfe:	c7 01       	movw	r24, r14
     d00:	8f 77       	andi	r24, 0x7F	; 127
     d02:	90 70       	andi	r25, 0x00	; 0
     d04:	a0 70       	andi	r26, 0x00	; 0
     d06:	b0 70       	andi	r27, 0x00	; 0
     d08:	80 34       	cpi	r24, 0x40	; 64
     d0a:	91 05       	cpc	r25, r1
     d0c:	a1 05       	cpc	r26, r1
     d0e:	b1 05       	cpc	r27, r1
     d10:	39 f4       	brne	.+14     	; 0xd20 <__pack_f+0x144>
     d12:	e7 fe       	sbrs	r14, 7
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__pack_f+0x154>
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a0 e0       	ldi	r26, 0x00	; 0
     d1c:	b0 e0       	ldi	r27, 0x00	; 0
     d1e:	04 c0       	rjmp	.+8      	; 0xd28 <__pack_f+0x14c>
     d20:	8f e3       	ldi	r24, 0x3F	; 63
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	a0 e0       	ldi	r26, 0x00	; 0
     d26:	b0 e0       	ldi	r27, 0x00	; 0
     d28:	e8 0e       	add	r14, r24
     d2a:	f9 1e       	adc	r15, r25
     d2c:	0a 1f       	adc	r16, r26
     d2e:	1b 1f       	adc	r17, r27
     d30:	17 ff       	sbrs	r17, 7
     d32:	05 c0       	rjmp	.+10     	; 0xd3e <__pack_f+0x162>
     d34:	16 95       	lsr	r17
     d36:	07 95       	ror	r16
     d38:	f7 94       	ror	r15
     d3a:	e7 94       	ror	r14
     d3c:	31 96       	adiw	r30, 0x01	; 1
     d3e:	87 e0       	ldi	r24, 0x07	; 7
     d40:	16 95       	lsr	r17
     d42:	07 95       	ror	r16
     d44:	f7 94       	ror	r15
     d46:	e7 94       	ror	r14
     d48:	8a 95       	dec	r24
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__pack_f+0x164>
     d4c:	05 c0       	rjmp	.+10     	; 0xd58 <__pack_f+0x17c>
     d4e:	ee 24       	eor	r14, r14
     d50:	ff 24       	eor	r15, r15
     d52:	87 01       	movw	r16, r14
     d54:	ef ef       	ldi	r30, 0xFF	; 255
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	6e 2f       	mov	r22, r30
     d5a:	67 95       	ror	r22
     d5c:	66 27       	eor	r22, r22
     d5e:	67 95       	ror	r22
     d60:	90 2f       	mov	r25, r16
     d62:	9f 77       	andi	r25, 0x7F	; 127
     d64:	d7 94       	ror	r13
     d66:	dd 24       	eor	r13, r13
     d68:	d7 94       	ror	r13
     d6a:	8e 2f       	mov	r24, r30
     d6c:	86 95       	lsr	r24
     d6e:	49 2f       	mov	r20, r25
     d70:	46 2b       	or	r20, r22
     d72:	58 2f       	mov	r21, r24
     d74:	5d 29       	or	r21, r13
     d76:	b7 01       	movw	r22, r14
     d78:	ca 01       	movw	r24, r20
     d7a:	1f 91       	pop	r17
     d7c:	0f 91       	pop	r16
     d7e:	ff 90       	pop	r15
     d80:	ef 90       	pop	r14
     d82:	df 90       	pop	r13
     d84:	08 95       	ret

00000d86 <__unpack_f>:
     d86:	fc 01       	movw	r30, r24
     d88:	db 01       	movw	r26, r22
     d8a:	40 81       	ld	r20, Z
     d8c:	51 81       	ldd	r21, Z+1	; 0x01
     d8e:	22 81       	ldd	r18, Z+2	; 0x02
     d90:	62 2f       	mov	r22, r18
     d92:	6f 77       	andi	r22, 0x7F	; 127
     d94:	70 e0       	ldi	r23, 0x00	; 0
     d96:	22 1f       	adc	r18, r18
     d98:	22 27       	eor	r18, r18
     d9a:	22 1f       	adc	r18, r18
     d9c:	93 81       	ldd	r25, Z+3	; 0x03
     d9e:	89 2f       	mov	r24, r25
     da0:	88 0f       	add	r24, r24
     da2:	82 2b       	or	r24, r18
     da4:	28 2f       	mov	r18, r24
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	99 1f       	adc	r25, r25
     daa:	99 27       	eor	r25, r25
     dac:	99 1f       	adc	r25, r25
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	9c 93       	st	X, r25
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	21 15       	cp	r18, r1
     db6:	31 05       	cpc	r19, r1
     db8:	a9 f5       	brne	.+106    	; 0xe24 <__unpack_f+0x9e>
     dba:	41 15       	cp	r20, r1
     dbc:	51 05       	cpc	r21, r1
     dbe:	61 05       	cpc	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <__unpack_f+0x42>
     dc4:	82 e0       	ldi	r24, 0x02	; 2
     dc6:	37 c0       	rjmp	.+110    	; 0xe36 <__unpack_f+0xb0>
     dc8:	82 e8       	ldi	r24, 0x82	; 130
     dca:	9f ef       	ldi	r25, 0xFF	; 255
     dcc:	13 96       	adiw	r26, 0x03	; 3
     dce:	9c 93       	st	X, r25
     dd0:	8e 93       	st	-X, r24
     dd2:	12 97       	sbiw	r26, 0x02	; 2
     dd4:	9a 01       	movw	r18, r20
     dd6:	ab 01       	movw	r20, r22
     dd8:	67 e0       	ldi	r22, 0x07	; 7
     dda:	22 0f       	add	r18, r18
     ddc:	33 1f       	adc	r19, r19
     dde:	44 1f       	adc	r20, r20
     de0:	55 1f       	adc	r21, r21
     de2:	6a 95       	dec	r22
     de4:	d1 f7       	brne	.-12     	; 0xdda <__unpack_f+0x54>
     de6:	83 e0       	ldi	r24, 0x03	; 3
     de8:	8c 93       	st	X, r24
     dea:	0d c0       	rjmp	.+26     	; 0xe06 <__unpack_f+0x80>
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	44 1f       	adc	r20, r20
     df2:	55 1f       	adc	r21, r21
     df4:	12 96       	adiw	r26, 0x02	; 2
     df6:	8d 91       	ld	r24, X+
     df8:	9c 91       	ld	r25, X
     dfa:	13 97       	sbiw	r26, 0x03	; 3
     dfc:	01 97       	sbiw	r24, 0x01	; 1
     dfe:	13 96       	adiw	r26, 0x03	; 3
     e00:	9c 93       	st	X, r25
     e02:	8e 93       	st	-X, r24
     e04:	12 97       	sbiw	r26, 0x02	; 2
     e06:	20 30       	cpi	r18, 0x00	; 0
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	38 07       	cpc	r19, r24
     e0c:	80 e0       	ldi	r24, 0x00	; 0
     e0e:	48 07       	cpc	r20, r24
     e10:	80 e4       	ldi	r24, 0x40	; 64
     e12:	58 07       	cpc	r21, r24
     e14:	58 f3       	brcs	.-42     	; 0xdec <__unpack_f+0x66>
     e16:	14 96       	adiw	r26, 0x04	; 4
     e18:	2d 93       	st	X+, r18
     e1a:	3d 93       	st	X+, r19
     e1c:	4d 93       	st	X+, r20
     e1e:	5c 93       	st	X, r21
     e20:	17 97       	sbiw	r26, 0x07	; 7
     e22:	08 95       	ret
     e24:	2f 3f       	cpi	r18, 0xFF	; 255
     e26:	31 05       	cpc	r19, r1
     e28:	79 f4       	brne	.+30     	; 0xe48 <__unpack_f+0xc2>
     e2a:	41 15       	cp	r20, r1
     e2c:	51 05       	cpc	r21, r1
     e2e:	61 05       	cpc	r22, r1
     e30:	71 05       	cpc	r23, r1
     e32:	19 f4       	brne	.+6      	; 0xe3a <__unpack_f+0xb4>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8c 93       	st	X, r24
     e38:	08 95       	ret
     e3a:	64 ff       	sbrs	r22, 4
     e3c:	03 c0       	rjmp	.+6      	; 0xe44 <__unpack_f+0xbe>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	8c 93       	st	X, r24
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <__unpack_f+0xe2>
     e44:	1c 92       	st	X, r1
     e46:	10 c0       	rjmp	.+32     	; 0xe68 <__unpack_f+0xe2>
     e48:	2f 57       	subi	r18, 0x7F	; 127
     e4a:	30 40       	sbci	r19, 0x00	; 0
     e4c:	13 96       	adiw	r26, 0x03	; 3
     e4e:	3c 93       	st	X, r19
     e50:	2e 93       	st	-X, r18
     e52:	12 97       	sbiw	r26, 0x02	; 2
     e54:	83 e0       	ldi	r24, 0x03	; 3
     e56:	8c 93       	st	X, r24
     e58:	87 e0       	ldi	r24, 0x07	; 7
     e5a:	44 0f       	add	r20, r20
     e5c:	55 1f       	adc	r21, r21
     e5e:	66 1f       	adc	r22, r22
     e60:	77 1f       	adc	r23, r23
     e62:	8a 95       	dec	r24
     e64:	d1 f7       	brne	.-12     	; 0xe5a <__unpack_f+0xd4>
     e66:	70 64       	ori	r23, 0x40	; 64
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	4d 93       	st	X+, r20
     e6c:	5d 93       	st	X+, r21
     e6e:	6d 93       	st	X+, r22
     e70:	7c 93       	st	X, r23
     e72:	17 97       	sbiw	r26, 0x07	; 7
     e74:	08 95       	ret

00000e76 <__fpcmp_parts_f>:
     e76:	1f 93       	push	r17
     e78:	dc 01       	movw	r26, r24
     e7a:	fb 01       	movw	r30, r22
     e7c:	9c 91       	ld	r25, X
     e7e:	92 30       	cpi	r25, 0x02	; 2
     e80:	08 f4       	brcc	.+2      	; 0xe84 <__fpcmp_parts_f+0xe>
     e82:	47 c0       	rjmp	.+142    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e84:	80 81       	ld	r24, Z
     e86:	82 30       	cpi	r24, 0x02	; 2
     e88:	08 f4       	brcc	.+2      	; 0xe8c <__fpcmp_parts_f+0x16>
     e8a:	43 c0       	rjmp	.+134    	; 0xf12 <__fpcmp_parts_f+0x9c>
     e8c:	94 30       	cpi	r25, 0x04	; 4
     e8e:	51 f4       	brne	.+20     	; 0xea4 <__fpcmp_parts_f+0x2e>
     e90:	11 96       	adiw	r26, 0x01	; 1
     e92:	1c 91       	ld	r17, X
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	99 f5       	brne	.+102    	; 0xefe <__fpcmp_parts_f+0x88>
     e98:	81 81       	ldd	r24, Z+1	; 0x01
     e9a:	68 2f       	mov	r22, r24
     e9c:	70 e0       	ldi	r23, 0x00	; 0
     e9e:	61 1b       	sub	r22, r17
     ea0:	71 09       	sbc	r23, r1
     ea2:	3f c0       	rjmp	.+126    	; 0xf22 <__fpcmp_parts_f+0xac>
     ea4:	84 30       	cpi	r24, 0x04	; 4
     ea6:	21 f0       	breq	.+8      	; 0xeb0 <__fpcmp_parts_f+0x3a>
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	31 f4       	brne	.+12     	; 0xeb8 <__fpcmp_parts_f+0x42>
     eac:	82 30       	cpi	r24, 0x02	; 2
     eae:	b9 f1       	breq	.+110    	; 0xf1e <__fpcmp_parts_f+0xa8>
     eb0:	81 81       	ldd	r24, Z+1	; 0x01
     eb2:	88 23       	and	r24, r24
     eb4:	89 f1       	breq	.+98     	; 0xf18 <__fpcmp_parts_f+0xa2>
     eb6:	2d c0       	rjmp	.+90     	; 0xf12 <__fpcmp_parts_f+0x9c>
     eb8:	11 96       	adiw	r26, 0x01	; 1
     eba:	1c 91       	ld	r17, X
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	82 30       	cpi	r24, 0x02	; 2
     ec0:	f1 f0       	breq	.+60     	; 0xefe <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	18 17       	cp	r17, r24
     ec6:	d9 f4       	brne	.+54     	; 0xefe <__fpcmp_parts_f+0x88>
     ec8:	12 96       	adiw	r26, 0x02	; 2
     eca:	2d 91       	ld	r18, X+
     ecc:	3c 91       	ld	r19, X
     ece:	13 97       	sbiw	r26, 0x03	; 3
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	82 17       	cp	r24, r18
     ed6:	93 07       	cpc	r25, r19
     ed8:	94 f0       	brlt	.+36     	; 0xefe <__fpcmp_parts_f+0x88>
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	bc f0       	brlt	.+46     	; 0xf0e <__fpcmp_parts_f+0x98>
     ee0:	14 96       	adiw	r26, 0x04	; 4
     ee2:	8d 91       	ld	r24, X+
     ee4:	9d 91       	ld	r25, X+
     ee6:	0d 90       	ld	r0, X+
     ee8:	bc 91       	ld	r27, X
     eea:	a0 2d       	mov	r26, r0
     eec:	24 81       	ldd	r18, Z+4	; 0x04
     eee:	35 81       	ldd	r19, Z+5	; 0x05
     ef0:	46 81       	ldd	r20, Z+6	; 0x06
     ef2:	57 81       	ldd	r21, Z+7	; 0x07
     ef4:	28 17       	cp	r18, r24
     ef6:	39 07       	cpc	r19, r25
     ef8:	4a 07       	cpc	r20, r26
     efa:	5b 07       	cpc	r21, r27
     efc:	18 f4       	brcc	.+6      	; 0xf04 <__fpcmp_parts_f+0x8e>
     efe:	11 23       	and	r17, r17
     f00:	41 f0       	breq	.+16     	; 0xf12 <__fpcmp_parts_f+0x9c>
     f02:	0a c0       	rjmp	.+20     	; 0xf18 <__fpcmp_parts_f+0xa2>
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	a4 07       	cpc	r26, r20
     f0a:	b5 07       	cpc	r27, r21
     f0c:	40 f4       	brcc	.+16     	; 0xf1e <__fpcmp_parts_f+0xa8>
     f0e:	11 23       	and	r17, r17
     f10:	19 f0       	breq	.+6      	; 0xf18 <__fpcmp_parts_f+0xa2>
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	05 c0       	rjmp	.+10     	; 0xf22 <__fpcmp_parts_f+0xac>
     f18:	6f ef       	ldi	r22, 0xFF	; 255
     f1a:	7f ef       	ldi	r23, 0xFF	; 255
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <__fpcmp_parts_f+0xac>
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	cb 01       	movw	r24, r22
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <start>:
 * Description :
 * Initialize the LCD:
 * Start Application with displaying welcome and wait to  enter c
 */
void start(void)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	2e 97       	sbiw	r28, 0x0e	; 14
     f32:	0f b6       	in	r0, 0x3f	; 63
     f34:	f8 94       	cli
     f36:	de bf       	out	0x3e, r29	; 62
     f38:	0f be       	out	0x3f, r0	; 63
     f3a:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     f3c:	0e 94 d9 13 	call	0x27b2	; 0x27b2 <LCD_init>
	LCD_displayStringRowColumn(0,5,"Welcome");
     f40:	20 e6       	ldi	r18, 0x60	; 96
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	65 e0       	ldi	r22, 0x05	; 5
     f48:	a9 01       	movw	r20, r18
     f4a:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <LCD_displayStringRowColumn>
     f4e:	76 c0       	rjmp	.+236    	; 0x103c <start+0x114>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
     f50:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
     f54:	80 93 70 01 	sts	0x0170, r24
     f58:	80 e0       	ldi	r24, 0x00	; 0
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a8 e4       	ldi	r26, 0x48	; 72
     f5e:	b3 e4       	ldi	r27, 0x43	; 67
     f60:	8b 87       	std	Y+11, r24	; 0x0b
     f62:	9c 87       	std	Y+12, r25	; 0x0c
     f64:	ad 87       	std	Y+13, r26	; 0x0d
     f66:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f68:	6b 85       	ldd	r22, Y+11	; 0x0b
     f6a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f6c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f6e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	4a ef       	ldi	r20, 0xFA	; 250
     f76:	54 e4       	ldi	r21, 0x44	; 68
     f78:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	8f 83       	std	Y+7, r24	; 0x07
     f82:	98 87       	std	Y+8, r25	; 0x08
     f84:	a9 87       	std	Y+9, r26	; 0x09
     f86:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f88:	6f 81       	ldd	r22, Y+7	; 0x07
     f8a:	78 85       	ldd	r23, Y+8	; 0x08
     f8c:	89 85       	ldd	r24, Y+9	; 0x09
     f8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e8       	ldi	r20, 0x80	; 128
     f96:	5f e3       	ldi	r21, 0x3F	; 63
     f98:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
     f9c:	88 23       	and	r24, r24
     f9e:	2c f4       	brge	.+10     	; 0xfaa <start+0x82>
		__ticks = 1;
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	3f c0       	rjmp	.+126    	; 0x1028 <start+0x100>
	else if (__tmp > 65535)
     faa:	6f 81       	ldd	r22, Y+7	; 0x07
     fac:	78 85       	ldd	r23, Y+8	; 0x08
     fae:	89 85       	ldd	r24, Y+9	; 0x09
     fb0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb2:	20 e0       	ldi	r18, 0x00	; 0
     fb4:	3f ef       	ldi	r19, 0xFF	; 255
     fb6:	4f e7       	ldi	r20, 0x7F	; 127
     fb8:	57 e4       	ldi	r21, 0x47	; 71
     fba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
     fbe:	18 16       	cp	r1, r24
     fc0:	4c f5       	brge	.+82     	; 0x1014 <start+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fc2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fc4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fc6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fc8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	40 e2       	ldi	r20, 0x20	; 32
     fd0:	51 e4       	ldi	r21, 0x41	; 65
     fd2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
     fd6:	dc 01       	movw	r26, r24
     fd8:	cb 01       	movw	r24, r22
     fda:	bc 01       	movw	r22, r24
     fdc:	cd 01       	movw	r24, r26
     fde:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
     fe2:	dc 01       	movw	r26, r24
     fe4:	cb 01       	movw	r24, r22
     fe6:	9e 83       	std	Y+6, r25	; 0x06
     fe8:	8d 83       	std	Y+5, r24	; 0x05
     fea:	0f c0       	rjmp	.+30     	; 0x100a <start+0xe2>
     fec:	88 ec       	ldi	r24, 0xC8	; 200
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	f1 f7       	brne	.-4      	; 0xff8 <start+0xd0>
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1000:	8d 81       	ldd	r24, Y+5	; 0x05
    1002:	9e 81       	ldd	r25, Y+6	; 0x06
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    100a:	8d 81       	ldd	r24, Y+5	; 0x05
    100c:	9e 81       	ldd	r25, Y+6	; 0x06
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	69 f7       	brne	.-38     	; 0xfec <start+0xc4>
    1012:	14 c0       	rjmp	.+40     	; 0x103c <start+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1014:	6f 81       	ldd	r22, Y+7	; 0x07
    1016:	78 85       	ldd	r23, Y+8	; 0x08
    1018:	89 85       	ldd	r24, Y+9	; 0x09
    101a:	9a 85       	ldd	r25, Y+10	; 0x0a
    101c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1020:	dc 01       	movw	r26, r24
    1022:	cb 01       	movw	r24, r22
    1024:	9e 83       	std	Y+6, r25	; 0x06
    1026:	8d 83       	std	Y+5, r24	; 0x05
    1028:	8d 81       	ldd	r24, Y+5	; 0x05
    102a:	9e 81       	ldd	r25, Y+6	; 0x06
    102c:	9a 83       	std	Y+2, r25	; 0x02
    102e:	89 83       	std	Y+1, r24	; 0x01
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	9a 81       	ldd	r25, Y+2	; 0x02
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	f1 f7       	brne	.-4      	; 0x1034 <start+0x10c>
    1038:	9a 83       	std	Y+2, r25	; 0x02
    103a:	89 83       	std	Y+1, r24	; 0x01
 */
void start(void)
{
	LCD_init();
	LCD_displayStringRowColumn(0,5,"Welcome");
	while(key != 'c')
    103c:	80 91 70 01 	lds	r24, 0x0170
    1040:	83 36       	cpi	r24, 0x63	; 99
    1042:	09 f0       	breq	.+2      	; 0x1046 <start+0x11e>
    1044:	85 cf       	rjmp	.-246    	; 0xf50 <start+0x28>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1046:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LCD_clearScreen>
}
    104a:	2e 96       	adiw	r28, 0x0e	; 14
    104c:	0f b6       	in	r0, 0x3f	; 63
    104e:	f8 94       	cli
    1050:	de bf       	out	0x3e, r29	; 62
    1052:	0f be       	out	0x3f, r0	; 63
    1054:	cd bf       	out	0x3d, r28	; 61
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	08 95       	ret

0000105c <First_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void First_NUM(void)
{
    105c:	0f 93       	push	r16
    105e:	1f 93       	push	r17
    1060:	df 93       	push	r29
    1062:	cf 93       	push	r28
    1064:	cd b7       	in	r28, 0x3d	; 61
    1066:	de b7       	in	r29, 0x3e	; 62
    1068:	2e 97       	sbiw	r28, 0x0e	; 14
    106a:	0f b6       	in	r0, 0x3f	; 63
    106c:	f8 94       	cli
    106e:	de bf       	out	0x3e, r29	; 62
    1070:	0f be       	out	0x3f, r0	; 63
    1072:	cd bf       	out	0x3d, r28	; 61
	num1_counter=0;//start from digit 1
    1074:	10 92 71 01 	sts	0x0171, r1
	while(1)
	{
		key=KEYPAD_getPressedKey();
    1078:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    107c:	80 93 70 01 	sts	0x0170, r24
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	a8 e4       	ldi	r26, 0x48	; 72
    1086:	b3 e4       	ldi	r27, 0x43	; 67
    1088:	8b 87       	std	Y+11, r24	; 0x0b
    108a:	9c 87       	std	Y+12, r25	; 0x0c
    108c:	ad 87       	std	Y+13, r26	; 0x0d
    108e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1090:	6b 85       	ldd	r22, Y+11	; 0x0b
    1092:	7c 85       	ldd	r23, Y+12	; 0x0c
    1094:	8d 85       	ldd	r24, Y+13	; 0x0d
    1096:	9e 85       	ldd	r25, Y+14	; 0x0e
    1098:	20 e0       	ldi	r18, 0x00	; 0
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	4a ef       	ldi	r20, 0xFA	; 250
    109e:	54 e4       	ldi	r21, 0x44	; 68
    10a0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10a4:	dc 01       	movw	r26, r24
    10a6:	cb 01       	movw	r24, r22
    10a8:	8f 83       	std	Y+7, r24	; 0x07
    10aa:	98 87       	std	Y+8, r25	; 0x08
    10ac:	a9 87       	std	Y+9, r26	; 0x09
    10ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10b0:	6f 81       	ldd	r22, Y+7	; 0x07
    10b2:	78 85       	ldd	r23, Y+8	; 0x08
    10b4:	89 85       	ldd	r24, Y+9	; 0x09
    10b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10b8:	20 e0       	ldi	r18, 0x00	; 0
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	40 e8       	ldi	r20, 0x80	; 128
    10be:	5f e3       	ldi	r21, 0x3F	; 63
    10c0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    10c4:	88 23       	and	r24, r24
    10c6:	2c f4       	brge	.+10     	; 0x10d2 <First_NUM+0x76>
		__ticks = 1;
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	9e 83       	std	Y+6, r25	; 0x06
    10ce:	8d 83       	std	Y+5, r24	; 0x05
    10d0:	3f c0       	rjmp	.+126    	; 0x1150 <First_NUM+0xf4>
	else if (__tmp > 65535)
    10d2:	6f 81       	ldd	r22, Y+7	; 0x07
    10d4:	78 85       	ldd	r23, Y+8	; 0x08
    10d6:	89 85       	ldd	r24, Y+9	; 0x09
    10d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	3f ef       	ldi	r19, 0xFF	; 255
    10de:	4f e7       	ldi	r20, 0x7F	; 127
    10e0:	57 e4       	ldi	r21, 0x47	; 71
    10e2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    10e6:	18 16       	cp	r1, r24
    10e8:	4c f5       	brge	.+82     	; 0x113c <First_NUM+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    10ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    10ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	40 e2       	ldi	r20, 0x20	; 32
    10f8:	51 e4       	ldi	r21, 0x41	; 65
    10fa:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10fe:	dc 01       	movw	r26, r24
    1100:	cb 01       	movw	r24, r22
    1102:	bc 01       	movw	r22, r24
    1104:	cd 01       	movw	r24, r26
    1106:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	9e 83       	std	Y+6, r25	; 0x06
    1110:	8d 83       	std	Y+5, r24	; 0x05
    1112:	0f c0       	rjmp	.+30     	; 0x1132 <First_NUM+0xd6>
    1114:	88 ec       	ldi	r24, 0xC8	; 200
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	9c 83       	std	Y+4, r25	; 0x04
    111a:	8b 83       	std	Y+3, r24	; 0x03
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	01 97       	sbiw	r24, 0x01	; 1
    1122:	f1 f7       	brne	.-4      	; 0x1120 <First_NUM+0xc4>
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1128:	8d 81       	ldd	r24, Y+5	; 0x05
    112a:	9e 81       	ldd	r25, Y+6	; 0x06
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	9e 83       	std	Y+6, r25	; 0x06
    1130:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1132:	8d 81       	ldd	r24, Y+5	; 0x05
    1134:	9e 81       	ldd	r25, Y+6	; 0x06
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	69 f7       	brne	.-38     	; 0x1114 <First_NUM+0xb8>
    113a:	14 c0       	rjmp	.+40     	; 0x1164 <First_NUM+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    113c:	6f 81       	ldd	r22, Y+7	; 0x07
    113e:	78 85       	ldd	r23, Y+8	; 0x08
    1140:	89 85       	ldd	r24, Y+9	; 0x09
    1142:	9a 85       	ldd	r25, Y+10	; 0x0a
    1144:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1148:	dc 01       	movw	r26, r24
    114a:	cb 01       	movw	r24, r22
    114c:	9e 83       	std	Y+6, r25	; 0x06
    114e:	8d 83       	std	Y+5, r24	; 0x05
    1150:	8d 81       	ldd	r24, Y+5	; 0x05
    1152:	9e 81       	ldd	r25, Y+6	; 0x06
    1154:	9a 83       	std	Y+2, r25	; 0x02
    1156:	89 83       	std	Y+1, r24	; 0x01
    1158:	89 81       	ldd	r24, Y+1	; 0x01
    115a:	9a 81       	ldd	r25, Y+2	; 0x02
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	f1 f7       	brne	.-4      	; 0x115c <First_NUM+0x100>
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01


		/*
		 * Break loop when user complete entering first number and operation
		 */
		if(key == '+' || key == '-' || key == '/' || key == '*')
    1164:	80 91 70 01 	lds	r24, 0x0170
    1168:	8b 32       	cpi	r24, 0x2B	; 43
    116a:	61 f0       	breq	.+24     	; 0x1184 <First_NUM+0x128>
    116c:	80 91 70 01 	lds	r24, 0x0170
    1170:	8d 32       	cpi	r24, 0x2D	; 45
    1172:	41 f0       	breq	.+16     	; 0x1184 <First_NUM+0x128>
    1174:	80 91 70 01 	lds	r24, 0x0170
    1178:	8f 32       	cpi	r24, 0x2F	; 47
    117a:	21 f0       	breq	.+8      	; 0x1184 <First_NUM+0x128>
    117c:	80 91 70 01 	lds	r24, 0x0170
    1180:	8a 32       	cpi	r24, 0x2A	; 42
    1182:	99 f4       	brne	.+38     	; 0x11aa <First_NUM+0x14e>
		{
			opration=key;
    1184:	80 91 70 01 	lds	r24, 0x0170
    1188:	80 93 73 01 	sts	0x0173, r24
			LCD_displayCharacter(opration);
    118c:	80 91 73 01 	lds	r24, 0x0173
    1190:	0e 94 10 19 	call	0x3220	; 0x3220 <LCD_displayCharacter>
		 */
		number1[num1_counter]=key;
		num1_counter++;
		LCD_intgerToString(key);
	}
}
    1194:	2e 96       	adiw	r28, 0x0e	; 14
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	08 95       	ret


		/*
		 * Store all digits of first number and display number on LCD
		 */
		number1[num1_counter]=key;
    11aa:	80 91 71 01 	lds	r24, 0x0171
    11ae:	08 2f       	mov	r16, r24
    11b0:	10 e0       	ldi	r17, 0x00	; 0
    11b2:	80 91 70 01 	lds	r24, 0x0170
    11b6:	88 2f       	mov	r24, r24
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	a0 e0       	ldi	r26, 0x00	; 0
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    11c6:	9b 01       	movw	r18, r22
    11c8:	ac 01       	movw	r20, r24
    11ca:	c8 01       	movw	r24, r16
    11cc:	88 0f       	add	r24, r24
    11ce:	99 1f       	adc	r25, r25
    11d0:	88 0f       	add	r24, r24
    11d2:	99 1f       	adc	r25, r25
    11d4:	fc 01       	movw	r30, r24
    11d6:	ec 58       	subi	r30, 0x8C	; 140
    11d8:	fe 4f       	sbci	r31, 0xFE	; 254
    11da:	20 83       	st	Z, r18
    11dc:	31 83       	std	Z+1, r19	; 0x01
    11de:	42 83       	std	Z+2, r20	; 0x02
    11e0:	53 83       	std	Z+3, r21	; 0x03
		num1_counter++;
    11e2:	80 91 71 01 	lds	r24, 0x0171
    11e6:	8f 5f       	subi	r24, 0xFF	; 255
    11e8:	80 93 71 01 	sts	0x0171, r24
		LCD_intgerToString(key);
    11ec:	80 91 70 01 	lds	r24, 0x0170
    11f0:	88 2f       	mov	r24, r24
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <LCD_intgerToString>
    11f8:	3f cf       	rjmp	.-386    	; 0x1078 <First_NUM+0x1c>

000011fa <Second_NUM>:
/*
 * Description :
 * Get the first number and operation of calculation
 */
void Second_NUM(void)
{
    11fa:	0f 93       	push	r16
    11fc:	1f 93       	push	r17
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	2e 97       	sbiw	r28, 0x0e	; 14
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
	num2_counter=0;
    1212:	10 92 72 01 	sts	0x0172, r1
	while(1)
	{
		key=KEYPAD_getPressedKey();
    1216:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    121a:	80 93 70 01 	sts	0x0170, r24
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	a8 e4       	ldi	r26, 0x48	; 72
    1224:	b3 e4       	ldi	r27, 0x43	; 67
    1226:	8b 87       	std	Y+11, r24	; 0x0b
    1228:	9c 87       	std	Y+12, r25	; 0x0c
    122a:	ad 87       	std	Y+13, r26	; 0x0d
    122c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1230:	7c 85       	ldd	r23, Y+12	; 0x0c
    1232:	8d 85       	ldd	r24, Y+13	; 0x0d
    1234:	9e 85       	ldd	r25, Y+14	; 0x0e
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	4a ef       	ldi	r20, 0xFA	; 250
    123c:	54 e4       	ldi	r21, 0x44	; 68
    123e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1242:	dc 01       	movw	r26, r24
    1244:	cb 01       	movw	r24, r22
    1246:	8f 83       	std	Y+7, r24	; 0x07
    1248:	98 87       	std	Y+8, r25	; 0x08
    124a:	a9 87       	std	Y+9, r26	; 0x09
    124c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124e:	6f 81       	ldd	r22, Y+7	; 0x07
    1250:	78 85       	ldd	r23, Y+8	; 0x08
    1252:	89 85       	ldd	r24, Y+9	; 0x09
    1254:	9a 85       	ldd	r25, Y+10	; 0x0a
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1262:	88 23       	and	r24, r24
    1264:	2c f4       	brge	.+10     	; 0x1270 <Second_NUM+0x76>
		__ticks = 1;
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	9e 83       	std	Y+6, r25	; 0x06
    126c:	8d 83       	std	Y+5, r24	; 0x05
    126e:	3f c0       	rjmp	.+126    	; 0x12ee <Second_NUM+0xf4>
	else if (__tmp > 65535)
    1270:	6f 81       	ldd	r22, Y+7	; 0x07
    1272:	78 85       	ldd	r23, Y+8	; 0x08
    1274:	89 85       	ldd	r24, Y+9	; 0x09
    1276:	9a 85       	ldd	r25, Y+10	; 0x0a
    1278:	20 e0       	ldi	r18, 0x00	; 0
    127a:	3f ef       	ldi	r19, 0xFF	; 255
    127c:	4f e7       	ldi	r20, 0x7F	; 127
    127e:	57 e4       	ldi	r21, 0x47	; 71
    1280:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1284:	18 16       	cp	r1, r24
    1286:	4c f5       	brge	.+82     	; 0x12da <Second_NUM+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1288:	6b 85       	ldd	r22, Y+11	; 0x0b
    128a:	7c 85       	ldd	r23, Y+12	; 0x0c
    128c:	8d 85       	ldd	r24, Y+13	; 0x0d
    128e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    129c:	dc 01       	movw	r26, r24
    129e:	cb 01       	movw	r24, r22
    12a0:	bc 01       	movw	r22, r24
    12a2:	cd 01       	movw	r24, r26
    12a4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12a8:	dc 01       	movw	r26, r24
    12aa:	cb 01       	movw	r24, r22
    12ac:	9e 83       	std	Y+6, r25	; 0x06
    12ae:	8d 83       	std	Y+5, r24	; 0x05
    12b0:	0f c0       	rjmp	.+30     	; 0x12d0 <Second_NUM+0xd6>
    12b2:	88 ec       	ldi	r24, 0xC8	; 200
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <Second_NUM+0xc4>
    12c2:	9c 83       	std	Y+4, r25	; 0x04
    12c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c6:	8d 81       	ldd	r24, Y+5	; 0x05
    12c8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	00 97       	sbiw	r24, 0x00	; 0
    12d6:	69 f7       	brne	.-38     	; 0x12b2 <Second_NUM+0xb8>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <Second_NUM+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12da:	6f 81       	ldd	r22, Y+7	; 0x07
    12dc:	78 85       	ldd	r23, Y+8	; 0x08
    12de:	89 85       	ldd	r24, Y+9	; 0x09
    12e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e 83       	std	Y+6, r25	; 0x06
    12ec:	8d 83       	std	Y+5, r24	; 0x05
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	9a 83       	std	Y+2, r25	; 0x02
    12f4:	89 83       	std	Y+1, r24	; 0x01
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	9a 81       	ldd	r25, Y+2	; 0x02
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <Second_NUM+0x100>
    12fe:	9a 83       	std	Y+2, r25	; 0x02
    1300:	89 83       	std	Y+1, r24	; 0x01


		/*
		 * Break loop when user complete entering second number
		 */
		if(key == '=')
    1302:	80 91 70 01 	lds	r24, 0x0170
    1306:	8d 33       	cpi	r24, 0x3D	; 61
    1308:	79 f4       	brne	.+30     	; 0x1328 <Second_NUM+0x12e>
		{
			LCD_displayCharacter(key);
    130a:	80 91 70 01 	lds	r24, 0x0170
    130e:	0e 94 10 19 	call	0x3220	; 0x3220 <LCD_displayCharacter>
		 */
		number2[num2_counter]=key;
		num2_counter++;
		LCD_intgerToString(key);
	}
}
    1312:	2e 96       	adiw	r28, 0x0e	; 14
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	08 95       	ret


		/*
		 * Store all digits of second number and display number on LCD
		 */
		number2[num2_counter]=key;
    1328:	80 91 72 01 	lds	r24, 0x0172
    132c:	08 2f       	mov	r16, r24
    132e:	10 e0       	ldi	r17, 0x00	; 0
    1330:	80 91 70 01 	lds	r24, 0x0170
    1334:	88 2f       	mov	r24, r24
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	a0 e0       	ldi	r26, 0x00	; 0
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	bc 01       	movw	r22, r24
    133e:	cd 01       	movw	r24, r26
    1340:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1344:	9b 01       	movw	r18, r22
    1346:	ac 01       	movw	r20, r24
    1348:	c8 01       	movw	r24, r16
    134a:	88 0f       	add	r24, r24
    134c:	99 1f       	adc	r25, r25
    134e:	88 0f       	add	r24, r24
    1350:	99 1f       	adc	r25, r25
    1352:	fc 01       	movw	r30, r24
    1354:	e4 56       	subi	r30, 0x64	; 100
    1356:	fe 4f       	sbci	r31, 0xFE	; 254
    1358:	20 83       	st	Z, r18
    135a:	31 83       	std	Z+1, r19	; 0x01
    135c:	42 83       	std	Z+2, r20	; 0x02
    135e:	53 83       	std	Z+3, r21	; 0x03
		num2_counter++;
    1360:	80 91 72 01 	lds	r24, 0x0172
    1364:	8f 5f       	subi	r24, 0xFF	; 255
    1366:	80 93 72 01 	sts	0x0172, r24
		LCD_intgerToString(key);
    136a:	80 91 70 01 	lds	r24, 0x0170
    136e:	88 2f       	mov	r24, r24
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <LCD_intgerToString>
    1376:	4f cf       	rjmp	.-354    	; 0x1216 <Second_NUM+0x1c>

00001378 <calc_sum>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sum on LCD
 */
void calc_sum(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    1378:	ef 92       	push	r14
    137a:	ff 92       	push	r15
    137c:	0f 93       	push	r16
    137e:	1f 93       	push	r17
    1380:	df 93       	push	r29
    1382:	cf 93       	push	r28
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	6e 97       	sbiw	r28, 0x1e	; 30
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	de bf       	out	0x3e, r29	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	cd bf       	out	0x3d, r28	; 61
    1394:	9a 8f       	std	Y+26, r25	; 0x1a
    1396:	89 8f       	std	Y+25, r24	; 0x19
    1398:	7c 8f       	std	Y+28, r23	; 0x1c
    139a:	6b 8f       	std	Y+27, r22	; 0x1b
    139c:	4d 8f       	std	Y+29, r20	; 0x1d
    139e:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    13a0:	e9 8d       	ldd	r30, Y+25	; 0x19
    13a2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    13a4:	80 81       	ld	r24, Z
    13a6:	91 81       	ldd	r25, Z+1	; 0x01
    13a8:	a2 81       	ldd	r26, Z+2	; 0x02
    13aa:	b3 81       	ldd	r27, Z+3	; 0x03
    13ac:	8d 8b       	std	Y+21, r24	; 0x15
    13ae:	9e 8b       	std	Y+22, r25	; 0x16
    13b0:	af 8b       	std	Y+23, r26	; 0x17
    13b2:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    13b4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    13b6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    13b8:	80 81       	ld	r24, Z
    13ba:	91 81       	ldd	r25, Z+1	; 0x01
    13bc:	a2 81       	ldd	r26, Z+2	; 0x02
    13be:	b3 81       	ldd	r27, Z+3	; 0x03
    13c0:	89 8b       	std	Y+17, r24	; 0x11
    13c2:	9a 8b       	std	Y+18, r25	; 0x12
    13c4:	ab 8b       	std	Y+19, r26	; 0x13
    13c6:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	88 8b       	std	Y+16, r24	; 0x10
    13cc:	2c c0       	rjmp	.+88     	; 0x1426 <calc_sum+0xae>
	{
		num1 = num1*10 +first_num[counter];
    13ce:	6d 89       	ldd	r22, Y+21	; 0x15
    13d0:	7e 89       	ldd	r23, Y+22	; 0x16
    13d2:	8f 89       	ldd	r24, Y+23	; 0x17
    13d4:	98 8d       	ldd	r25, Y+24	; 0x18
    13d6:	20 e0       	ldi	r18, 0x00	; 0
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	40 e2       	ldi	r20, 0x20	; 32
    13dc:	51 e4       	ldi	r21, 0x41	; 65
    13de:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    13e2:	dc 01       	movw	r26, r24
    13e4:	cb 01       	movw	r24, r22
    13e6:	7c 01       	movw	r14, r24
    13e8:	8d 01       	movw	r16, r26
    13ea:	88 89       	ldd	r24, Y+16	; 0x10
    13ec:	88 2f       	mov	r24, r24
    13ee:	90 e0       	ldi	r25, 0x00	; 0
    13f0:	9c 01       	movw	r18, r24
    13f2:	22 0f       	add	r18, r18
    13f4:	33 1f       	adc	r19, r19
    13f6:	22 0f       	add	r18, r18
    13f8:	33 1f       	adc	r19, r19
    13fa:	89 8d       	ldd	r24, Y+25	; 0x19
    13fc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    13fe:	fc 01       	movw	r30, r24
    1400:	e2 0f       	add	r30, r18
    1402:	f3 1f       	adc	r31, r19
    1404:	20 81       	ld	r18, Z
    1406:	31 81       	ldd	r19, Z+1	; 0x01
    1408:	42 81       	ldd	r20, Z+2	; 0x02
    140a:	53 81       	ldd	r21, Z+3	; 0x03
    140c:	c8 01       	movw	r24, r16
    140e:	b7 01       	movw	r22, r14
    1410:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8d 8b       	std	Y+21, r24	; 0x15
    141a:	9e 8b       	std	Y+22, r25	; 0x16
    141c:	af 8b       	std	Y+23, r26	; 0x17
    141e:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    1420:	88 89       	ldd	r24, Y+16	; 0x10
    1422:	8f 5f       	subi	r24, 0xFF	; 255
    1424:	88 8b       	std	Y+16, r24	; 0x10
    1426:	98 89       	ldd	r25, Y+16	; 0x10
    1428:	8d 8d       	ldd	r24, Y+29	; 0x1d
    142a:	98 17       	cp	r25, r24
    142c:	80 f2       	brcs	.-96     	; 0x13ce <calc_sum+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	8f 87       	std	Y+15, r24	; 0x0f
    1432:	2c c0       	rjmp	.+88     	; 0x148c <calc_sum+0x114>
	{
		num2= num2*10 +second_num[counter];
    1434:	69 89       	ldd	r22, Y+17	; 0x11
    1436:	7a 89       	ldd	r23, Y+18	; 0x12
    1438:	8b 89       	ldd	r24, Y+19	; 0x13
    143a:	9c 89       	ldd	r25, Y+20	; 0x14
    143c:	20 e0       	ldi	r18, 0x00	; 0
    143e:	30 e0       	ldi	r19, 0x00	; 0
    1440:	40 e2       	ldi	r20, 0x20	; 32
    1442:	51 e4       	ldi	r21, 0x41	; 65
    1444:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	7c 01       	movw	r14, r24
    144e:	8d 01       	movw	r16, r26
    1450:	8f 85       	ldd	r24, Y+15	; 0x0f
    1452:	88 2f       	mov	r24, r24
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	9c 01       	movw	r18, r24
    1458:	22 0f       	add	r18, r18
    145a:	33 1f       	adc	r19, r19
    145c:	22 0f       	add	r18, r18
    145e:	33 1f       	adc	r19, r19
    1460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1464:	fc 01       	movw	r30, r24
    1466:	e2 0f       	add	r30, r18
    1468:	f3 1f       	adc	r31, r19
    146a:	20 81       	ld	r18, Z
    146c:	31 81       	ldd	r19, Z+1	; 0x01
    146e:	42 81       	ldd	r20, Z+2	; 0x02
    1470:	53 81       	ldd	r21, Z+3	; 0x03
    1472:	c8 01       	movw	r24, r16
    1474:	b7 01       	movw	r22, r14
    1476:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	89 8b       	std	Y+17, r24	; 0x11
    1480:	9a 8b       	std	Y+18, r25	; 0x12
    1482:	ab 8b       	std	Y+19, r26	; 0x13
    1484:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	8f 5f       	subi	r24, 0xFF	; 255
    148a:	8f 87       	std	Y+15, r24	; 0x0f
    148c:	9f 85       	ldd	r25, Y+15	; 0x0f
    148e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1490:	98 17       	cp	r25, r24
    1492:	80 f2       	brcs	.-96     	; 0x1434 <calc_sum+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_moveCursor>
	LCD_intgerToString(num1+num2);
    149c:	6d 89       	ldd	r22, Y+21	; 0x15
    149e:	7e 89       	ldd	r23, Y+22	; 0x16
    14a0:	8f 89       	ldd	r24, Y+23	; 0x17
    14a2:	98 8d       	ldd	r25, Y+24	; 0x18
    14a4:	29 89       	ldd	r18, Y+17	; 0x11
    14a6:	3a 89       	ldd	r19, Y+18	; 0x12
    14a8:	4b 89       	ldd	r20, Y+19	; 0x13
    14aa:	5c 89       	ldd	r21, Y+20	; 0x14
    14ac:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	bc 01       	movw	r22, r24
    14b6:	cd 01       	movw	r24, r26
    14b8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    14bc:	dc 01       	movw	r26, r24
    14be:	cb 01       	movw	r24, r22
    14c0:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <LCD_intgerToString>
    14c4:	76 c0       	rjmp	.+236    	; 0x15b2 <calc_sum+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    14c6:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    14ca:	80 93 70 01 	sts	0x0170, r24
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a8 e4       	ldi	r26, 0x48	; 72
    14d4:	b3 e4       	ldi	r27, 0x43	; 67
    14d6:	8b 87       	std	Y+11, r24	; 0x0b
    14d8:	9c 87       	std	Y+12, r25	; 0x0c
    14da:	ad 87       	std	Y+13, r26	; 0x0d
    14dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14de:	6b 85       	ldd	r22, Y+11	; 0x0b
    14e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    14e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	4a ef       	ldi	r20, 0xFA	; 250
    14ec:	54 e4       	ldi	r21, 0x44	; 68
    14ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    14f2:	dc 01       	movw	r26, r24
    14f4:	cb 01       	movw	r24, r22
    14f6:	8f 83       	std	Y+7, r24	; 0x07
    14f8:	98 87       	std	Y+8, r25	; 0x08
    14fa:	a9 87       	std	Y+9, r26	; 0x09
    14fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1500:	78 85       	ldd	r23, Y+8	; 0x08
    1502:	89 85       	ldd	r24, Y+9	; 0x09
    1504:	9a 85       	ldd	r25, Y+10	; 0x0a
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e8       	ldi	r20, 0x80	; 128
    150c:	5f e3       	ldi	r21, 0x3F	; 63
    150e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1512:	88 23       	and	r24, r24
    1514:	2c f4       	brge	.+10     	; 0x1520 <calc_sum+0x1a8>
		__ticks = 1;
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
    151e:	3f c0       	rjmp	.+126    	; 0x159e <calc_sum+0x226>
	else if (__tmp > 65535)
    1520:	6f 81       	ldd	r22, Y+7	; 0x07
    1522:	78 85       	ldd	r23, Y+8	; 0x08
    1524:	89 85       	ldd	r24, Y+9	; 0x09
    1526:	9a 85       	ldd	r25, Y+10	; 0x0a
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	3f ef       	ldi	r19, 0xFF	; 255
    152c:	4f e7       	ldi	r20, 0x7F	; 127
    152e:	57 e4       	ldi	r21, 0x47	; 71
    1530:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1534:	18 16       	cp	r1, r24
    1536:	4c f5       	brge	.+82     	; 0x158a <calc_sum+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e2       	ldi	r20, 0x20	; 32
    1546:	51 e4       	ldi	r21, 0x41	; 65
    1548:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	bc 01       	movw	r22, r24
    1552:	cd 01       	movw	r24, r26
    1554:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1558:	dc 01       	movw	r26, r24
    155a:	cb 01       	movw	r24, r22
    155c:	9e 83       	std	Y+6, r25	; 0x06
    155e:	8d 83       	std	Y+5, r24	; 0x05
    1560:	0f c0       	rjmp	.+30     	; 0x1580 <calc_sum+0x208>
    1562:	88 ec       	ldi	r24, 0xC8	; 200
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	9c 83       	std	Y+4, r25	; 0x04
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	9c 81       	ldd	r25, Y+4	; 0x04
    156e:	01 97       	sbiw	r24, 0x01	; 1
    1570:	f1 f7       	brne	.-4      	; 0x156e <calc_sum+0x1f6>
    1572:	9c 83       	std	Y+4, r25	; 0x04
    1574:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1576:	8d 81       	ldd	r24, Y+5	; 0x05
    1578:	9e 81       	ldd	r25, Y+6	; 0x06
    157a:	01 97       	sbiw	r24, 0x01	; 1
    157c:	9e 83       	std	Y+6, r25	; 0x06
    157e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	69 f7       	brne	.-38     	; 0x1562 <calc_sum+0x1ea>
    1588:	14 c0       	rjmp	.+40     	; 0x15b2 <calc_sum+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    158a:	6f 81       	ldd	r22, Y+7	; 0x07
    158c:	78 85       	ldd	r23, Y+8	; 0x08
    158e:	89 85       	ldd	r24, Y+9	; 0x09
    1590:	9a 85       	ldd	r25, Y+10	; 0x0a
    1592:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9e 83       	std	Y+6, r25	; 0x06
    159c:	8d 83       	std	Y+5, r24	; 0x05
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	9a 83       	std	Y+2, r25	; 0x02
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	89 81       	ldd	r24, Y+1	; 0x01
    15a8:	9a 81       	ldd	r25, Y+2	; 0x02
    15aa:	01 97       	sbiw	r24, 0x01	; 1
    15ac:	f1 f7       	brne	.-4      	; 0x15aa <calc_sum+0x232>
    15ae:	9a 83       	std	Y+2, r25	; 0x02
    15b0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1+num2);
	while(key != 'c')
    15b2:	80 91 70 01 	lds	r24, 0x0170
    15b6:	83 36       	cpi	r24, 0x63	; 99
    15b8:	09 f0       	breq	.+2      	; 0x15bc <calc_sum+0x244>
    15ba:	85 cf       	rjmp	.-246    	; 0x14c6 <calc_sum+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    15bc:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LCD_clearScreen>
}
    15c0:	6e 96       	adiw	r28, 0x1e	; 30
    15c2:	0f b6       	in	r0, 0x3f	; 63
    15c4:	f8 94       	cli
    15c6:	de bf       	out	0x3e, r29	; 62
    15c8:	0f be       	out	0x3f, r0	; 63
    15ca:	cd bf       	out	0x3d, r28	; 61
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	08 95       	ret

000015da <calc_sub>:
/*
 * Description :
 * Concatenate all digits of two number then display result of sub on LCD
 */
void calc_sub(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	6a 97       	sbiw	r28, 0x1a	; 26
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
    15f6:	9e 8b       	std	Y+22, r25	; 0x16
    15f8:	8d 8b       	std	Y+21, r24	; 0x15
    15fa:	78 8f       	std	Y+24, r23	; 0x18
    15fc:	6f 8b       	std	Y+23, r22	; 0x17
    15fe:	49 8f       	std	Y+25, r20	; 0x19
    1600:	2a 8f       	std	Y+26, r18	; 0x1a
	uint16 num1=first_num[0];
    1602:	ed 89       	ldd	r30, Y+21	; 0x15
    1604:	fe 89       	ldd	r31, Y+22	; 0x16
    1606:	80 81       	ld	r24, Z
    1608:	91 81       	ldd	r25, Z+1	; 0x01
    160a:	a2 81       	ldd	r26, Z+2	; 0x02
    160c:	b3 81       	ldd	r27, Z+3	; 0x03
    160e:	bc 01       	movw	r22, r24
    1610:	cd 01       	movw	r24, r26
    1612:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1616:	dc 01       	movw	r26, r24
    1618:	cb 01       	movw	r24, r22
    161a:	9c 8b       	std	Y+20, r25	; 0x14
    161c:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num2=second_num[0];
    161e:	ef 89       	ldd	r30, Y+23	; 0x17
    1620:	f8 8d       	ldd	r31, Y+24	; 0x18
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
    1626:	a2 81       	ldd	r26, Z+2	; 0x02
    1628:	b3 81       	ldd	r27, Z+3	; 0x03
    162a:	bc 01       	movw	r22, r24
    162c:	cd 01       	movw	r24, r26
    162e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1632:	dc 01       	movw	r26, r24
    1634:	cb 01       	movw	r24, r22
    1636:	9a 8b       	std	Y+18, r25	; 0x12
    1638:	89 8b       	std	Y+17, r24	; 0x11
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	88 8b       	std	Y+16, r24	; 0x10
    163e:	37 c0       	rjmp	.+110    	; 0x16ae <calc_sub+0xd4>
	{
		num1 = num1*10 +first_num[counter];
    1640:	8b 89       	ldd	r24, Y+19	; 0x13
    1642:	9c 89       	ldd	r25, Y+20	; 0x14
    1644:	9c 01       	movw	r18, r24
    1646:	22 0f       	add	r18, r18
    1648:	33 1f       	adc	r19, r19
    164a:	c9 01       	movw	r24, r18
    164c:	88 0f       	add	r24, r24
    164e:	99 1f       	adc	r25, r25
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	82 0f       	add	r24, r18
    1656:	93 1f       	adc	r25, r19
    1658:	cc 01       	movw	r24, r24
    165a:	a0 e0       	ldi	r26, 0x00	; 0
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	bc 01       	movw	r22, r24
    1660:	cd 01       	movw	r24, r26
    1662:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    1666:	7b 01       	movw	r14, r22
    1668:	8c 01       	movw	r16, r24
    166a:	88 89       	ldd	r24, Y+16	; 0x10
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	9c 01       	movw	r18, r24
    1672:	22 0f       	add	r18, r18
    1674:	33 1f       	adc	r19, r19
    1676:	22 0f       	add	r18, r18
    1678:	33 1f       	adc	r19, r19
    167a:	8d 89       	ldd	r24, Y+21	; 0x15
    167c:	9e 89       	ldd	r25, Y+22	; 0x16
    167e:	fc 01       	movw	r30, r24
    1680:	e2 0f       	add	r30, r18
    1682:	f3 1f       	adc	r31, r19
    1684:	20 81       	ld	r18, Z
    1686:	31 81       	ldd	r19, Z+1	; 0x01
    1688:	42 81       	ldd	r20, Z+2	; 0x02
    168a:	53 81       	ldd	r21, Z+3	; 0x03
    168c:	c8 01       	movw	r24, r16
    168e:	b7 01       	movw	r22, r14
    1690:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1694:	dc 01       	movw	r26, r24
    1696:	cb 01       	movw	r24, r22
    1698:	bc 01       	movw	r22, r24
    169a:	cd 01       	movw	r24, r26
    169c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    16a0:	dc 01       	movw	r26, r24
    16a2:	cb 01       	movw	r24, r22
    16a4:	9c 8b       	std	Y+20, r25	; 0x14
    16a6:	8b 8b       	std	Y+19, r24	; 0x13
	uint16 num1=first_num[0];
	uint16 num2=second_num[0];
	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    16a8:	88 89       	ldd	r24, Y+16	; 0x10
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	88 8b       	std	Y+16, r24	; 0x10
    16ae:	98 89       	ldd	r25, Y+16	; 0x10
    16b0:	89 8d       	ldd	r24, Y+25	; 0x19
    16b2:	98 17       	cp	r25, r24
    16b4:	28 f2       	brcs	.-118    	; 0x1640 <calc_sub+0x66>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    16b6:	81 e0       	ldi	r24, 0x01	; 1
    16b8:	8f 87       	std	Y+15, r24	; 0x0f
    16ba:	37 c0       	rjmp	.+110    	; 0x172a <calc_sub+0x150>
	{
		num2= num2*10 +second_num[counter];
    16bc:	89 89       	ldd	r24, Y+17	; 0x11
    16be:	9a 89       	ldd	r25, Y+18	; 0x12
    16c0:	9c 01       	movw	r18, r24
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	c9 01       	movw	r24, r18
    16c8:	88 0f       	add	r24, r24
    16ca:	99 1f       	adc	r25, r25
    16cc:	88 0f       	add	r24, r24
    16ce:	99 1f       	adc	r25, r25
    16d0:	82 0f       	add	r24, r18
    16d2:	93 1f       	adc	r25, r19
    16d4:	cc 01       	movw	r24, r24
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	bc 01       	movw	r22, r24
    16dc:	cd 01       	movw	r24, r26
    16de:	0e 94 26 05 	call	0xa4c	; 0xa4c <__floatunsisf>
    16e2:	7b 01       	movw	r14, r22
    16e4:	8c 01       	movw	r16, r24
    16e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e8:	88 2f       	mov	r24, r24
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	9c 01       	movw	r18, r24
    16ee:	22 0f       	add	r18, r18
    16f0:	33 1f       	adc	r19, r19
    16f2:	22 0f       	add	r18, r18
    16f4:	33 1f       	adc	r19, r19
    16f6:	8f 89       	ldd	r24, Y+23	; 0x17
    16f8:	98 8d       	ldd	r25, Y+24	; 0x18
    16fa:	fc 01       	movw	r30, r24
    16fc:	e2 0f       	add	r30, r18
    16fe:	f3 1f       	adc	r31, r19
    1700:	20 81       	ld	r18, Z
    1702:	31 81       	ldd	r19, Z+1	; 0x01
    1704:	42 81       	ldd	r20, Z+2	; 0x02
    1706:	53 81       	ldd	r21, Z+3	; 0x03
    1708:	c8 01       	movw	r24, r16
    170a:	b7 01       	movw	r22, r14
    170c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1710:	dc 01       	movw	r26, r24
    1712:	cb 01       	movw	r24, r22
    1714:	bc 01       	movw	r22, r24
    1716:	cd 01       	movw	r24, r26
    1718:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	9a 8b       	std	Y+18, r25	; 0x12
    1722:	89 8b       	std	Y+17, r24	; 0x11
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1724:	8f 85       	ldd	r24, Y+15	; 0x0f
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	8f 87       	std	Y+15, r24	; 0x0f
    172a:	9f 85       	ldd	r25, Y+15	; 0x0f
    172c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    172e:	98 17       	cp	r25, r24
    1730:	28 f2       	brcs	.-118    	; 0x16bc <calc_sub+0xe2>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_moveCursor>
	LCD_intgerToString(num1-num2);
    173a:	2b 89       	ldd	r18, Y+19	; 0x13
    173c:	3c 89       	ldd	r19, Y+20	; 0x14
    173e:	89 89       	ldd	r24, Y+17	; 0x11
    1740:	9a 89       	ldd	r25, Y+18	; 0x12
    1742:	a9 01       	movw	r20, r18
    1744:	48 1b       	sub	r20, r24
    1746:	59 0b       	sbc	r21, r25
    1748:	ca 01       	movw	r24, r20
    174a:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <LCD_intgerToString>
    174e:	76 c0       	rjmp	.+236    	; 0x183c <calc_sub+0x262>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    1750:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    1754:	80 93 70 01 	sts	0x0170, r24
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a8 e4       	ldi	r26, 0x48	; 72
    175e:	b3 e4       	ldi	r27, 0x43	; 67
    1760:	8b 87       	std	Y+11, r24	; 0x0b
    1762:	9c 87       	std	Y+12, r25	; 0x0c
    1764:	ad 87       	std	Y+13, r26	; 0x0d
    1766:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1768:	6b 85       	ldd	r22, Y+11	; 0x0b
    176a:	7c 85       	ldd	r23, Y+12	; 0x0c
    176c:	8d 85       	ldd	r24, Y+13	; 0x0d
    176e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1770:	20 e0       	ldi	r18, 0x00	; 0
    1772:	30 e0       	ldi	r19, 0x00	; 0
    1774:	4a ef       	ldi	r20, 0xFA	; 250
    1776:	54 e4       	ldi	r21, 0x44	; 68
    1778:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    177c:	dc 01       	movw	r26, r24
    177e:	cb 01       	movw	r24, r22
    1780:	8f 83       	std	Y+7, r24	; 0x07
    1782:	98 87       	std	Y+8, r25	; 0x08
    1784:	a9 87       	std	Y+9, r26	; 0x09
    1786:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	20 e0       	ldi	r18, 0x00	; 0
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	40 e8       	ldi	r20, 0x80	; 128
    1796:	5f e3       	ldi	r21, 0x3F	; 63
    1798:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    179c:	88 23       	and	r24, r24
    179e:	2c f4       	brge	.+10     	; 0x17aa <calc_sub+0x1d0>
		__ticks = 1;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9e 83       	std	Y+6, r25	; 0x06
    17a6:	8d 83       	std	Y+5, r24	; 0x05
    17a8:	3f c0       	rjmp	.+126    	; 0x1828 <calc_sub+0x24e>
	else if (__tmp > 65535)
    17aa:	6f 81       	ldd	r22, Y+7	; 0x07
    17ac:	78 85       	ldd	r23, Y+8	; 0x08
    17ae:	89 85       	ldd	r24, Y+9	; 0x09
    17b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	3f ef       	ldi	r19, 0xFF	; 255
    17b6:	4f e7       	ldi	r20, 0x7F	; 127
    17b8:	57 e4       	ldi	r21, 0x47	; 71
    17ba:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    17be:	18 16       	cp	r1, r24
    17c0:	4c f5       	brge	.+82     	; 0x1814 <calc_sub+0x23a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    17c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    17c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    17c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    17ca:	20 e0       	ldi	r18, 0x00	; 0
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e2       	ldi	r20, 0x20	; 32
    17d0:	51 e4       	ldi	r21, 0x41	; 65
    17d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    17d6:	dc 01       	movw	r26, r24
    17d8:	cb 01       	movw	r24, r22
    17da:	bc 01       	movw	r22, r24
    17dc:	cd 01       	movw	r24, r26
    17de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    17e2:	dc 01       	movw	r26, r24
    17e4:	cb 01       	movw	r24, r22
    17e6:	9e 83       	std	Y+6, r25	; 0x06
    17e8:	8d 83       	std	Y+5, r24	; 0x05
    17ea:	0f c0       	rjmp	.+30     	; 0x180a <calc_sub+0x230>
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	8b 81       	ldd	r24, Y+3	; 0x03
    17f6:	9c 81       	ldd	r25, Y+4	; 0x04
    17f8:	01 97       	sbiw	r24, 0x01	; 1
    17fa:	f1 f7       	brne	.-4      	; 0x17f8 <calc_sub+0x21e>
    17fc:	9c 83       	std	Y+4, r25	; 0x04
    17fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1800:	8d 81       	ldd	r24, Y+5	; 0x05
    1802:	9e 81       	ldd	r25, Y+6	; 0x06
    1804:	01 97       	sbiw	r24, 0x01	; 1
    1806:	9e 83       	std	Y+6, r25	; 0x06
    1808:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180a:	8d 81       	ldd	r24, Y+5	; 0x05
    180c:	9e 81       	ldd	r25, Y+6	; 0x06
    180e:	00 97       	sbiw	r24, 0x00	; 0
    1810:	69 f7       	brne	.-38     	; 0x17ec <calc_sub+0x212>
    1812:	14 c0       	rjmp	.+40     	; 0x183c <calc_sub+0x262>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1814:	6f 81       	ldd	r22, Y+7	; 0x07
    1816:	78 85       	ldd	r23, Y+8	; 0x08
    1818:	89 85       	ldd	r24, Y+9	; 0x09
    181a:	9a 85       	ldd	r25, Y+10	; 0x0a
    181c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	9a 83       	std	Y+2, r25	; 0x02
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	89 81       	ldd	r24, Y+1	; 0x01
    1832:	9a 81       	ldd	r25, Y+2	; 0x02
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <calc_sub+0x25a>
    1838:	9a 83       	std	Y+2, r25	; 0x02
    183a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1,0);
	LCD_intgerToString(num1-num2);
	while(key != 'c')
    183c:	80 91 70 01 	lds	r24, 0x0170
    1840:	83 36       	cpi	r24, 0x63	; 99
    1842:	09 f0       	breq	.+2      	; 0x1846 <calc_sub+0x26c>
    1844:	85 cf       	rjmp	.-246    	; 0x1750 <calc_sub+0x176>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1846:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LCD_clearScreen>
}
    184a:	6a 96       	adiw	r28, 0x1a	; 26
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	1f 91       	pop	r17
    185c:	0f 91       	pop	r16
    185e:	ff 90       	pop	r15
    1860:	ef 90       	pop	r14
    1862:	08 95       	ret

00001864 <calc_multi>:
/*
 * Description :
 * Concatenate all digits of two number then display result of multi on LCD
 */
void calc_multi(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	df 93       	push	r29
    186e:	cf 93       	push	r28
    1870:	cd b7       	in	r28, 0x3d	; 61
    1872:	de b7       	in	r29, 0x3e	; 62
    1874:	6e 97       	sbiw	r28, 0x1e	; 30
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	9a 8f       	std	Y+26, r25	; 0x1a
    1882:	89 8f       	std	Y+25, r24	; 0x19
    1884:	7c 8f       	std	Y+28, r23	; 0x1c
    1886:	6b 8f       	std	Y+27, r22	; 0x1b
    1888:	4d 8f       	std	Y+29, r20	; 0x1d
    188a:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    188c:	e9 8d       	ldd	r30, Y+25	; 0x19
    188e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1890:	80 81       	ld	r24, Z
    1892:	91 81       	ldd	r25, Z+1	; 0x01
    1894:	a2 81       	ldd	r26, Z+2	; 0x02
    1896:	b3 81       	ldd	r27, Z+3	; 0x03
    1898:	8d 8b       	std	Y+21, r24	; 0x15
    189a:	9e 8b       	std	Y+22, r25	; 0x16
    189c:	af 8b       	std	Y+23, r26	; 0x17
    189e:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    18a0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    18a2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    18a4:	80 81       	ld	r24, Z
    18a6:	91 81       	ldd	r25, Z+1	; 0x01
    18a8:	a2 81       	ldd	r26, Z+2	; 0x02
    18aa:	b3 81       	ldd	r27, Z+3	; 0x03
    18ac:	89 8b       	std	Y+17, r24	; 0x11
    18ae:	9a 8b       	std	Y+18, r25	; 0x12
    18b0:	ab 8b       	std	Y+19, r26	; 0x13
    18b2:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    18b4:	81 e0       	ldi	r24, 0x01	; 1
    18b6:	88 8b       	std	Y+16, r24	; 0x10
    18b8:	2c c0       	rjmp	.+88     	; 0x1912 <calc_multi+0xae>
	{
		num1 = num1*10 +first_num[counter];
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e2       	ldi	r20, 0x20	; 32
    18c8:	51 e4       	ldi	r21, 0x41	; 65
    18ca:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    18ce:	dc 01       	movw	r26, r24
    18d0:	cb 01       	movw	r24, r22
    18d2:	7c 01       	movw	r14, r24
    18d4:	8d 01       	movw	r16, r26
    18d6:	88 89       	ldd	r24, Y+16	; 0x10
    18d8:	88 2f       	mov	r24, r24
    18da:	90 e0       	ldi	r25, 0x00	; 0
    18dc:	9c 01       	movw	r18, r24
    18de:	22 0f       	add	r18, r18
    18e0:	33 1f       	adc	r19, r19
    18e2:	22 0f       	add	r18, r18
    18e4:	33 1f       	adc	r19, r19
    18e6:	89 8d       	ldd	r24, Y+25	; 0x19
    18e8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    18ea:	fc 01       	movw	r30, r24
    18ec:	e2 0f       	add	r30, r18
    18ee:	f3 1f       	adc	r31, r19
    18f0:	20 81       	ld	r18, Z
    18f2:	31 81       	ldd	r19, Z+1	; 0x01
    18f4:	42 81       	ldd	r20, Z+2	; 0x02
    18f6:	53 81       	ldd	r21, Z+3	; 0x03
    18f8:	c8 01       	movw	r24, r16
    18fa:	b7 01       	movw	r22, r14
    18fc:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	8d 8b       	std	Y+21, r24	; 0x15
    1906:	9e 8b       	std	Y+22, r25	; 0x16
    1908:	af 8b       	std	Y+23, r26	; 0x17
    190a:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    190c:	88 89       	ldd	r24, Y+16	; 0x10
    190e:	8f 5f       	subi	r24, 0xFF	; 255
    1910:	88 8b       	std	Y+16, r24	; 0x10
    1912:	98 89       	ldd	r25, Y+16	; 0x10
    1914:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1916:	98 17       	cp	r25, r24
    1918:	80 f2       	brcs	.-96     	; 0x18ba <calc_multi+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	8f 87       	std	Y+15, r24	; 0x0f
    191e:	2c c0       	rjmp	.+88     	; 0x1978 <calc_multi+0x114>
	{
		num2= num2*10 +second_num[counter];
    1920:	69 89       	ldd	r22, Y+17	; 0x11
    1922:	7a 89       	ldd	r23, Y+18	; 0x12
    1924:	8b 89       	ldd	r24, Y+19	; 0x13
    1926:	9c 89       	ldd	r25, Y+20	; 0x14
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
    192c:	40 e2       	ldi	r20, 0x20	; 32
    192e:	51 e4       	ldi	r21, 0x41	; 65
    1930:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	7c 01       	movw	r14, r24
    193a:	8d 01       	movw	r16, r26
    193c:	8f 85       	ldd	r24, Y+15	; 0x0f
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	9c 01       	movw	r18, r24
    1944:	22 0f       	add	r18, r18
    1946:	33 1f       	adc	r19, r19
    1948:	22 0f       	add	r18, r18
    194a:	33 1f       	adc	r19, r19
    194c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    194e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1950:	fc 01       	movw	r30, r24
    1952:	e2 0f       	add	r30, r18
    1954:	f3 1f       	adc	r31, r19
    1956:	20 81       	ld	r18, Z
    1958:	31 81       	ldd	r19, Z+1	; 0x01
    195a:	42 81       	ldd	r20, Z+2	; 0x02
    195c:	53 81       	ldd	r21, Z+3	; 0x03
    195e:	c8 01       	movw	r24, r16
    1960:	b7 01       	movw	r22, r14
    1962:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1966:	dc 01       	movw	r26, r24
    1968:	cb 01       	movw	r24, r22
    196a:	89 8b       	std	Y+17, r24	; 0x11
    196c:	9a 8b       	std	Y+18, r25	; 0x12
    196e:	ab 8b       	std	Y+19, r26	; 0x13
    1970:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1972:	8f 85       	ldd	r24, Y+15	; 0x0f
    1974:	8f 5f       	subi	r24, 0xFF	; 255
    1976:	8f 87       	std	Y+15, r24	; 0x0f
    1978:	9f 85       	ldd	r25, Y+15	; 0x0f
    197a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    197c:	98 17       	cp	r25, r24
    197e:	80 f2       	brcs	.-96     	; 0x1920 <calc_multi+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_moveCursor>
	LCD_intgerToString(num1*num2);
    1988:	6d 89       	ldd	r22, Y+21	; 0x15
    198a:	7e 89       	ldd	r23, Y+22	; 0x16
    198c:	8f 89       	ldd	r24, Y+23	; 0x17
    198e:	98 8d       	ldd	r25, Y+24	; 0x18
    1990:	29 89       	ldd	r18, Y+17	; 0x11
    1992:	3a 89       	ldd	r19, Y+18	; 0x12
    1994:	4b 89       	ldd	r20, Y+19	; 0x13
    1996:	5c 89       	ldd	r21, Y+20	; 0x14
    1998:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__fixsfsi>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <LCD_intgerToString>
    19b0:	76 c0       	rjmp	.+236    	; 0x1a9e <calc_multi+0x23a>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    19b2:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    19b6:	80 93 70 01 	sts	0x0170, r24
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	a8 e4       	ldi	r26, 0x48	; 72
    19c0:	b3 e4       	ldi	r27, 0x43	; 67
    19c2:	8b 87       	std	Y+11, r24	; 0x0b
    19c4:	9c 87       	std	Y+12, r25	; 0x0c
    19c6:	ad 87       	std	Y+13, r26	; 0x0d
    19c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    19cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a ef       	ldi	r20, 0xFA	; 250
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	a9 87       	std	Y+9, r26	; 0x09
    19e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <calc_multi+0x1a8>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <calc_multi+0x226>
	else if (__tmp > 65535)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <calc_multi+0x212>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <calc_multi+0x208>
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <calc_multi+0x1f6>
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <calc_multi+0x1ea>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <calc_multi+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <calc_multi+0x232>
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_intgerToString(num1*num2);
	while(key != 'c')
    1a9e:	80 91 70 01 	lds	r24, 0x0170
    1aa2:	83 36       	cpi	r24, 0x63	; 99
    1aa4:	09 f0       	breq	.+2      	; 0x1aa8 <calc_multi+0x244>
    1aa6:	85 cf       	rjmp	.-246    	; 0x19b2 <calc_multi+0x14e>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1aa8:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LCD_clearScreen>
}
    1aac:	6e 96       	adiw	r28, 0x1e	; 30
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	ff 90       	pop	r15
    1ac2:	ef 90       	pop	r14
    1ac4:	08 95       	ret

00001ac6 <calc_div>:
/*
 * Description :
 * Concatenate all digits of two number then display result of div on LCD
 */
void calc_div(float32 *first_num,float32*second_num,uint8 digit1,uint8 digit2)
{
    1ac6:	ef 92       	push	r14
    1ac8:	ff 92       	push	r15
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	6e 97       	sbiw	r28, 0x1e	; 30
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	9a 8f       	std	Y+26, r25	; 0x1a
    1ae4:	89 8f       	std	Y+25, r24	; 0x19
    1ae6:	7c 8f       	std	Y+28, r23	; 0x1c
    1ae8:	6b 8f       	std	Y+27, r22	; 0x1b
    1aea:	4d 8f       	std	Y+29, r20	; 0x1d
    1aec:	2e 8f       	std	Y+30, r18	; 0x1e
	float32 num1=first_num[0];
    1aee:	e9 8d       	ldd	r30, Y+25	; 0x19
    1af0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1af2:	80 81       	ld	r24, Z
    1af4:	91 81       	ldd	r25, Z+1	; 0x01
    1af6:	a2 81       	ldd	r26, Z+2	; 0x02
    1af8:	b3 81       	ldd	r27, Z+3	; 0x03
    1afa:	8d 8b       	std	Y+21, r24	; 0x15
    1afc:	9e 8b       	std	Y+22, r25	; 0x16
    1afe:	af 8b       	std	Y+23, r26	; 0x17
    1b00:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];
    1b02:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1b04:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1b06:	80 81       	ld	r24, Z
    1b08:	91 81       	ldd	r25, Z+1	; 0x01
    1b0a:	a2 81       	ldd	r26, Z+2	; 0x02
    1b0c:	b3 81       	ldd	r27, Z+3	; 0x03
    1b0e:	89 8b       	std	Y+17, r24	; 0x11
    1b10:	9a 8b       	std	Y+18, r25	; 0x12
    1b12:	ab 8b       	std	Y+19, r26	; 0x13
    1b14:	bc 8b       	std	Y+20, r27	; 0x14

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	88 8b       	std	Y+16, r24	; 0x10
    1b1a:	2c c0       	rjmp	.+88     	; 0x1b74 <calc_div+0xae>
	{
		num1 = num1*10 +first_num[counter];
    1b1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b20:	8f 89       	ldd	r24, Y+23	; 0x17
    1b22:	98 8d       	ldd	r25, Y+24	; 0x18
    1b24:	20 e0       	ldi	r18, 0x00	; 0
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	40 e2       	ldi	r20, 0x20	; 32
    1b2a:	51 e4       	ldi	r21, 0x41	; 65
    1b2c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b30:	dc 01       	movw	r26, r24
    1b32:	cb 01       	movw	r24, r22
    1b34:	7c 01       	movw	r14, r24
    1b36:	8d 01       	movw	r16, r26
    1b38:	88 89       	ldd	r24, Y+16	; 0x10
    1b3a:	88 2f       	mov	r24, r24
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	9c 01       	movw	r18, r24
    1b40:	22 0f       	add	r18, r18
    1b42:	33 1f       	adc	r19, r19
    1b44:	22 0f       	add	r18, r18
    1b46:	33 1f       	adc	r19, r19
    1b48:	89 8d       	ldd	r24, Y+25	; 0x19
    1b4a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	e2 0f       	add	r30, r18
    1b50:	f3 1f       	adc	r31, r19
    1b52:	20 81       	ld	r18, Z
    1b54:	31 81       	ldd	r19, Z+1	; 0x01
    1b56:	42 81       	ldd	r20, Z+2	; 0x02
    1b58:	53 81       	ldd	r21, Z+3	; 0x03
    1b5a:	c8 01       	movw	r24, r16
    1b5c:	b7 01       	movw	r22, r14
    1b5e:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8d 8b       	std	Y+21, r24	; 0x15
    1b68:	9e 8b       	std	Y+22, r25	; 0x16
    1b6a:	af 8b       	std	Y+23, r26	; 0x17
    1b6c:	b8 8f       	std	Y+24, r27	; 0x18
	float32 num2=second_num[0];

	/*
	 *  Concatenate all digits of first number
	 */
	for(uint8 counter=1;counter<digit1;counter++)
    1b6e:	88 89       	ldd	r24, Y+16	; 0x10
    1b70:	8f 5f       	subi	r24, 0xFF	; 255
    1b72:	88 8b       	std	Y+16, r24	; 0x10
    1b74:	98 89       	ldd	r25, Y+16	; 0x10
    1b76:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b78:	98 17       	cp	r25, r24
    1b7a:	80 f2       	brcs	.-96     	; 0x1b1c <calc_div+0x56>
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	8f 87       	std	Y+15, r24	; 0x0f
    1b80:	2c c0       	rjmp	.+88     	; 0x1bda <calc_div+0x114>
	{
		num2= num2*10 +second_num[counter];
    1b82:	69 89       	ldd	r22, Y+17	; 0x11
    1b84:	7a 89       	ldd	r23, Y+18	; 0x12
    1b86:	8b 89       	ldd	r24, Y+19	; 0x13
    1b88:	9c 89       	ldd	r25, Y+20	; 0x14
    1b8a:	20 e0       	ldi	r18, 0x00	; 0
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	40 e2       	ldi	r20, 0x20	; 32
    1b90:	51 e4       	ldi	r21, 0x41	; 65
    1b92:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1b96:	dc 01       	movw	r26, r24
    1b98:	cb 01       	movw	r24, r22
    1b9a:	7c 01       	movw	r14, r24
    1b9c:	8d 01       	movw	r16, r26
    1b9e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	9c 01       	movw	r18, r24
    1ba6:	22 0f       	add	r18, r18
    1ba8:	33 1f       	adc	r19, r19
    1baa:	22 0f       	add	r18, r18
    1bac:	33 1f       	adc	r19, r19
    1bae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bb2:	fc 01       	movw	r30, r24
    1bb4:	e2 0f       	add	r30, r18
    1bb6:	f3 1f       	adc	r31, r19
    1bb8:	20 81       	ld	r18, Z
    1bba:	31 81       	ldd	r19, Z+1	; 0x01
    1bbc:	42 81       	ldd	r20, Z+2	; 0x02
    1bbe:	53 81       	ldd	r21, Z+3	; 0x03
    1bc0:	c8 01       	movw	r24, r16
    1bc2:	b7 01       	movw	r22, r14
    1bc4:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	89 8b       	std	Y+17, r24	; 0x11
    1bce:	9a 8b       	std	Y+18, r25	; 0x12
    1bd0:	ab 8b       	std	Y+19, r26	; 0x13
    1bd2:	bc 8b       	std	Y+20, r27	; 0x14
		num1 = num1*10 +first_num[counter];
	}
	/*
	 *  Concatenate all digits of second number
	 */
	for(uint8 counter=1;counter<digit2;counter++)
    1bd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bd6:	8f 5f       	subi	r24, 0xFF	; 255
    1bd8:	8f 87       	std	Y+15, r24	; 0x0f
    1bda:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bdc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1bde:	98 17       	cp	r25, r24
    1be0:	80 f2       	brcs	.-96     	; 0x1b82 <calc_div+0xbc>


	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	60 e0       	ldi	r22, 0x00	; 0
    1be6:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_moveCursor>
	LCD_floatToString(num1/num2);
    1bea:	6d 89       	ldd	r22, Y+21	; 0x15
    1bec:	7e 89       	ldd	r23, Y+22	; 0x16
    1bee:	8f 89       	ldd	r24, Y+23	; 0x17
    1bf0:	98 8d       	ldd	r25, Y+24	; 0x18
    1bf2:	29 89       	ldd	r18, Y+17	; 0x11
    1bf4:	3a 89       	ldd	r19, Y+18	; 0x12
    1bf6:	4b 89       	ldd	r20, Y+19	; 0x13
    1bf8:	5c 89       	ldd	r21, Y+20	; 0x14
    1bfa:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	bc 01       	movw	r22, r24
    1c04:	cd 01       	movw	r24, r26
    1c06:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <LCD_floatToString>
    1c0a:	76 c0       	rjmp	.+236    	; 0x1cf8 <calc_div+0x232>
	while(key != 'c')
	{
		key=KEYPAD_getPressedKey();
    1c0c:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_getPressedKey>
    1c10:	80 93 70 01 	sts	0x0170, r24
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a8 e4       	ldi	r26, 0x48	; 72
    1c1a:	b3 e4       	ldi	r27, 0x43	; 67
    1c1c:	8b 87       	std	Y+11, r24	; 0x0b
    1c1e:	9c 87       	std	Y+12, r25	; 0x0c
    1c20:	ad 87       	std	Y+13, r26	; 0x0d
    1c22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c2c:	20 e0       	ldi	r18, 0x00	; 0
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	4a ef       	ldi	r20, 0xFA	; 250
    1c32:	54 e4       	ldi	r21, 0x44	; 68
    1c34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	8f 83       	std	Y+7, r24	; 0x07
    1c3e:	98 87       	std	Y+8, r25	; 0x08
    1c40:	a9 87       	std	Y+9, r26	; 0x09
    1c42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c44:	6f 81       	ldd	r22, Y+7	; 0x07
    1c46:	78 85       	ldd	r23, Y+8	; 0x08
    1c48:	89 85       	ldd	r24, Y+9	; 0x09
    1c4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e8       	ldi	r20, 0x80	; 128
    1c52:	5f e3       	ldi	r21, 0x3F	; 63
    1c54:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1c58:	88 23       	and	r24, r24
    1c5a:	2c f4       	brge	.+10     	; 0x1c66 <calc_div+0x1a0>
		__ticks = 1;
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	3f c0       	rjmp	.+126    	; 0x1ce4 <calc_div+0x21e>
	else if (__tmp > 65535)
    1c66:	6f 81       	ldd	r22, Y+7	; 0x07
    1c68:	78 85       	ldd	r23, Y+8	; 0x08
    1c6a:	89 85       	ldd	r24, Y+9	; 0x09
    1c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	3f ef       	ldi	r19, 0xFF	; 255
    1c72:	4f e7       	ldi	r20, 0x7F	; 127
    1c74:	57 e4       	ldi	r21, 0x47	; 71
    1c76:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1c7a:	18 16       	cp	r1, r24
    1c7c:	4c f5       	brge	.+82     	; 0x1cd0 <calc_div+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c86:	20 e0       	ldi	r18, 0x00	; 0
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e2       	ldi	r20, 0x20	; 32
    1c8c:	51 e4       	ldi	r21, 0x41	; 65
    1c8e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	bc 01       	movw	r22, r24
    1c98:	cd 01       	movw	r24, r26
    1c9a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	cb 01       	movw	r24, r22
    1ca2:	9e 83       	std	Y+6, r25	; 0x06
    1ca4:	8d 83       	std	Y+5, r24	; 0x05
    1ca6:	0f c0       	rjmp	.+30     	; 0x1cc6 <calc_div+0x200>
    1ca8:	88 ec       	ldi	r24, 0xC8	; 200
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	9c 83       	std	Y+4, r25	; 0x04
    1cae:	8b 83       	std	Y+3, r24	; 0x03
    1cb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	f1 f7       	brne	.-4      	; 0x1cb4 <calc_div+0x1ee>
    1cb8:	9c 83       	std	Y+4, r25	; 0x04
    1cba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc0:	01 97       	sbiw	r24, 0x01	; 1
    1cc2:	9e 83       	std	Y+6, r25	; 0x06
    1cc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cca:	00 97       	sbiw	r24, 0x00	; 0
    1ccc:	69 f7       	brne	.-38     	; 0x1ca8 <calc_div+0x1e2>
    1cce:	14 c0       	rjmp	.+40     	; 0x1cf8 <calc_div+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd2:	78 85       	ldd	r23, Y+8	; 0x08
    1cd4:	89 85       	ldd	r24, Y+9	; 0x09
    1cd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cd8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	9e 83       	std	Y+6, r25	; 0x06
    1ce2:	8d 83       	std	Y+5, r24	; 0x05
    1ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce8:	9a 83       	std	Y+2, r25	; 0x02
    1cea:	89 83       	std	Y+1, r24	; 0x01
    1cec:	89 81       	ldd	r24, Y+1	; 0x01
    1cee:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <calc_div+0x22a>
    1cf4:	9a 83       	std	Y+2, r25	; 0x02
    1cf6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 *  Display result on LCD and wait until enter c
	 */
	LCD_moveCursor(1, 0);
	LCD_floatToString(num1/num2);
	while(key != 'c')
    1cf8:	80 91 70 01 	lds	r24, 0x0170
    1cfc:	83 36       	cpi	r24, 0x63	; 99
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <calc_div+0x23c>
    1d00:	85 cf       	rjmp	.-246    	; 0x1c0c <calc_div+0x146>
	{
		key=KEYPAD_getPressedKey();
		_delay_ms(200);
	}
	LCD_clearScreen();
    1d02:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <LCD_clearScreen>
}
    1d06:	6e 96       	adiw	r28, 0x1e	; 30
    1d08:	0f b6       	in	r0, 0x3f	; 63
    1d0a:	f8 94       	cli
    1d0c:	de bf       	out	0x3e, r29	; 62
    1d0e:	0f be       	out	0x3f, r0	; 63
    1d10:	cd bf       	out	0x3d, r28	; 61
    1d12:	cf 91       	pop	r28
    1d14:	df 91       	pop	r29
    1d16:	1f 91       	pop	r17
    1d18:	0f 91       	pop	r16
    1d1a:	ff 90       	pop	r15
    1d1c:	ef 90       	pop	r14
    1d1e:	08 95       	ret

00001d20 <Do_Caclulations>:
/*
 * Description :
 *  Get two number and operation and do operation and display it on screen
 */
void Do_Caclulations(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	00 d0       	rcall	.+0      	; 0x1d26 <Do_Caclulations+0x6>
    1d26:	cd b7       	in	r28, 0x3d	; 61
    1d28:	de b7       	in	r29, 0x3e	; 62

	/*
	 * Get first number and operation
	 */
	First_NUM();
    1d2a:	0e 94 2e 08 	call	0x105c	; 0x105c <First_NUM>

	/*
	 * Get first number and operation
	 */
	Second_NUM();
    1d2e:	0e 94 fd 08 	call	0x11fa	; 0x11fa <Second_NUM>

	/*
	 * Do operation calculation
	 */
	switch(opration)
    1d32:	80 91 73 01 	lds	r24, 0x0173
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	3a 83       	std	Y+2, r19	; 0x02
    1d3c:	29 83       	std	Y+1, r18	; 0x01
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	8b 32       	cpi	r24, 0x2B	; 43
    1d44:	91 05       	cpc	r25, r1
    1d46:	b1 f0       	breq	.+44     	; 0x1d74 <Do_Caclulations+0x54>
    1d48:	29 81       	ldd	r18, Y+1	; 0x01
    1d4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1d4c:	2c 32       	cpi	r18, 0x2C	; 44
    1d4e:	31 05       	cpc	r19, r1
    1d50:	34 f4       	brge	.+12     	; 0x1d5e <Do_Caclulations+0x3e>
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	8a 32       	cpi	r24, 0x2A	; 42
    1d58:	91 05       	cpc	r25, r1
    1d5a:	31 f1       	breq	.+76     	; 0x1da8 <Do_Caclulations+0x88>
    1d5c:	3e c0       	rjmp	.+124    	; 0x1dda <Do_Caclulations+0xba>
    1d5e:	29 81       	ldd	r18, Y+1	; 0x01
    1d60:	3a 81       	ldd	r19, Y+2	; 0x02
    1d62:	2d 32       	cpi	r18, 0x2D	; 45
    1d64:	31 05       	cpc	r19, r1
    1d66:	99 f0       	breq	.+38     	; 0x1d8e <Do_Caclulations+0x6e>
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d6c:	8f 32       	cpi	r24, 0x2F	; 47
    1d6e:	91 05       	cpc	r25, r1
    1d70:	41 f1       	breq	.+80     	; 0x1dc2 <Do_Caclulations+0xa2>
    1d72:	33 c0       	rjmp	.+102    	; 0x1dda <Do_Caclulations+0xba>
	{
	case '+':
		calc_sum(number1, number2, num1_counter, num2_counter);
    1d74:	40 91 71 01 	lds	r20, 0x0171
    1d78:	50 91 72 01 	lds	r21, 0x0172
    1d7c:	84 e7       	ldi	r24, 0x74	; 116
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	2c e9       	ldi	r18, 0x9C	; 156
    1d82:	31 e0       	ldi	r19, 0x01	; 1
    1d84:	b9 01       	movw	r22, r18
    1d86:	25 2f       	mov	r18, r21
    1d88:	0e 94 bc 09 	call	0x1378	; 0x1378 <calc_sum>
    1d8c:	26 c0       	rjmp	.+76     	; 0x1dda <Do_Caclulations+0xba>
		break;
	case '-':
		calc_sub(number1, number2, num1_counter, num2_counter);
    1d8e:	40 91 71 01 	lds	r20, 0x0171
    1d92:	50 91 72 01 	lds	r21, 0x0172
    1d96:	84 e7       	ldi	r24, 0x74	; 116
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	2c e9       	ldi	r18, 0x9C	; 156
    1d9c:	31 e0       	ldi	r19, 0x01	; 1
    1d9e:	b9 01       	movw	r22, r18
    1da0:	25 2f       	mov	r18, r21
    1da2:	0e 94 ed 0a 	call	0x15da	; 0x15da <calc_sub>
    1da6:	19 c0       	rjmp	.+50     	; 0x1dda <Do_Caclulations+0xba>
		break;
	case '*':
		calc_multi(number1, number2, num1_counter, num2_counter);
    1da8:	40 91 71 01 	lds	r20, 0x0171
    1dac:	50 91 72 01 	lds	r21, 0x0172
    1db0:	84 e7       	ldi	r24, 0x74	; 116
    1db2:	91 e0       	ldi	r25, 0x01	; 1
    1db4:	2c e9       	ldi	r18, 0x9C	; 156
    1db6:	31 e0       	ldi	r19, 0x01	; 1
    1db8:	b9 01       	movw	r22, r18
    1dba:	25 2f       	mov	r18, r21
    1dbc:	0e 94 32 0c 	call	0x1864	; 0x1864 <calc_multi>
    1dc0:	0c c0       	rjmp	.+24     	; 0x1dda <Do_Caclulations+0xba>
		break;
	case '/':
		calc_div(number1, number2, num1_counter, num2_counter);
    1dc2:	40 91 71 01 	lds	r20, 0x0171
    1dc6:	50 91 72 01 	lds	r21, 0x0172
    1dca:	84 e7       	ldi	r24, 0x74	; 116
    1dcc:	91 e0       	ldi	r25, 0x01	; 1
    1dce:	2c e9       	ldi	r18, 0x9C	; 156
    1dd0:	31 e0       	ldi	r19, 0x01	; 1
    1dd2:	b9 01       	movw	r22, r18
    1dd4:	25 2f       	mov	r18, r21
    1dd6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <calc_div>
		break;
	}

}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	cf 91       	pop	r28
    1de0:	df 91       	pop	r29
    1de2:	08 95       	ret

00001de4 <main>:
 ============================================================================
 */

#include "calc.h"
int main(void)
{
    1de4:	df 93       	push	r29
    1de6:	cf 93       	push	r28
    1de8:	cd b7       	in	r28, 0x3d	; 61
    1dea:	de b7       	in	r29, 0x3e	; 62


	start(); //Start interface
    1dec:	0e 94 94 07 	call	0xf28	; 0xf28 <start>

	while(1)
	{
		Do_Caclulations();//Start program (Calculations)
    1df0:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <Do_Caclulations>
    1df4:	fd cf       	rjmp	.-6      	; 0x1df0 <main+0xc>

00001df6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1df6:	df 93       	push	r29
    1df8:	cf 93       	push	r28
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <GPIO_setupPinDirection+0x6>
    1dfc:	00 d0       	rcall	.+0      	; 0x1dfe <GPIO_setupPinDirection+0x8>
    1dfe:	0f 92       	push	r0
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	6a 83       	std	Y+2, r22	; 0x02
    1e08:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0c:	88 30       	cpi	r24, 0x08	; 8
    1e0e:	08 f0       	brcs	.+2      	; 0x1e12 <GPIO_setupPinDirection+0x1c>
    1e10:	d5 c0       	rjmp	.+426    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
    1e12:	89 81       	ldd	r24, Y+1	; 0x01
    1e14:	84 30       	cpi	r24, 0x04	; 4
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <GPIO_setupPinDirection+0x24>
    1e18:	d1 c0       	rjmp	.+418    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	28 2f       	mov	r18, r24
    1e1e:	30 e0       	ldi	r19, 0x00	; 0
    1e20:	3d 83       	std	Y+5, r19	; 0x05
    1e22:	2c 83       	std	Y+4, r18	; 0x04
    1e24:	8c 81       	ldd	r24, Y+4	; 0x04
    1e26:	9d 81       	ldd	r25, Y+5	; 0x05
    1e28:	81 30       	cpi	r24, 0x01	; 1
    1e2a:	91 05       	cpc	r25, r1
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <GPIO_setupPinDirection+0x3a>
    1e2e:	43 c0       	rjmp	.+134    	; 0x1eb6 <GPIO_setupPinDirection+0xc0>
    1e30:	2c 81       	ldd	r18, Y+4	; 0x04
    1e32:	3d 81       	ldd	r19, Y+5	; 0x05
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	2c f4       	brge	.+10     	; 0x1e44 <GPIO_setupPinDirection+0x4e>
    1e3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1e3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	71 f0       	breq	.+28     	; 0x1e5e <GPIO_setupPinDirection+0x68>
    1e42:	bc c0       	rjmp	.+376    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
    1e44:	2c 81       	ldd	r18, Y+4	; 0x04
    1e46:	3d 81       	ldd	r19, Y+5	; 0x05
    1e48:	22 30       	cpi	r18, 0x02	; 2
    1e4a:	31 05       	cpc	r19, r1
    1e4c:	09 f4       	brne	.+2      	; 0x1e50 <GPIO_setupPinDirection+0x5a>
    1e4e:	5f c0       	rjmp	.+190    	; 0x1f0e <GPIO_setupPinDirection+0x118>
    1e50:	8c 81       	ldd	r24, Y+4	; 0x04
    1e52:	9d 81       	ldd	r25, Y+5	; 0x05
    1e54:	83 30       	cpi	r24, 0x03	; 3
    1e56:	91 05       	cpc	r25, r1
    1e58:	09 f4       	brne	.+2      	; 0x1e5c <GPIO_setupPinDirection+0x66>
    1e5a:	85 c0       	rjmp	.+266    	; 0x1f66 <GPIO_setupPinDirection+0x170>
    1e5c:	af c0       	rjmp	.+350    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	a1 f4       	brne	.+40     	; 0x1e8c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1e64:	aa e3       	ldi	r26, 0x3A	; 58
    1e66:	b0 e0       	ldi	r27, 0x00	; 0
    1e68:	ea e3       	ldi	r30, 0x3A	; 58
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	80 81       	ld	r24, Z
    1e6e:	48 2f       	mov	r20, r24
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	28 2f       	mov	r18, r24
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	02 2e       	mov	r0, r18
    1e7c:	02 c0       	rjmp	.+4      	; 0x1e82 <GPIO_setupPinDirection+0x8c>
    1e7e:	88 0f       	add	r24, r24
    1e80:	99 1f       	adc	r25, r25
    1e82:	0a 94       	dec	r0
    1e84:	e2 f7       	brpl	.-8      	; 0x1e7e <GPIO_setupPinDirection+0x88>
    1e86:	84 2b       	or	r24, r20
    1e88:	8c 93       	st	X, r24
    1e8a:	98 c0       	rjmp	.+304    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1e8c:	aa e3       	ldi	r26, 0x3A	; 58
    1e8e:	b0 e0       	ldi	r27, 0x00	; 0
    1e90:	ea e3       	ldi	r30, 0x3A	; 58
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	48 2f       	mov	r20, r24
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	02 2e       	mov	r0, r18
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <GPIO_setupPinDirection+0xb4>
    1ea6:	88 0f       	add	r24, r24
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	0a 94       	dec	r0
    1eac:	e2 f7       	brpl	.-8      	; 0x1ea6 <GPIO_setupPinDirection+0xb0>
    1eae:	80 95       	com	r24
    1eb0:	84 23       	and	r24, r20
    1eb2:	8c 93       	st	X, r24
    1eb4:	83 c0       	rjmp	.+262    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb8:	81 30       	cpi	r24, 0x01	; 1
    1eba:	a1 f4       	brne	.+40     	; 0x1ee4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1ebc:	a7 e3       	ldi	r26, 0x37	; 55
    1ebe:	b0 e0       	ldi	r27, 0x00	; 0
    1ec0:	e7 e3       	ldi	r30, 0x37	; 55
    1ec2:	f0 e0       	ldi	r31, 0x00	; 0
    1ec4:	80 81       	ld	r24, Z
    1ec6:	48 2f       	mov	r20, r24
    1ec8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eca:	28 2f       	mov	r18, r24
    1ecc:	30 e0       	ldi	r19, 0x00	; 0
    1ece:	81 e0       	ldi	r24, 0x01	; 1
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	02 2e       	mov	r0, r18
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <GPIO_setupPinDirection+0xe4>
    1ed6:	88 0f       	add	r24, r24
    1ed8:	99 1f       	adc	r25, r25
    1eda:	0a 94       	dec	r0
    1edc:	e2 f7       	brpl	.-8      	; 0x1ed6 <GPIO_setupPinDirection+0xe0>
    1ede:	84 2b       	or	r24, r20
    1ee0:	8c 93       	st	X, r24
    1ee2:	6c c0       	rjmp	.+216    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1ee4:	a7 e3       	ldi	r26, 0x37	; 55
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e7 e3       	ldi	r30, 0x37	; 55
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 81       	ld	r24, Z
    1eee:	48 2f       	mov	r20, r24
    1ef0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	02 2e       	mov	r0, r18
    1efc:	02 c0       	rjmp	.+4      	; 0x1f02 <GPIO_setupPinDirection+0x10c>
    1efe:	88 0f       	add	r24, r24
    1f00:	99 1f       	adc	r25, r25
    1f02:	0a 94       	dec	r0
    1f04:	e2 f7       	brpl	.-8      	; 0x1efe <GPIO_setupPinDirection+0x108>
    1f06:	80 95       	com	r24
    1f08:	84 23       	and	r24, r20
    1f0a:	8c 93       	st	X, r24
    1f0c:	57 c0       	rjmp	.+174    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	81 30       	cpi	r24, 0x01	; 1
    1f12:	a1 f4       	brne	.+40     	; 0x1f3c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1f14:	a4 e3       	ldi	r26, 0x34	; 52
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e4 e3       	ldi	r30, 0x34	; 52
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <GPIO_setupPinDirection+0x13c>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <GPIO_setupPinDirection+0x138>
    1f36:	84 2b       	or	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	40 c0       	rjmp	.+128    	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1f3c:	a4 e3       	ldi	r26, 0x34	; 52
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e4 e3       	ldi	r30, 0x34	; 52
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <GPIO_setupPinDirection+0x164>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <GPIO_setupPinDirection+0x160>
    1f5e:	80 95       	com	r24
    1f60:	84 23       	and	r24, r20
    1f62:	8c 93       	st	X, r24
    1f64:	2b c0       	rjmp	.+86     	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1f66:	8b 81       	ldd	r24, Y+3	; 0x03
    1f68:	81 30       	cpi	r24, 0x01	; 1
    1f6a:	a1 f4       	brne	.+40     	; 0x1f94 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1f6c:	a1 e3       	ldi	r26, 0x31	; 49
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e1 e3       	ldi	r30, 0x31	; 49
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
    1f76:	48 2f       	mov	r20, r24
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	02 2e       	mov	r0, r18
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <GPIO_setupPinDirection+0x194>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <GPIO_setupPinDirection+0x190>
    1f8e:	84 2b       	or	r24, r20
    1f90:	8c 93       	st	X, r24
    1f92:	14 c0       	rjmp	.+40     	; 0x1fbc <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1f94:	a1 e3       	ldi	r26, 0x31	; 49
    1f96:	b0 e0       	ldi	r27, 0x00	; 0
    1f98:	e1 e3       	ldi	r30, 0x31	; 49
    1f9a:	f0 e0       	ldi	r31, 0x00	; 0
    1f9c:	80 81       	ld	r24, Z
    1f9e:	48 2f       	mov	r20, r24
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	02 2e       	mov	r0, r18
    1fac:	02 c0       	rjmp	.+4      	; 0x1fb2 <GPIO_setupPinDirection+0x1bc>
    1fae:	88 0f       	add	r24, r24
    1fb0:	99 1f       	adc	r25, r25
    1fb2:	0a 94       	dec	r0
    1fb4:	e2 f7       	brpl	.-8      	; 0x1fae <GPIO_setupPinDirection+0x1b8>
    1fb6:	80 95       	com	r24
    1fb8:	84 23       	and	r24, r20
    1fba:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fbc:	0f 90       	pop	r0
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <GPIO_writePin+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <GPIO_writePin+0x8>
    1fd4:	0f 92       	push	r0
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	89 83       	std	Y+1, r24	; 0x01
    1fdc:	6a 83       	std	Y+2, r22	; 0x02
    1fde:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe2:	88 30       	cpi	r24, 0x08	; 8
    1fe4:	08 f0       	brcs	.+2      	; 0x1fe8 <GPIO_writePin+0x1c>
    1fe6:	d5 c0       	rjmp	.+426    	; 0x2192 <GPIO_writePin+0x1c6>
    1fe8:	89 81       	ldd	r24, Y+1	; 0x01
    1fea:	84 30       	cpi	r24, 0x04	; 4
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <GPIO_writePin+0x24>
    1fee:	d1 c0       	rjmp	.+418    	; 0x2192 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	28 2f       	mov	r18, r24
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	3d 83       	std	Y+5, r19	; 0x05
    1ff8:	2c 83       	std	Y+4, r18	; 0x04
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	81 30       	cpi	r24, 0x01	; 1
    2000:	91 05       	cpc	r25, r1
    2002:	09 f4       	brne	.+2      	; 0x2006 <GPIO_writePin+0x3a>
    2004:	43 c0       	rjmp	.+134    	; 0x208c <GPIO_writePin+0xc0>
    2006:	2c 81       	ldd	r18, Y+4	; 0x04
    2008:	3d 81       	ldd	r19, Y+5	; 0x05
    200a:	22 30       	cpi	r18, 0x02	; 2
    200c:	31 05       	cpc	r19, r1
    200e:	2c f4       	brge	.+10     	; 0x201a <GPIO_writePin+0x4e>
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	9d 81       	ldd	r25, Y+5	; 0x05
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	71 f0       	breq	.+28     	; 0x2034 <GPIO_writePin+0x68>
    2018:	bc c0       	rjmp	.+376    	; 0x2192 <GPIO_writePin+0x1c6>
    201a:	2c 81       	ldd	r18, Y+4	; 0x04
    201c:	3d 81       	ldd	r19, Y+5	; 0x05
    201e:	22 30       	cpi	r18, 0x02	; 2
    2020:	31 05       	cpc	r19, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <GPIO_writePin+0x5a>
    2024:	5f c0       	rjmp	.+190    	; 0x20e4 <GPIO_writePin+0x118>
    2026:	8c 81       	ldd	r24, Y+4	; 0x04
    2028:	9d 81       	ldd	r25, Y+5	; 0x05
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	09 f4       	brne	.+2      	; 0x2032 <GPIO_writePin+0x66>
    2030:	85 c0       	rjmp	.+266    	; 0x213c <GPIO_writePin+0x170>
    2032:	af c0       	rjmp	.+350    	; 0x2192 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    2034:	8b 81       	ldd	r24, Y+3	; 0x03
    2036:	81 30       	cpi	r24, 0x01	; 1
    2038:	a1 f4       	brne	.+40     	; 0x2062 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    203a:	ab e3       	ldi	r26, 0x3B	; 59
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	eb e3       	ldi	r30, 0x3B	; 59
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 81       	ld	r24, Z
    2044:	48 2f       	mov	r20, r24
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	28 2f       	mov	r18, r24
    204a:	30 e0       	ldi	r19, 0x00	; 0
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	90 e0       	ldi	r25, 0x00	; 0
    2050:	02 2e       	mov	r0, r18
    2052:	02 c0       	rjmp	.+4      	; 0x2058 <GPIO_writePin+0x8c>
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	0a 94       	dec	r0
    205a:	e2 f7       	brpl	.-8      	; 0x2054 <GPIO_writePin+0x88>
    205c:	84 2b       	or	r24, r20
    205e:	8c 93       	st	X, r24
    2060:	98 c0       	rjmp	.+304    	; 0x2192 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    2062:	ab e3       	ldi	r26, 0x3B	; 59
    2064:	b0 e0       	ldi	r27, 0x00	; 0
    2066:	eb e3       	ldi	r30, 0x3B	; 59
    2068:	f0 e0       	ldi	r31, 0x00	; 0
    206a:	80 81       	ld	r24, Z
    206c:	48 2f       	mov	r20, r24
    206e:	8a 81       	ldd	r24, Y+2	; 0x02
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	02 2e       	mov	r0, r18
    207a:	02 c0       	rjmp	.+4      	; 0x2080 <GPIO_writePin+0xb4>
    207c:	88 0f       	add	r24, r24
    207e:	99 1f       	adc	r25, r25
    2080:	0a 94       	dec	r0
    2082:	e2 f7       	brpl	.-8      	; 0x207c <GPIO_writePin+0xb0>
    2084:	80 95       	com	r24
    2086:	84 23       	and	r24, r20
    2088:	8c 93       	st	X, r24
    208a:	83 c0       	rjmp	.+262    	; 0x2192 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	81 30       	cpi	r24, 0x01	; 1
    2090:	a1 f4       	brne	.+40     	; 0x20ba <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    2092:	a8 e3       	ldi	r26, 0x38	; 56
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e8 e3       	ldi	r30, 0x38	; 56
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	80 81       	ld	r24, Z
    209c:	48 2f       	mov	r20, r24
    209e:	8a 81       	ldd	r24, Y+2	; 0x02
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	81 e0       	ldi	r24, 0x01	; 1
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	02 2e       	mov	r0, r18
    20aa:	02 c0       	rjmp	.+4      	; 0x20b0 <GPIO_writePin+0xe4>
    20ac:	88 0f       	add	r24, r24
    20ae:	99 1f       	adc	r25, r25
    20b0:	0a 94       	dec	r0
    20b2:	e2 f7       	brpl	.-8      	; 0x20ac <GPIO_writePin+0xe0>
    20b4:	84 2b       	or	r24, r20
    20b6:	8c 93       	st	X, r24
    20b8:	6c c0       	rjmp	.+216    	; 0x2192 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    20ba:	a8 e3       	ldi	r26, 0x38	; 56
    20bc:	b0 e0       	ldi	r27, 0x00	; 0
    20be:	e8 e3       	ldi	r30, 0x38	; 56
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	80 81       	ld	r24, Z
    20c4:	48 2f       	mov	r20, r24
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	02 2e       	mov	r0, r18
    20d2:	02 c0       	rjmp	.+4      	; 0x20d8 <GPIO_writePin+0x10c>
    20d4:	88 0f       	add	r24, r24
    20d6:	99 1f       	adc	r25, r25
    20d8:	0a 94       	dec	r0
    20da:	e2 f7       	brpl	.-8      	; 0x20d4 <GPIO_writePin+0x108>
    20dc:	80 95       	com	r24
    20de:	84 23       	and	r24, r20
    20e0:	8c 93       	st	X, r24
    20e2:	57 c0       	rjmp	.+174    	; 0x2192 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    20e4:	8b 81       	ldd	r24, Y+3	; 0x03
    20e6:	81 30       	cpi	r24, 0x01	; 1
    20e8:	a1 f4       	brne	.+40     	; 0x2112 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    20ea:	a5 e3       	ldi	r26, 0x35	; 53
    20ec:	b0 e0       	ldi	r27, 0x00	; 0
    20ee:	e5 e3       	ldi	r30, 0x35	; 53
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	48 2f       	mov	r20, r24
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	28 2f       	mov	r18, r24
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	02 2e       	mov	r0, r18
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <GPIO_writePin+0x13c>
    2104:	88 0f       	add	r24, r24
    2106:	99 1f       	adc	r25, r25
    2108:	0a 94       	dec	r0
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <GPIO_writePin+0x138>
    210c:	84 2b       	or	r24, r20
    210e:	8c 93       	st	X, r24
    2110:	40 c0       	rjmp	.+128    	; 0x2192 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    2112:	a5 e3       	ldi	r26, 0x35	; 53
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e5 e3       	ldi	r30, 0x35	; 53
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	48 2f       	mov	r20, r24
    211e:	8a 81       	ldd	r24, Y+2	; 0x02
    2120:	28 2f       	mov	r18, r24
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	02 2e       	mov	r0, r18
    212a:	02 c0       	rjmp	.+4      	; 0x2130 <GPIO_writePin+0x164>
    212c:	88 0f       	add	r24, r24
    212e:	99 1f       	adc	r25, r25
    2130:	0a 94       	dec	r0
    2132:	e2 f7       	brpl	.-8      	; 0x212c <GPIO_writePin+0x160>
    2134:	80 95       	com	r24
    2136:	84 23       	and	r24, r20
    2138:	8c 93       	st	X, r24
    213a:	2b c0       	rjmp	.+86     	; 0x2192 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    213c:	8b 81       	ldd	r24, Y+3	; 0x03
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	a1 f4       	brne	.+40     	; 0x216a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    2142:	a2 e3       	ldi	r26, 0x32	; 50
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e2 e3       	ldi	r30, 0x32	; 50
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	48 2f       	mov	r20, r24
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 2e       	mov	r0, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <GPIO_writePin+0x194>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	0a 94       	dec	r0
    2162:	e2 f7       	brpl	.-8      	; 0x215c <GPIO_writePin+0x190>
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    216a:	a2 e3       	ldi	r26, 0x32	; 50
    216c:	b0 e0       	ldi	r27, 0x00	; 0
    216e:	e2 e3       	ldi	r30, 0x32	; 50
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	80 81       	ld	r24, Z
    2174:	48 2f       	mov	r20, r24
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	81 e0       	ldi	r24, 0x01	; 1
    217e:	90 e0       	ldi	r25, 0x00	; 0
    2180:	02 2e       	mov	r0, r18
    2182:	02 c0       	rjmp	.+4      	; 0x2188 <GPIO_writePin+0x1bc>
    2184:	88 0f       	add	r24, r24
    2186:	99 1f       	adc	r25, r25
    2188:	0a 94       	dec	r0
    218a:	e2 f7       	brpl	.-8      	; 0x2184 <GPIO_writePin+0x1b8>
    218c:	80 95       	com	r24
    218e:	84 23       	and	r24, r20
    2190:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <GPIO_readPin+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <GPIO_readPin+0x8>
    21aa:	0f 92       	push	r0
    21ac:	cd b7       	in	r28, 0x3d	; 61
    21ae:	de b7       	in	r29, 0x3e	; 62
    21b0:	8a 83       	std	Y+2, r24	; 0x02
    21b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    21b4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	88 30       	cpi	r24, 0x08	; 8
    21ba:	08 f0       	brcs	.+2      	; 0x21be <GPIO_readPin+0x1c>
    21bc:	84 c0       	rjmp	.+264    	; 0x22c6 <GPIO_readPin+0x124>
    21be:	8a 81       	ldd	r24, Y+2	; 0x02
    21c0:	84 30       	cpi	r24, 0x04	; 4
    21c2:	08 f0       	brcs	.+2      	; 0x21c6 <GPIO_readPin+0x24>
    21c4:	80 c0       	rjmp	.+256    	; 0x22c6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    21c6:	8a 81       	ldd	r24, Y+2	; 0x02
    21c8:	28 2f       	mov	r18, r24
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	3d 83       	std	Y+5, r19	; 0x05
    21ce:	2c 83       	std	Y+4, r18	; 0x04
    21d0:	4c 81       	ldd	r20, Y+4	; 0x04
    21d2:	5d 81       	ldd	r21, Y+5	; 0x05
    21d4:	41 30       	cpi	r20, 0x01	; 1
    21d6:	51 05       	cpc	r21, r1
    21d8:	79 f1       	breq	.+94     	; 0x2238 <GPIO_readPin+0x96>
    21da:	8c 81       	ldd	r24, Y+4	; 0x04
    21dc:	9d 81       	ldd	r25, Y+5	; 0x05
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	91 05       	cpc	r25, r1
    21e2:	34 f4       	brge	.+12     	; 0x21f0 <GPIO_readPin+0x4e>
    21e4:	2c 81       	ldd	r18, Y+4	; 0x04
    21e6:	3d 81       	ldd	r19, Y+5	; 0x05
    21e8:	21 15       	cp	r18, r1
    21ea:	31 05       	cpc	r19, r1
    21ec:	69 f0       	breq	.+26     	; 0x2208 <GPIO_readPin+0x66>
    21ee:	6b c0       	rjmp	.+214    	; 0x22c6 <GPIO_readPin+0x124>
    21f0:	4c 81       	ldd	r20, Y+4	; 0x04
    21f2:	5d 81       	ldd	r21, Y+5	; 0x05
    21f4:	42 30       	cpi	r20, 0x02	; 2
    21f6:	51 05       	cpc	r21, r1
    21f8:	b9 f1       	breq	.+110    	; 0x2268 <GPIO_readPin+0xc6>
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	9d 81       	ldd	r25, Y+5	; 0x05
    21fe:	83 30       	cpi	r24, 0x03	; 3
    2200:	91 05       	cpc	r25, r1
    2202:	09 f4       	brne	.+2      	; 0x2206 <GPIO_readPin+0x64>
    2204:	49 c0       	rjmp	.+146    	; 0x2298 <GPIO_readPin+0xf6>
    2206:	5f c0       	rjmp	.+190    	; 0x22c6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2208:	e9 e3       	ldi	r30, 0x39	; 57
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	28 2f       	mov	r18, r24
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	88 2f       	mov	r24, r24
    2216:	90 e0       	ldi	r25, 0x00	; 0
    2218:	a9 01       	movw	r20, r18
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <GPIO_readPin+0x7e>
    221c:	55 95       	asr	r21
    221e:	47 95       	ror	r20
    2220:	8a 95       	dec	r24
    2222:	e2 f7       	brpl	.-8      	; 0x221c <GPIO_readPin+0x7a>
    2224:	ca 01       	movw	r24, r20
    2226:	81 70       	andi	r24, 0x01	; 1
    2228:	90 70       	andi	r25, 0x00	; 0
    222a:	88 23       	and	r24, r24
    222c:	19 f0       	breq	.+6      	; 0x2234 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	49 c0       	rjmp	.+146    	; 0x22c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2234:	19 82       	std	Y+1, r1	; 0x01
    2236:	47 c0       	rjmp	.+142    	; 0x22c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2238:	e6 e3       	ldi	r30, 0x36	; 54
    223a:	f0 e0       	ldi	r31, 0x00	; 0
    223c:	80 81       	ld	r24, Z
    223e:	28 2f       	mov	r18, r24
    2240:	30 e0       	ldi	r19, 0x00	; 0
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 2f       	mov	r24, r24
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	a9 01       	movw	r20, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <GPIO_readPin+0xae>
    224c:	55 95       	asr	r21
    224e:	47 95       	ror	r20
    2250:	8a 95       	dec	r24
    2252:	e2 f7       	brpl	.-8      	; 0x224c <GPIO_readPin+0xaa>
    2254:	ca 01       	movw	r24, r20
    2256:	81 70       	andi	r24, 0x01	; 1
    2258:	90 70       	andi	r25, 0x00	; 0
    225a:	88 23       	and	r24, r24
    225c:	19 f0       	breq	.+6      	; 0x2264 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	89 83       	std	Y+1, r24	; 0x01
    2262:	31 c0       	rjmp	.+98     	; 0x22c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2264:	19 82       	std	Y+1, r1	; 0x01
    2266:	2f c0       	rjmp	.+94     	; 0x22c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2268:	e3 e3       	ldi	r30, 0x33	; 51
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	28 2f       	mov	r18, r24
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	88 2f       	mov	r24, r24
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	a9 01       	movw	r20, r18
    227a:	02 c0       	rjmp	.+4      	; 0x2280 <GPIO_readPin+0xde>
    227c:	55 95       	asr	r21
    227e:	47 95       	ror	r20
    2280:	8a 95       	dec	r24
    2282:	e2 f7       	brpl	.-8      	; 0x227c <GPIO_readPin+0xda>
    2284:	ca 01       	movw	r24, r20
    2286:	81 70       	andi	r24, 0x01	; 1
    2288:	90 70       	andi	r25, 0x00	; 0
    228a:	88 23       	and	r24, r24
    228c:	19 f0       	breq	.+6      	; 0x2294 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	89 83       	std	Y+1, r24	; 0x01
    2292:	19 c0       	rjmp	.+50     	; 0x22c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2294:	19 82       	std	Y+1, r1	; 0x01
    2296:	17 c0       	rjmp	.+46     	; 0x22c6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2298:	e0 e3       	ldi	r30, 0x30	; 48
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	28 2f       	mov	r18, r24
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	a9 01       	movw	r20, r18
    22aa:	02 c0       	rjmp	.+4      	; 0x22b0 <GPIO_readPin+0x10e>
    22ac:	55 95       	asr	r21
    22ae:	47 95       	ror	r20
    22b0:	8a 95       	dec	r24
    22b2:	e2 f7       	brpl	.-8      	; 0x22ac <GPIO_readPin+0x10a>
    22b4:	ca 01       	movw	r24, r20
    22b6:	81 70       	andi	r24, 0x01	; 1
    22b8:	90 70       	andi	r25, 0x00	; 0
    22ba:	88 23       	and	r24, r24
    22bc:	19 f0       	breq	.+6      	; 0x22c4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	89 83       	std	Y+1, r24	; 0x01
    22c2:	01 c0       	rjmp	.+2      	; 0x22c6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    22c4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	cf 91       	pop	r28
    22d4:	df 91       	pop	r29
    22d6:	08 95       	ret

000022d8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	00 d0       	rcall	.+0      	; 0x22de <GPIO_setupPortDirection+0x6>
    22de:	00 d0       	rcall	.+0      	; 0x22e0 <GPIO_setupPortDirection+0x8>
    22e0:	cd b7       	in	r28, 0x3d	; 61
    22e2:	de b7       	in	r29, 0x3e	; 62
    22e4:	89 83       	std	Y+1, r24	; 0x01
    22e6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    22e8:	89 81       	ldd	r24, Y+1	; 0x01
    22ea:	84 30       	cpi	r24, 0x04	; 4
    22ec:	90 f5       	brcc	.+100    	; 0x2352 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	3c 83       	std	Y+4, r19	; 0x04
    22f6:	2b 83       	std	Y+3, r18	; 0x03
    22f8:	8b 81       	ldd	r24, Y+3	; 0x03
    22fa:	9c 81       	ldd	r25, Y+4	; 0x04
    22fc:	81 30       	cpi	r24, 0x01	; 1
    22fe:	91 05       	cpc	r25, r1
    2300:	d1 f0       	breq	.+52     	; 0x2336 <GPIO_setupPortDirection+0x5e>
    2302:	2b 81       	ldd	r18, Y+3	; 0x03
    2304:	3c 81       	ldd	r19, Y+4	; 0x04
    2306:	22 30       	cpi	r18, 0x02	; 2
    2308:	31 05       	cpc	r19, r1
    230a:	2c f4       	brge	.+10     	; 0x2316 <GPIO_setupPortDirection+0x3e>
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	00 97       	sbiw	r24, 0x00	; 0
    2312:	61 f0       	breq	.+24     	; 0x232c <GPIO_setupPortDirection+0x54>
    2314:	1e c0       	rjmp	.+60     	; 0x2352 <GPIO_setupPortDirection+0x7a>
    2316:	2b 81       	ldd	r18, Y+3	; 0x03
    2318:	3c 81       	ldd	r19, Y+4	; 0x04
    231a:	22 30       	cpi	r18, 0x02	; 2
    231c:	31 05       	cpc	r19, r1
    231e:	81 f0       	breq	.+32     	; 0x2340 <GPIO_setupPortDirection+0x68>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	83 30       	cpi	r24, 0x03	; 3
    2326:	91 05       	cpc	r25, r1
    2328:	81 f0       	breq	.+32     	; 0x234a <GPIO_setupPortDirection+0x72>
    232a:	13 c0       	rjmp	.+38     	; 0x2352 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    232c:	ea e3       	ldi	r30, 0x3A	; 58
    232e:	f0 e0       	ldi	r31, 0x00	; 0
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	80 83       	st	Z, r24
    2334:	0e c0       	rjmp	.+28     	; 0x2352 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2336:	e7 e3       	ldi	r30, 0x37	; 55
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	80 83       	st	Z, r24
    233e:	09 c0       	rjmp	.+18     	; 0x2352 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2340:	e4 e3       	ldi	r30, 0x34	; 52
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	8a 81       	ldd	r24, Y+2	; 0x02
    2346:	80 83       	st	Z, r24
    2348:	04 c0       	rjmp	.+8      	; 0x2352 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    234a:	e1 e3       	ldi	r30, 0x31	; 49
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	8a 81       	ldd	r24, Y+2	; 0x02
    2350:	80 83       	st	Z, r24
			break;
		}
	}
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <GPIO_writePort+0x6>
    2366:	00 d0       	rcall	.+0      	; 0x2368 <GPIO_writePort+0x8>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2370:	89 81       	ldd	r24, Y+1	; 0x01
    2372:	84 30       	cpi	r24, 0x04	; 4
    2374:	90 f5       	brcc	.+100    	; 0x23da <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2376:	89 81       	ldd	r24, Y+1	; 0x01
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	3c 83       	std	Y+4, r19	; 0x04
    237e:	2b 83       	std	Y+3, r18	; 0x03
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	81 30       	cpi	r24, 0x01	; 1
    2386:	91 05       	cpc	r25, r1
    2388:	d1 f0       	breq	.+52     	; 0x23be <GPIO_writePort+0x5e>
    238a:	2b 81       	ldd	r18, Y+3	; 0x03
    238c:	3c 81       	ldd	r19, Y+4	; 0x04
    238e:	22 30       	cpi	r18, 0x02	; 2
    2390:	31 05       	cpc	r19, r1
    2392:	2c f4       	brge	.+10     	; 0x239e <GPIO_writePort+0x3e>
    2394:	8b 81       	ldd	r24, Y+3	; 0x03
    2396:	9c 81       	ldd	r25, Y+4	; 0x04
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	61 f0       	breq	.+24     	; 0x23b4 <GPIO_writePort+0x54>
    239c:	1e c0       	rjmp	.+60     	; 0x23da <GPIO_writePort+0x7a>
    239e:	2b 81       	ldd	r18, Y+3	; 0x03
    23a0:	3c 81       	ldd	r19, Y+4	; 0x04
    23a2:	22 30       	cpi	r18, 0x02	; 2
    23a4:	31 05       	cpc	r19, r1
    23a6:	81 f0       	breq	.+32     	; 0x23c8 <GPIO_writePort+0x68>
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	83 30       	cpi	r24, 0x03	; 3
    23ae:	91 05       	cpc	r25, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <GPIO_writePort+0x72>
    23b2:	13 c0       	rjmp	.+38     	; 0x23da <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    23b4:	eb e3       	ldi	r30, 0x3B	; 59
    23b6:	f0 e0       	ldi	r31, 0x00	; 0
    23b8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ba:	80 83       	st	Z, r24
    23bc:	0e c0       	rjmp	.+28     	; 0x23da <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    23be:	e8 e3       	ldi	r30, 0x38	; 56
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	80 83       	st	Z, r24
    23c6:	09 c0       	rjmp	.+18     	; 0x23da <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    23c8:	e5 e3       	ldi	r30, 0x35	; 53
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	8a 81       	ldd	r24, Y+2	; 0x02
    23ce:	80 83       	st	Z, r24
    23d0:	04 c0       	rjmp	.+8      	; 0x23da <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    23d2:	e2 e3       	ldi	r30, 0x32	; 50
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	80 83       	st	Z, r24
			break;
		}
	}
}
    23da:	0f 90       	pop	r0
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <GPIO_readPort+0x6>
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <GPIO_readPort+0x8>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    23f6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    23f8:	8a 81       	ldd	r24, Y+2	; 0x02
    23fa:	84 30       	cpi	r24, 0x04	; 4
    23fc:	90 f5       	brcc	.+100    	; 0x2462 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    23fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2400:	28 2f       	mov	r18, r24
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	3c 83       	std	Y+4, r19	; 0x04
    2406:	2b 83       	std	Y+3, r18	; 0x03
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	81 30       	cpi	r24, 0x01	; 1
    240e:	91 05       	cpc	r25, r1
    2410:	d1 f0       	breq	.+52     	; 0x2446 <GPIO_readPort+0x5e>
    2412:	2b 81       	ldd	r18, Y+3	; 0x03
    2414:	3c 81       	ldd	r19, Y+4	; 0x04
    2416:	22 30       	cpi	r18, 0x02	; 2
    2418:	31 05       	cpc	r19, r1
    241a:	2c f4       	brge	.+10     	; 0x2426 <GPIO_readPort+0x3e>
    241c:	8b 81       	ldd	r24, Y+3	; 0x03
    241e:	9c 81       	ldd	r25, Y+4	; 0x04
    2420:	00 97       	sbiw	r24, 0x00	; 0
    2422:	61 f0       	breq	.+24     	; 0x243c <GPIO_readPort+0x54>
    2424:	1e c0       	rjmp	.+60     	; 0x2462 <GPIO_readPort+0x7a>
    2426:	2b 81       	ldd	r18, Y+3	; 0x03
    2428:	3c 81       	ldd	r19, Y+4	; 0x04
    242a:	22 30       	cpi	r18, 0x02	; 2
    242c:	31 05       	cpc	r19, r1
    242e:	81 f0       	breq	.+32     	; 0x2450 <GPIO_readPort+0x68>
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	9c 81       	ldd	r25, Y+4	; 0x04
    2434:	83 30       	cpi	r24, 0x03	; 3
    2436:	91 05       	cpc	r25, r1
    2438:	81 f0       	breq	.+32     	; 0x245a <GPIO_readPort+0x72>
    243a:	13 c0       	rjmp	.+38     	; 0x2462 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    243c:	e9 e3       	ldi	r30, 0x39	; 57
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	80 81       	ld	r24, Z
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	0e c0       	rjmp	.+28     	; 0x2462 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2446:	e6 e3       	ldi	r30, 0x36	; 54
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	89 83       	std	Y+1, r24	; 0x01
    244e:	09 c0       	rjmp	.+18     	; 0x2462 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2450:	e3 e3       	ldi	r30, 0x33	; 51
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	80 81       	ld	r24, Z
    2456:	89 83       	std	Y+1, r24	; 0x01
    2458:	04 c0       	rjmp	.+8      	; 0x2462 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    245a:	e0 e3       	ldi	r30, 0x30	; 48
    245c:	f0 e0       	ldi	r31, 0x00	; 0
    245e:	80 81       	ld	r24, Z
    2460:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	0f 90       	pop	r0
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	cd b7       	in	r28, 0x3d	; 61
    2478:	de b7       	in	r29, 0x3e	; 62
    247a:	60 97       	sbiw	r28, 0x10	; 16
    247c:	0f b6       	in	r0, 0x3f	; 63
    247e:	f8 94       	cli
    2480:	de bf       	out	0x3e, r29	; 62
    2482:	0f be       	out	0x3f, r0	; 63
    2484:	cd bf       	out	0x3d, r28	; 61
	uint8 col=0,row=0;
    2486:	18 8a       	std	Y+16, r1	; 0x10
    2488:	1f 86       	std	Y+15, r1	; 0x0f
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID,   PIN_INPUT);
    248a:	80 e0       	ldi	r24, 0x00	; 0
    248c:	60 e0       	ldi	r22, 0x00	; 0
    248e:	40 e0       	ldi	r20, 0x00	; 0
    2490:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2494:	80 e0       	ldi	r24, 0x00	; 0
    2496:	61 e0       	ldi	r22, 0x01	; 1
    2498:	40 e0       	ldi	r20, 0x00	; 0
    249a:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	62 e0       	ldi	r22, 0x02	; 2
    24a2:	40 e0       	ldi	r20, 0x00	; 0
    24a4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	63 e0       	ldi	r22, 0x03	; 3
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	64 e0       	ldi	r22, 0x04	; 4
    24b6:	40 e0       	ldi	r20, 0x00	; 0
    24b8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	65 e0       	ldi	r22, 0x05	; 5
    24c0:	40 e0       	ldi	r20, 0x00	; 0
    24c2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	66 e0       	ldi	r22, 0x06	; 6
    24ca:	40 e0       	ldi	r20, 0x00	; 0
    24cc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>

	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID,   PIN_OUTPUT);
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	64 e0       	ldi	r22, 0x04	; 4
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_OUTPUT);
    24da:	80 e0       	ldi	r24, 0x00	; 0
    24dc:	65 e0       	ldi	r22, 0x05	; 5
    24de:	41 e0       	ldi	r20, 0x01	; 1
    24e0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_OUTPUT);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	66 e0       	ldi	r22, 0x06	; 6
    24e8:	41 e0       	ldi	r20, 0x01	; 1
    24ea:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>


#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	67 e0       	ldi	r22, 0x07	; 7
    24f2:	40 e0       	ldi	r20, 0x00	; 0
    24f4:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	67 e0       	ldi	r22, 0x07	; 7
    24fc:	41 e0       	ldi	r20, 0x01	; 1
    24fe:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	a8 e4       	ldi	r26, 0x48	; 72
    2508:	b2 e4       	ldi	r27, 0x42	; 66
    250a:	8b 87       	std	Y+11, r24	; 0x0b
    250c:	9c 87       	std	Y+12, r25	; 0x0c
    250e:	ad 87       	std	Y+13, r26	; 0x0d
    2510:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2512:	6b 85       	ldd	r22, Y+11	; 0x0b
    2514:	7c 85       	ldd	r23, Y+12	; 0x0c
    2516:	8d 85       	ldd	r24, Y+13	; 0x0d
    2518:	9e 85       	ldd	r25, Y+14	; 0x0e
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	4a ef       	ldi	r20, 0xFA	; 250
    2520:	54 e4       	ldi	r21, 0x44	; 68
    2522:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	8f 83       	std	Y+7, r24	; 0x07
    252c:	98 87       	std	Y+8, r25	; 0x08
    252e:	a9 87       	std	Y+9, r26	; 0x09
    2530:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2532:	6f 81       	ldd	r22, Y+7	; 0x07
    2534:	78 85       	ldd	r23, Y+8	; 0x08
    2536:	89 85       	ldd	r24, Y+9	; 0x09
    2538:	9a 85       	ldd	r25, Y+10	; 0x0a
    253a:	20 e0       	ldi	r18, 0x00	; 0
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	40 e8       	ldi	r20, 0x80	; 128
    2540:	5f e3       	ldi	r21, 0x3F	; 63
    2542:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2546:	88 23       	and	r24, r24
    2548:	2c f4       	brge	.+10     	; 0x2554 <KEYPAD_getPressedKey+0xe2>
		__ticks = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	9e 83       	std	Y+6, r25	; 0x06
    2550:	8d 83       	std	Y+5, r24	; 0x05
    2552:	3f c0       	rjmp	.+126    	; 0x25d2 <KEYPAD_getPressedKey+0x160>
	else if (__tmp > 65535)
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	3f ef       	ldi	r19, 0xFF	; 255
    2560:	4f e7       	ldi	r20, 0x7F	; 127
    2562:	57 e4       	ldi	r21, 0x47	; 71
    2564:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2568:	18 16       	cp	r1, r24
    256a:	4c f5       	brge	.+82     	; 0x25be <KEYPAD_getPressedKey+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256c:	6b 85       	ldd	r22, Y+11	; 0x0b
    256e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2570:	8d 85       	ldd	r24, Y+13	; 0x0d
    2572:	9e 85       	ldd	r25, Y+14	; 0x0e
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	40 e2       	ldi	r20, 0x20	; 32
    257a:	51 e4       	ldi	r21, 0x41	; 65
    257c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	bc 01       	movw	r22, r24
    2586:	cd 01       	movw	r24, r26
    2588:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	9e 83       	std	Y+6, r25	; 0x06
    2592:	8d 83       	std	Y+5, r24	; 0x05
    2594:	0f c0       	rjmp	.+30     	; 0x25b4 <KEYPAD_getPressedKey+0x142>
    2596:	88 ec       	ldi	r24, 0xC8	; 200
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	9c 83       	std	Y+4, r25	; 0x04
    259c:	8b 83       	std	Y+3, r24	; 0x03
    259e:	8b 81       	ldd	r24, Y+3	; 0x03
    25a0:	9c 81       	ldd	r25, Y+4	; 0x04
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	f1 f7       	brne	.-4      	; 0x25a2 <KEYPAD_getPressedKey+0x130>
    25a6:	9c 83       	std	Y+4, r25	; 0x04
    25a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25aa:	8d 81       	ldd	r24, Y+5	; 0x05
    25ac:	9e 81       	ldd	r25, Y+6	; 0x06
    25ae:	01 97       	sbiw	r24, 0x01	; 1
    25b0:	9e 83       	std	Y+6, r25	; 0x06
    25b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b4:	8d 81       	ldd	r24, Y+5	; 0x05
    25b6:	9e 81       	ldd	r25, Y+6	; 0x06
    25b8:	00 97       	sbiw	r24, 0x00	; 0
    25ba:	69 f7       	brne	.-38     	; 0x2596 <KEYPAD_getPressedKey+0x124>
    25bc:	14 c0       	rjmp	.+40     	; 0x25e6 <KEYPAD_getPressedKey+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25ca:	dc 01       	movw	r26, r24
    25cc:	cb 01       	movw	r24, r22
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	9e 81       	ldd	r25, Y+6	; 0x06
    25d6:	9a 83       	std	Y+2, r25	; 0x02
    25d8:	89 83       	std	Y+1, r24	; 0x01
    25da:	89 81       	ldd	r24, Y+1	; 0x01
    25dc:	9a 81       	ldd	r25, Y+2	; 0x02
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <KEYPAD_getPressedKey+0x16c>
    25e2:	9a 83       	std	Y+2, r25	; 0x02
    25e4:	89 83       	std	Y+1, r24	; 0x01
#endif
	for(;;)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    25e6:	1f 86       	std	Y+15, r1	; 0x0f
    25e8:	39 c0       	rjmp	.+114    	; 0x265c <KEYPAD_getPressedKey+0x1ea>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	6f 85       	ldd	r22, Y+15	; 0x0f
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	6f 85       	ldd	r22, Y+15	; 0x0f
    25f8:	40 e0       	ldi	r20, 0x00	; 0
    25fa:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    25fe:	18 8a       	std	Y+16, r1	; 0x10
    2600:	22 c0       	rjmp	.+68     	; 0x2646 <KEYPAD_getPressedKey+0x1d4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2602:	88 89       	ldd	r24, Y+16	; 0x10
    2604:	98 2f       	mov	r25, r24
    2606:	9c 5f       	subi	r25, 0xFC	; 252
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	69 2f       	mov	r22, r25
    260c:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <GPIO_readPin>
    2610:	88 23       	and	r24, r24
    2612:	b1 f4       	brne	.+44     	; 0x2640 <KEYPAD_getPressedKey+0x1ce>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2614:	8f 85       	ldd	r24, Y+15	; 0x0f
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	98 2f       	mov	r25, r24
    2624:	88 89       	ldd	r24, Y+16	; 0x10
    2626:	89 0f       	add	r24, r25
    2628:	8f 5f       	subi	r24, 0xFF	; 255
    262a:	0e 94 32 13 	call	0x2664	; 0x2664 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    262e:	60 96       	adiw	r28, 0x10	; 16
    2630:	0f b6       	in	r0, 0x3f	; 63
    2632:	f8 94       	cli
    2634:	de bf       	out	0x3e, r29	; 62
    2636:	0f be       	out	0x3f, r0	; 63
    2638:	cd bf       	out	0x3d, r28	; 61
    263a:	cf 91       	pop	r28
    263c:	df 91       	pop	r29
    263e:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2640:	88 89       	ldd	r24, Y+16	; 0x10
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	88 8b       	std	Y+16, r24	; 0x10
    2646:	88 89       	ldd	r24, Y+16	; 0x10
    2648:	84 30       	cpi	r24, 0x04	; 4
    264a:	d8 f2       	brcs	.-74     	; 0x2602 <KEYPAD_getPressedKey+0x190>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_writePin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_OUTPUT);
#endif
	for(;;)
	{
		_delay_ms(50);
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2656:	8f 85       	ldd	r24, Y+15	; 0x0f
    2658:	8f 5f       	subi	r24, 0xFF	; 255
    265a:	8f 87       	std	Y+15, r24	; 0x0f
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	84 30       	cpi	r24, 0x04	; 4
    2660:	20 f2       	brcs	.-120    	; 0x25ea <KEYPAD_getPressedKey+0x178>
    2662:	4f cf       	rjmp	.-354    	; 0x2502 <KEYPAD_getPressedKey+0x90>

00002664 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	00 d0       	rcall	.+0      	; 0x266a <KEYPAD_4x4_adjustKeyNumber+0x6>
    266a:	00 d0       	rcall	.+0      	; 0x266c <KEYPAD_4x4_adjustKeyNumber+0x8>
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2672:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2674:	8a 81       	ldd	r24, Y+2	; 0x02
    2676:	28 2f       	mov	r18, r24
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	3c 83       	std	Y+4, r19	; 0x04
    267c:	2b 83       	std	Y+3, r18	; 0x03
    267e:	8b 81       	ldd	r24, Y+3	; 0x03
    2680:	9c 81       	ldd	r25, Y+4	; 0x04
    2682:	88 30       	cpi	r24, 0x08	; 8
    2684:	91 05       	cpc	r25, r1
    2686:	09 f4       	brne	.+2      	; 0x268a <KEYPAD_4x4_adjustKeyNumber+0x26>
    2688:	70 c0       	rjmp	.+224    	; 0x276a <KEYPAD_4x4_adjustKeyNumber+0x106>
    268a:	2b 81       	ldd	r18, Y+3	; 0x03
    268c:	3c 81       	ldd	r19, Y+4	; 0x04
    268e:	29 30       	cpi	r18, 0x09	; 9
    2690:	31 05       	cpc	r19, r1
    2692:	5c f5       	brge	.+86     	; 0x26ea <KEYPAD_4x4_adjustKeyNumber+0x86>
    2694:	8b 81       	ldd	r24, Y+3	; 0x03
    2696:	9c 81       	ldd	r25, Y+4	; 0x04
    2698:	84 30       	cpi	r24, 0x04	; 4
    269a:	91 05       	cpc	r25, r1
    269c:	09 f4       	brne	.+2      	; 0x26a0 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    269e:	59 c0       	rjmp	.+178    	; 0x2752 <KEYPAD_4x4_adjustKeyNumber+0xee>
    26a0:	2b 81       	ldd	r18, Y+3	; 0x03
    26a2:	3c 81       	ldd	r19, Y+4	; 0x04
    26a4:	25 30       	cpi	r18, 0x05	; 5
    26a6:	31 05       	cpc	r19, r1
    26a8:	9c f4       	brge	.+38     	; 0x26d0 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    26aa:	8b 81       	ldd	r24, Y+3	; 0x03
    26ac:	9c 81       	ldd	r25, Y+4	; 0x04
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	91 05       	cpc	r25, r1
    26b2:	09 f4       	brne	.+2      	; 0x26b6 <KEYPAD_4x4_adjustKeyNumber+0x52>
    26b4:	48 c0       	rjmp	.+144    	; 0x2746 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    26b6:	2b 81       	ldd	r18, Y+3	; 0x03
    26b8:	3c 81       	ldd	r19, Y+4	; 0x04
    26ba:	23 30       	cpi	r18, 0x03	; 3
    26bc:	31 05       	cpc	r19, r1
    26be:	0c f0       	brlt	.+2      	; 0x26c2 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    26c0:	45 c0       	rjmp	.+138    	; 0x274c <KEYPAD_4x4_adjustKeyNumber+0xe8>
    26c2:	8b 81       	ldd	r24, Y+3	; 0x03
    26c4:	9c 81       	ldd	r25, Y+4	; 0x04
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	91 05       	cpc	r25, r1
    26ca:	09 f4       	brne	.+2      	; 0x26ce <KEYPAD_4x4_adjustKeyNumber+0x6a>
    26cc:	39 c0       	rjmp	.+114    	; 0x2740 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    26ce:	67 c0       	rjmp	.+206    	; 0x279e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    26d0:	2b 81       	ldd	r18, Y+3	; 0x03
    26d2:	3c 81       	ldd	r19, Y+4	; 0x04
    26d4:	26 30       	cpi	r18, 0x06	; 6
    26d6:	31 05       	cpc	r19, r1
    26d8:	09 f4       	brne	.+2      	; 0x26dc <KEYPAD_4x4_adjustKeyNumber+0x78>
    26da:	41 c0       	rjmp	.+130    	; 0x275e <KEYPAD_4x4_adjustKeyNumber+0xfa>
    26dc:	8b 81       	ldd	r24, Y+3	; 0x03
    26de:	9c 81       	ldd	r25, Y+4	; 0x04
    26e0:	87 30       	cpi	r24, 0x07	; 7
    26e2:	91 05       	cpc	r25, r1
    26e4:	0c f0       	brlt	.+2      	; 0x26e8 <KEYPAD_4x4_adjustKeyNumber+0x84>
    26e6:	3e c0       	rjmp	.+124    	; 0x2764 <KEYPAD_4x4_adjustKeyNumber+0x100>
    26e8:	37 c0       	rjmp	.+110    	; 0x2758 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    26ea:	2b 81       	ldd	r18, Y+3	; 0x03
    26ec:	3c 81       	ldd	r19, Y+4	; 0x04
    26ee:	2c 30       	cpi	r18, 0x0C	; 12
    26f0:	31 05       	cpc	r19, r1
    26f2:	09 f4       	brne	.+2      	; 0x26f6 <KEYPAD_4x4_adjustKeyNumber+0x92>
    26f4:	46 c0       	rjmp	.+140    	; 0x2782 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	8d 30       	cpi	r24, 0x0D	; 13
    26fc:	91 05       	cpc	r25, r1
    26fe:	5c f4       	brge	.+22     	; 0x2716 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2700:	2b 81       	ldd	r18, Y+3	; 0x03
    2702:	3c 81       	ldd	r19, Y+4	; 0x04
    2704:	2a 30       	cpi	r18, 0x0A	; 10
    2706:	31 05       	cpc	r19, r1
    2708:	b1 f1       	breq	.+108    	; 0x2776 <KEYPAD_4x4_adjustKeyNumber+0x112>
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	9c 81       	ldd	r25, Y+4	; 0x04
    270e:	8b 30       	cpi	r24, 0x0B	; 11
    2710:	91 05       	cpc	r25, r1
    2712:	a4 f5       	brge	.+104    	; 0x277c <KEYPAD_4x4_adjustKeyNumber+0x118>
    2714:	2d c0       	rjmp	.+90     	; 0x2770 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2716:	2b 81       	ldd	r18, Y+3	; 0x03
    2718:	3c 81       	ldd	r19, Y+4	; 0x04
    271a:	2e 30       	cpi	r18, 0x0E	; 14
    271c:	31 05       	cpc	r19, r1
    271e:	b9 f1       	breq	.+110    	; 0x278e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    2720:	8b 81       	ldd	r24, Y+3	; 0x03
    2722:	9c 81       	ldd	r25, Y+4	; 0x04
    2724:	8e 30       	cpi	r24, 0x0E	; 14
    2726:	91 05       	cpc	r25, r1
    2728:	7c f1       	brlt	.+94     	; 0x2788 <KEYPAD_4x4_adjustKeyNumber+0x124>
    272a:	2b 81       	ldd	r18, Y+3	; 0x03
    272c:	3c 81       	ldd	r19, Y+4	; 0x04
    272e:	2f 30       	cpi	r18, 0x0F	; 15
    2730:	31 05       	cpc	r19, r1
    2732:	79 f1       	breq	.+94     	; 0x2792 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2734:	8b 81       	ldd	r24, Y+3	; 0x03
    2736:	9c 81       	ldd	r25, Y+4	; 0x04
    2738:	80 31       	cpi	r24, 0x10	; 16
    273a:	91 05       	cpc	r25, r1
    273c:	69 f1       	breq	.+90     	; 0x2798 <KEYPAD_4x4_adjustKeyNumber+0x134>
    273e:	2f c0       	rjmp	.+94     	; 0x279e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
	case 1: keypad_button = 7;
    2740:	87 e0       	ldi	r24, 0x07	; 7
    2742:	89 83       	std	Y+1, r24	; 0x01
    2744:	2e c0       	rjmp	.+92     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 2: keypad_button = 8;
    2746:	88 e0       	ldi	r24, 0x08	; 8
    2748:	89 83       	std	Y+1, r24	; 0x01
    274a:	2b c0       	rjmp	.+86     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 3: keypad_button = 9;
    274c:	89 e0       	ldi	r24, 0x09	; 9
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	28 c0       	rjmp	.+80     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 4: keypad_button = '%'; // ASCII Code of %
    2752:	85 e2       	ldi	r24, 0x25	; 37
    2754:	89 83       	std	Y+1, r24	; 0x01
    2756:	25 c0       	rjmp	.+74     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 5: keypad_button = 4;
    2758:	84 e0       	ldi	r24, 0x04	; 4
    275a:	89 83       	std	Y+1, r24	; 0x01
    275c:	22 c0       	rjmp	.+68     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 6: keypad_button = 5;
    275e:	85 e0       	ldi	r24, 0x05	; 5
    2760:	89 83       	std	Y+1, r24	; 0x01
    2762:	1f c0       	rjmp	.+62     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 7: keypad_button = 6;
    2764:	86 e0       	ldi	r24, 0x06	; 6
    2766:	89 83       	std	Y+1, r24	; 0x01
    2768:	1c c0       	rjmp	.+56     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 8: keypad_button = '*'; /* ASCII Code of '*' */
    276a:	8a e2       	ldi	r24, 0x2A	; 42
    276c:	89 83       	std	Y+1, r24	; 0x01
    276e:	19 c0       	rjmp	.+50     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 9: keypad_button = 1;
    2770:	81 e0       	ldi	r24, 0x01	; 1
    2772:	89 83       	std	Y+1, r24	; 0x01
    2774:	16 c0       	rjmp	.+44     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 10: keypad_button = 2;
    2776:	82 e0       	ldi	r24, 0x02	; 2
    2778:	89 83       	std	Y+1, r24	; 0x01
    277a:	13 c0       	rjmp	.+38     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 11: keypad_button = 3;
    277c:	83 e0       	ldi	r24, 0x03	; 3
    277e:	89 83       	std	Y+1, r24	; 0x01
    2780:	10 c0       	rjmp	.+32     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2782:	8d e2       	ldi	r24, 0x2D	; 45
    2784:	89 83       	std	Y+1, r24	; 0x01
    2786:	0d c0       	rjmp	.+26     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 13: keypad_button = 'c';  /* ASCII Code of 'c */
    2788:	83 e6       	ldi	r24, 0x63	; 99
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	0a c0       	rjmp	.+20     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 14: keypad_button = 0;
    278e:	19 82       	std	Y+1, r1	; 0x01
    2790:	08 c0       	rjmp	.+16     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 15: keypad_button = '='; /* ASCII Code of '=' */
    2792:	8d e3       	ldi	r24, 0x3D	; 61
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	05 c0       	rjmp	.+10     	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	case 16: keypad_button = '+'; /* ASCII Code of '+' */
    2798:	8b e2       	ldi	r24, 0x2B	; 43
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	02 c0       	rjmp	.+4      	; 0x27a2 <KEYPAD_4x4_adjustKeyNumber+0x13e>
	break;
	default: keypad_button = button_number;
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	89 83       	std	Y+1, r24	; 0x01
	break;
	}
	return keypad_button;
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
} 
    27a4:	0f 90       	pop	r0
    27a6:	0f 90       	pop	r0
    27a8:	0f 90       	pop	r0
    27aa:	0f 90       	pop	r0
    27ac:	cf 91       	pop	r28
    27ae:	df 91       	pop	r29
    27b0:	08 95       	ret

000027b2 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    27b2:	df 93       	push	r29
    27b4:	cf 93       	push	r28
    27b6:	cd b7       	in	r28, 0x3d	; 61
    27b8:	de b7       	in	r29, 0x3e	; 62
    27ba:	2e 97       	sbiw	r28, 0x0e	; 14
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    27c6:	82 e0       	ldi	r24, 0x02	; 2
    27c8:	60 e0       	ldi	r22, 0x00	; 0
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	62 e0       	ldi	r22, 0x02	; 2
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    27da:	82 e0       	ldi	r24, 0x02	; 2
    27dc:	61 e0       	ldi	r22, 0x01	; 1
    27de:	41 e0       	ldi	r20, 0x01	; 1
    27e0:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>

	GPIO_writePin(LCD_RW_PORT_ID, LCD_RW_PIN_ID,LOGIC_LOW);/* Disable LCD RW=0 */
    27e4:	82 e0       	ldi	r24, 0x02	; 2
    27e6:	61 e0       	ldi	r22, 0x01	; 1
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 ea       	ldi	r26, 0xA0	; 160
    27f4:	b1 e4       	ldi	r27, 0x41	; 65
    27f6:	8b 87       	std	Y+11, r24	; 0x0b
    27f8:	9c 87       	std	Y+12, r25	; 0x0c
    27fa:	ad 87       	std	Y+13, r26	; 0x0d
    27fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2800:	7c 85       	ldd	r23, Y+12	; 0x0c
    2802:	8d 85       	ldd	r24, Y+13	; 0x0d
    2804:	9e 85       	ldd	r25, Y+14	; 0x0e
    2806:	20 e0       	ldi	r18, 0x00	; 0
    2808:	30 e0       	ldi	r19, 0x00	; 0
    280a:	4a ef       	ldi	r20, 0xFA	; 250
    280c:	54 e4       	ldi	r21, 0x44	; 68
    280e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	8f 83       	std	Y+7, r24	; 0x07
    2818:	98 87       	std	Y+8, r25	; 0x08
    281a:	a9 87       	std	Y+9, r26	; 0x09
    281c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	20 e0       	ldi	r18, 0x00	; 0
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	40 e8       	ldi	r20, 0x80	; 128
    282c:	5f e3       	ldi	r21, 0x3F	; 63
    282e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2832:	88 23       	and	r24, r24
    2834:	2c f4       	brge	.+10     	; 0x2840 <LCD_init+0x8e>
		__ticks = 1;
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	90 e0       	ldi	r25, 0x00	; 0
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	3f c0       	rjmp	.+126    	; 0x28be <LCD_init+0x10c>
	else if (__tmp > 65535)
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	3f ef       	ldi	r19, 0xFF	; 255
    284c:	4f e7       	ldi	r20, 0x7F	; 127
    284e:	57 e4       	ldi	r21, 0x47	; 71
    2850:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2854:	18 16       	cp	r1, r24
    2856:	4c f5       	brge	.+82     	; 0x28aa <LCD_init+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2858:	6b 85       	ldd	r22, Y+11	; 0x0b
    285a:	7c 85       	ldd	r23, Y+12	; 0x0c
    285c:	8d 85       	ldd	r24, Y+13	; 0x0d
    285e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2860:	20 e0       	ldi	r18, 0x00	; 0
    2862:	30 e0       	ldi	r19, 0x00	; 0
    2864:	40 e2       	ldi	r20, 0x20	; 32
    2866:	51 e4       	ldi	r21, 0x41	; 65
    2868:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	bc 01       	movw	r22, r24
    2872:	cd 01       	movw	r24, r26
    2874:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2878:	dc 01       	movw	r26, r24
    287a:	cb 01       	movw	r24, r22
    287c:	9e 83       	std	Y+6, r25	; 0x06
    287e:	8d 83       	std	Y+5, r24	; 0x05
    2880:	0f c0       	rjmp	.+30     	; 0x28a0 <LCD_init+0xee>
    2882:	88 ec       	ldi	r24, 0xC8	; 200
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	9c 83       	std	Y+4, r25	; 0x04
    2888:	8b 83       	std	Y+3, r24	; 0x03
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	f1 f7       	brne	.-4      	; 0x288e <LCD_init+0xdc>
    2892:	9c 83       	std	Y+4, r25	; 0x04
    2894:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2896:	8d 81       	ldd	r24, Y+5	; 0x05
    2898:	9e 81       	ldd	r25, Y+6	; 0x06
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	9e 83       	std	Y+6, r25	; 0x06
    289e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28a0:	8d 81       	ldd	r24, Y+5	; 0x05
    28a2:	9e 81       	ldd	r25, Y+6	; 0x06
    28a4:	00 97       	sbiw	r24, 0x00	; 0
    28a6:	69 f7       	brne	.-38     	; 0x2882 <LCD_init+0xd0>
    28a8:	14 c0       	rjmp	.+40     	; 0x28d2 <LCD_init+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28aa:	6f 81       	ldd	r22, Y+7	; 0x07
    28ac:	78 85       	ldd	r23, Y+8	; 0x08
    28ae:	89 85       	ldd	r24, Y+9	; 0x09
    28b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28b6:	dc 01       	movw	r26, r24
    28b8:	cb 01       	movw	r24, r22
    28ba:	9e 83       	std	Y+6, r25	; 0x06
    28bc:	8d 83       	std	Y+5, r24	; 0x05
    28be:	8d 81       	ldd	r24, Y+5	; 0x05
    28c0:	9e 81       	ldd	r25, Y+6	; 0x06
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	01 97       	sbiw	r24, 0x01	; 1
    28cc:	f1 f7       	brne	.-4      	; 0x28ca <LCD_init+0x118>
    28ce:	9a 83       	std	Y+2, r25	; 0x02
    28d0:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    28d2:	82 e0       	ldi	r24, 0x02	; 2
    28d4:	63 e0       	ldi	r22, 0x03	; 3
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    28dc:	82 e0       	ldi	r24, 0x02	; 2
    28de:	64 e0       	ldi	r22, 0x04	; 4
    28e0:	41 e0       	ldi	r20, 0x01	; 1
    28e2:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    28e6:	82 e0       	ldi	r24, 0x02	; 2
    28e8:	65 e0       	ldi	r22, 0x05	; 5
    28ea:	41 e0       	ldi	r20, 0x01	; 1
    28ec:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    28f0:	82 e0       	ldi	r24, 0x02	; 2
    28f2:	66 e0       	ldi	r22, 0x06	; 6
    28f4:	41 e0       	ldi	r20, 0x01	; 1
    28f6:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    28fa:	83 e3       	ldi	r24, 0x33	; 51
    28fc:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2900:	82 e3       	ldi	r24, 0x32	; 50
    2902:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    2906:	88 e2       	ldi	r24, 0x28	; 40
    2908:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    290c:	8c e0       	ldi	r24, 0x0C	; 12
    290e:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2912:	81 e0       	ldi	r24, 0x01	; 1
    2914:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
}
    2918:	2e 96       	adiw	r28, 0x0e	; 14
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	df 93       	push	r29
    2930:	cf 93       	push	r28
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	c3 56       	subi	r28, 0x63	; 99
    2938:	d0 40       	sbci	r29, 0x00	; 0
    293a:	0f b6       	in	r0, 0x3f	; 63
    293c:	f8 94       	cli
    293e:	de bf       	out	0x3e, r29	; 62
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	cd bf       	out	0x3d, r28	; 61
    2944:	fe 01       	movw	r30, r28
    2946:	ed 59       	subi	r30, 0x9D	; 157
    2948:	ff 4f       	sbci	r31, 0xFF	; 255
    294a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    294c:	82 e0       	ldi	r24, 0x02	; 2
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	40 e0       	ldi	r20, 0x00	; 0
    2952:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2956:	fe 01       	movw	r30, r28
    2958:	e1 5a       	subi	r30, 0xA1	; 161
    295a:	ff 4f       	sbci	r31, 0xFF	; 255
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	a0 e8       	ldi	r26, 0x80	; 128
    2962:	bf e3       	ldi	r27, 0x3F	; 63
    2964:	80 83       	st	Z, r24
    2966:	91 83       	std	Z+1, r25	; 0x01
    2968:	a2 83       	std	Z+2, r26	; 0x02
    296a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    296c:	8e 01       	movw	r16, r28
    296e:	05 5a       	subi	r16, 0xA5	; 165
    2970:	1f 4f       	sbci	r17, 0xFF	; 255
    2972:	fe 01       	movw	r30, r28
    2974:	e1 5a       	subi	r30, 0xA1	; 161
    2976:	ff 4f       	sbci	r31, 0xFF	; 255
    2978:	60 81       	ld	r22, Z
    297a:	71 81       	ldd	r23, Z+1	; 0x01
    297c:	82 81       	ldd	r24, Z+2	; 0x02
    297e:	93 81       	ldd	r25, Z+3	; 0x03
    2980:	20 e0       	ldi	r18, 0x00	; 0
    2982:	30 e0       	ldi	r19, 0x00	; 0
    2984:	4a ef       	ldi	r20, 0xFA	; 250
    2986:	54 e4       	ldi	r21, 0x44	; 68
    2988:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    298c:	dc 01       	movw	r26, r24
    298e:	cb 01       	movw	r24, r22
    2990:	f8 01       	movw	r30, r16
    2992:	80 83       	st	Z, r24
    2994:	91 83       	std	Z+1, r25	; 0x01
    2996:	a2 83       	std	Z+2, r26	; 0x02
    2998:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    299a:	fe 01       	movw	r30, r28
    299c:	e5 5a       	subi	r30, 0xA5	; 165
    299e:	ff 4f       	sbci	r31, 0xFF	; 255
    29a0:	60 81       	ld	r22, Z
    29a2:	71 81       	ldd	r23, Z+1	; 0x01
    29a4:	82 81       	ldd	r24, Z+2	; 0x02
    29a6:	93 81       	ldd	r25, Z+3	; 0x03
    29a8:	20 e0       	ldi	r18, 0x00	; 0
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	40 e8       	ldi	r20, 0x80	; 128
    29ae:	5f e3       	ldi	r21, 0x3F	; 63
    29b0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    29b4:	88 23       	and	r24, r24
    29b6:	44 f4       	brge	.+16     	; 0x29c8 <LCD_sendCommand+0x9e>
		__ticks = 1;
    29b8:	fe 01       	movw	r30, r28
    29ba:	e7 5a       	subi	r30, 0xA7	; 167
    29bc:	ff 4f       	sbci	r31, 0xFF	; 255
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	91 83       	std	Z+1, r25	; 0x01
    29c4:	80 83       	st	Z, r24
    29c6:	64 c0       	rjmp	.+200    	; 0x2a90 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    29c8:	fe 01       	movw	r30, r28
    29ca:	e5 5a       	subi	r30, 0xA5	; 165
    29cc:	ff 4f       	sbci	r31, 0xFF	; 255
    29ce:	60 81       	ld	r22, Z
    29d0:	71 81       	ldd	r23, Z+1	; 0x01
    29d2:	82 81       	ldd	r24, Z+2	; 0x02
    29d4:	93 81       	ldd	r25, Z+3	; 0x03
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	3f ef       	ldi	r19, 0xFF	; 255
    29da:	4f e7       	ldi	r20, 0x7F	; 127
    29dc:	57 e4       	ldi	r21, 0x47	; 71
    29de:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    29e2:	18 16       	cp	r1, r24
    29e4:	0c f0       	brlt	.+2      	; 0x29e8 <LCD_sendCommand+0xbe>
    29e6:	43 c0       	rjmp	.+134    	; 0x2a6e <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29e8:	fe 01       	movw	r30, r28
    29ea:	e1 5a       	subi	r30, 0xA1	; 161
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	60 81       	ld	r22, Z
    29f0:	71 81       	ldd	r23, Z+1	; 0x01
    29f2:	82 81       	ldd	r24, Z+2	; 0x02
    29f4:	93 81       	ldd	r25, Z+3	; 0x03
    29f6:	20 e0       	ldi	r18, 0x00	; 0
    29f8:	30 e0       	ldi	r19, 0x00	; 0
    29fa:	40 e2       	ldi	r20, 0x20	; 32
    29fc:	51 e4       	ldi	r21, 0x41	; 65
    29fe:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a02:	dc 01       	movw	r26, r24
    2a04:	cb 01       	movw	r24, r22
    2a06:	8e 01       	movw	r16, r28
    2a08:	07 5a       	subi	r16, 0xA7	; 167
    2a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0c:	bc 01       	movw	r22, r24
    2a0e:	cd 01       	movw	r24, r26
    2a10:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a14:	dc 01       	movw	r26, r24
    2a16:	cb 01       	movw	r24, r22
    2a18:	f8 01       	movw	r30, r16
    2a1a:	91 83       	std	Z+1, r25	; 0x01
    2a1c:	80 83       	st	Z, r24
    2a1e:	1f c0       	rjmp	.+62     	; 0x2a5e <LCD_sendCommand+0x134>
    2a20:	fe 01       	movw	r30, r28
    2a22:	e9 5a       	subi	r30, 0xA9	; 169
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	88 ec       	ldi	r24, 0xC8	; 200
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	91 83       	std	Z+1, r25	; 0x01
    2a2c:	80 83       	st	Z, r24
    2a2e:	fe 01       	movw	r30, r28
    2a30:	e9 5a       	subi	r30, 0xA9	; 169
    2a32:	ff 4f       	sbci	r31, 0xFF	; 255
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	f1 f7       	brne	.-4      	; 0x2a38 <LCD_sendCommand+0x10e>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	e9 5a       	subi	r30, 0xA9	; 169
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	91 83       	std	Z+1, r25	; 0x01
    2a44:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a46:	de 01       	movw	r26, r28
    2a48:	a7 5a       	subi	r26, 0xA7	; 167
    2a4a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a4c:	fe 01       	movw	r30, r28
    2a4e:	e7 5a       	subi	r30, 0xA7	; 167
    2a50:	ff 4f       	sbci	r31, 0xFF	; 255
    2a52:	80 81       	ld	r24, Z
    2a54:	91 81       	ldd	r25, Z+1	; 0x01
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	11 96       	adiw	r26, 0x01	; 1
    2a5a:	9c 93       	st	X, r25
    2a5c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a5e:	fe 01       	movw	r30, r28
    2a60:	e7 5a       	subi	r30, 0xA7	; 167
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	80 81       	ld	r24, Z
    2a66:	91 81       	ldd	r25, Z+1	; 0x01
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	d1 f6       	brne	.-76     	; 0x2a20 <LCD_sendCommand+0xf6>
    2a6c:	27 c0       	rjmp	.+78     	; 0x2abc <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6e:	8e 01       	movw	r16, r28
    2a70:	07 5a       	subi	r16, 0xA7	; 167
    2a72:	1f 4f       	sbci	r17, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e5 5a       	subi	r30, 0xA5	; 165
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	60 81       	ld	r22, Z
    2a7c:	71 81       	ldd	r23, Z+1	; 0x01
    2a7e:	82 81       	ldd	r24, Z+2	; 0x02
    2a80:	93 81       	ldd	r25, Z+3	; 0x03
    2a82:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a86:	dc 01       	movw	r26, r24
    2a88:	cb 01       	movw	r24, r22
    2a8a:	f8 01       	movw	r30, r16
    2a8c:	91 83       	std	Z+1, r25	; 0x01
    2a8e:	80 83       	st	Z, r24
    2a90:	de 01       	movw	r26, r28
    2a92:	ab 5a       	subi	r26, 0xAB	; 171
    2a94:	bf 4f       	sbci	r27, 0xFF	; 255
    2a96:	fe 01       	movw	r30, r28
    2a98:	e7 5a       	subi	r30, 0xA7	; 167
    2a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a9c:	80 81       	ld	r24, Z
    2a9e:	91 81       	ldd	r25, Z+1	; 0x01
    2aa0:	8d 93       	st	X+, r24
    2aa2:	9c 93       	st	X, r25
    2aa4:	fe 01       	movw	r30, r28
    2aa6:	eb 5a       	subi	r30, 0xAB	; 171
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	80 81       	ld	r24, Z
    2aac:	91 81       	ldd	r25, Z+1	; 0x01
    2aae:	01 97       	sbiw	r24, 0x01	; 1
    2ab0:	f1 f7       	brne	.-4      	; 0x2aae <LCD_sendCommand+0x184>
    2ab2:	fe 01       	movw	r30, r28
    2ab4:	eb 5a       	subi	r30, 0xAB	; 171
    2ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab8:	91 83       	std	Z+1, r25	; 0x01
    2aba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2abc:	82 e0       	ldi	r24, 0x02	; 2
    2abe:	62 e0       	ldi	r22, 0x02	; 2
    2ac0:	41 e0       	ldi	r20, 0x01	; 1
    2ac2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2ac6:	fe 01       	movw	r30, r28
    2ac8:	ef 5a       	subi	r30, 0xAF	; 175
    2aca:	ff 4f       	sbci	r31, 0xFF	; 255
    2acc:	80 e0       	ldi	r24, 0x00	; 0
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	a0 e8       	ldi	r26, 0x80	; 128
    2ad2:	bf e3       	ldi	r27, 0x3F	; 63
    2ad4:	80 83       	st	Z, r24
    2ad6:	91 83       	std	Z+1, r25	; 0x01
    2ad8:	a2 83       	std	Z+2, r26	; 0x02
    2ada:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2adc:	8e 01       	movw	r16, r28
    2ade:	03 5b       	subi	r16, 0xB3	; 179
    2ae0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ae2:	fe 01       	movw	r30, r28
    2ae4:	ef 5a       	subi	r30, 0xAF	; 175
    2ae6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae8:	60 81       	ld	r22, Z
    2aea:	71 81       	ldd	r23, Z+1	; 0x01
    2aec:	82 81       	ldd	r24, Z+2	; 0x02
    2aee:	93 81       	ldd	r25, Z+3	; 0x03
    2af0:	20 e0       	ldi	r18, 0x00	; 0
    2af2:	30 e0       	ldi	r19, 0x00	; 0
    2af4:	4a ef       	ldi	r20, 0xFA	; 250
    2af6:	54 e4       	ldi	r21, 0x44	; 68
    2af8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2afc:	dc 01       	movw	r26, r24
    2afe:	cb 01       	movw	r24, r22
    2b00:	f8 01       	movw	r30, r16
    2b02:	80 83       	st	Z, r24
    2b04:	91 83       	std	Z+1, r25	; 0x01
    2b06:	a2 83       	std	Z+2, r26	; 0x02
    2b08:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b0a:	fe 01       	movw	r30, r28
    2b0c:	e3 5b       	subi	r30, 0xB3	; 179
    2b0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b10:	60 81       	ld	r22, Z
    2b12:	71 81       	ldd	r23, Z+1	; 0x01
    2b14:	82 81       	ldd	r24, Z+2	; 0x02
    2b16:	93 81       	ldd	r25, Z+3	; 0x03
    2b18:	20 e0       	ldi	r18, 0x00	; 0
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	40 e8       	ldi	r20, 0x80	; 128
    2b1e:	5f e3       	ldi	r21, 0x3F	; 63
    2b20:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2b24:	88 23       	and	r24, r24
    2b26:	44 f4       	brge	.+16     	; 0x2b38 <LCD_sendCommand+0x20e>
		__ticks = 1;
    2b28:	fe 01       	movw	r30, r28
    2b2a:	e5 5b       	subi	r30, 0xB5	; 181
    2b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	91 83       	std	Z+1, r25	; 0x01
    2b34:	80 83       	st	Z, r24
    2b36:	64 c0       	rjmp	.+200    	; 0x2c00 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    2b38:	fe 01       	movw	r30, r28
    2b3a:	e3 5b       	subi	r30, 0xB3	; 179
    2b3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b3e:	60 81       	ld	r22, Z
    2b40:	71 81       	ldd	r23, Z+1	; 0x01
    2b42:	82 81       	ldd	r24, Z+2	; 0x02
    2b44:	93 81       	ldd	r25, Z+3	; 0x03
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	0c f0       	brlt	.+2      	; 0x2b58 <LCD_sendCommand+0x22e>
    2b56:	43 c0       	rjmp	.+134    	; 0x2bde <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b58:	fe 01       	movw	r30, r28
    2b5a:	ef 5a       	subi	r30, 0xAF	; 175
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	60 81       	ld	r22, Z
    2b60:	71 81       	ldd	r23, Z+1	; 0x01
    2b62:	82 81       	ldd	r24, Z+2	; 0x02
    2b64:	93 81       	ldd	r25, Z+3	; 0x03
    2b66:	20 e0       	ldi	r18, 0x00	; 0
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	40 e2       	ldi	r20, 0x20	; 32
    2b6c:	51 e4       	ldi	r21, 0x41	; 65
    2b6e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b72:	dc 01       	movw	r26, r24
    2b74:	cb 01       	movw	r24, r22
    2b76:	8e 01       	movw	r16, r28
    2b78:	05 5b       	subi	r16, 0xB5	; 181
    2b7a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b7c:	bc 01       	movw	r22, r24
    2b7e:	cd 01       	movw	r24, r26
    2b80:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	f8 01       	movw	r30, r16
    2b8a:	91 83       	std	Z+1, r25	; 0x01
    2b8c:	80 83       	st	Z, r24
    2b8e:	1f c0       	rjmp	.+62     	; 0x2bce <LCD_sendCommand+0x2a4>
    2b90:	fe 01       	movw	r30, r28
    2b92:	e7 5b       	subi	r30, 0xB7	; 183
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	88 ec       	ldi	r24, 0xC8	; 200
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	91 83       	std	Z+1, r25	; 0x01
    2b9c:	80 83       	st	Z, r24
    2b9e:	fe 01       	movw	r30, r28
    2ba0:	e7 5b       	subi	r30, 0xB7	; 183
    2ba2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba4:	80 81       	ld	r24, Z
    2ba6:	91 81       	ldd	r25, Z+1	; 0x01
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_sendCommand+0x27e>
    2bac:	fe 01       	movw	r30, r28
    2bae:	e7 5b       	subi	r30, 0xB7	; 183
    2bb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb2:	91 83       	std	Z+1, r25	; 0x01
    2bb4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb6:	de 01       	movw	r26, r28
    2bb8:	a5 5b       	subi	r26, 0xB5	; 181
    2bba:	bf 4f       	sbci	r27, 0xFF	; 255
    2bbc:	fe 01       	movw	r30, r28
    2bbe:	e5 5b       	subi	r30, 0xB5	; 181
    2bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc2:	80 81       	ld	r24, Z
    2bc4:	91 81       	ldd	r25, Z+1	; 0x01
    2bc6:	01 97       	sbiw	r24, 0x01	; 1
    2bc8:	11 96       	adiw	r26, 0x01	; 1
    2bca:	9c 93       	st	X, r25
    2bcc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e5 5b       	subi	r30, 0xB5	; 181
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	91 81       	ldd	r25, Z+1	; 0x01
    2bd8:	00 97       	sbiw	r24, 0x00	; 0
    2bda:	d1 f6       	brne	.-76     	; 0x2b90 <LCD_sendCommand+0x266>
    2bdc:	27 c0       	rjmp	.+78     	; 0x2c2c <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bde:	8e 01       	movw	r16, r28
    2be0:	05 5b       	subi	r16, 0xB5	; 181
    2be2:	1f 4f       	sbci	r17, 0xFF	; 255
    2be4:	fe 01       	movw	r30, r28
    2be6:	e3 5b       	subi	r30, 0xB3	; 179
    2be8:	ff 4f       	sbci	r31, 0xFF	; 255
    2bea:	60 81       	ld	r22, Z
    2bec:	71 81       	ldd	r23, Z+1	; 0x01
    2bee:	82 81       	ldd	r24, Z+2	; 0x02
    2bf0:	93 81       	ldd	r25, Z+3	; 0x03
    2bf2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bf6:	dc 01       	movw	r26, r24
    2bf8:	cb 01       	movw	r24, r22
    2bfa:	f8 01       	movw	r30, r16
    2bfc:	91 83       	std	Z+1, r25	; 0x01
    2bfe:	80 83       	st	Z, r24
    2c00:	de 01       	movw	r26, r28
    2c02:	a9 5b       	subi	r26, 0xB9	; 185
    2c04:	bf 4f       	sbci	r27, 0xFF	; 255
    2c06:	fe 01       	movw	r30, r28
    2c08:	e5 5b       	subi	r30, 0xB5	; 181
    2c0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0c:	80 81       	ld	r24, Z
    2c0e:	91 81       	ldd	r25, Z+1	; 0x01
    2c10:	8d 93       	st	X+, r24
    2c12:	9c 93       	st	X, r25
    2c14:	fe 01       	movw	r30, r28
    2c16:	e9 5b       	subi	r30, 0xB9	; 185
    2c18:	ff 4f       	sbci	r31, 0xFF	; 255
    2c1a:	80 81       	ld	r24, Z
    2c1c:	91 81       	ldd	r25, Z+1	; 0x01
    2c1e:	01 97       	sbiw	r24, 0x01	; 1
    2c20:	f1 f7       	brne	.-4      	; 0x2c1e <LCD_sendCommand+0x2f4>
    2c22:	fe 01       	movw	r30, r28
    2c24:	e9 5b       	subi	r30, 0xB9	; 185
    2c26:	ff 4f       	sbci	r31, 0xFF	; 255
    2c28:	91 83       	std	Z+1, r25	; 0x01
    2c2a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	ed 59       	subi	r30, 0x9D	; 157
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 81       	ld	r24, Z
    2c34:	88 2f       	mov	r24, r24
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	80 71       	andi	r24, 0x10	; 16
    2c3a:	90 70       	andi	r25, 0x00	; 0
    2c3c:	95 95       	asr	r25
    2c3e:	87 95       	ror	r24
    2c40:	95 95       	asr	r25
    2c42:	87 95       	ror	r24
    2c44:	95 95       	asr	r25
    2c46:	87 95       	ror	r24
    2c48:	95 95       	asr	r25
    2c4a:	87 95       	ror	r24
    2c4c:	98 2f       	mov	r25, r24
    2c4e:	82 e0       	ldi	r24, 0x02	; 2
    2c50:	63 e0       	ldi	r22, 0x03	; 3
    2c52:	49 2f       	mov	r20, r25
    2c54:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2c58:	fe 01       	movw	r30, r28
    2c5a:	ed 59       	subi	r30, 0x9D	; 157
    2c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c5e:	80 81       	ld	r24, Z
    2c60:	88 2f       	mov	r24, r24
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	80 72       	andi	r24, 0x20	; 32
    2c66:	90 70       	andi	r25, 0x00	; 0
    2c68:	95 95       	asr	r25
    2c6a:	87 95       	ror	r24
    2c6c:	95 95       	asr	r25
    2c6e:	87 95       	ror	r24
    2c70:	95 95       	asr	r25
    2c72:	87 95       	ror	r24
    2c74:	95 95       	asr	r25
    2c76:	87 95       	ror	r24
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	98 2f       	mov	r25, r24
    2c7e:	82 e0       	ldi	r24, 0x02	; 2
    2c80:	64 e0       	ldi	r22, 0x04	; 4
    2c82:	49 2f       	mov	r20, r25
    2c84:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ed 59       	subi	r30, 0x9D	; 157
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	80 74       	andi	r24, 0x40	; 64
    2c96:	90 70       	andi	r25, 0x00	; 0
    2c98:	08 2e       	mov	r0, r24
    2c9a:	89 2f       	mov	r24, r25
    2c9c:	00 0c       	add	r0, r0
    2c9e:	88 1f       	adc	r24, r24
    2ca0:	99 0b       	sbc	r25, r25
    2ca2:	00 0c       	add	r0, r0
    2ca4:	88 1f       	adc	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	98 2f       	mov	r25, r24
    2caa:	82 e0       	ldi	r24, 0x02	; 2
    2cac:	65 e0       	ldi	r22, 0x05	; 5
    2cae:	49 2f       	mov	r20, r25
    2cb0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2cb4:	fe 01       	movw	r30, r28
    2cb6:	ed 59       	subi	r30, 0x9D	; 157
    2cb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2cba:	80 81       	ld	r24, Z
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	99 1f       	adc	r25, r25
    2cc0:	99 27       	eor	r25, r25
    2cc2:	99 1f       	adc	r25, r25
    2cc4:	82 e0       	ldi	r24, 0x02	; 2
    2cc6:	66 e0       	ldi	r22, 0x06	; 6
    2cc8:	49 2f       	mov	r20, r25
    2cca:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2cce:	fe 01       	movw	r30, r28
    2cd0:	ed 5b       	subi	r30, 0xBD	; 189
    2cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	a0 e8       	ldi	r26, 0x80	; 128
    2cda:	bf e3       	ldi	r27, 0x3F	; 63
    2cdc:	80 83       	st	Z, r24
    2cde:	91 83       	std	Z+1, r25	; 0x01
    2ce0:	a2 83       	std	Z+2, r26	; 0x02
    2ce2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	01 5c       	subi	r16, 0xC1	; 193
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	fe 01       	movw	r30, r28
    2cec:	ed 5b       	subi	r30, 0xBD	; 189
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	60 81       	ld	r22, Z
    2cf2:	71 81       	ldd	r23, Z+1	; 0x01
    2cf4:	82 81       	ldd	r24, Z+2	; 0x02
    2cf6:	93 81       	ldd	r25, Z+3	; 0x03
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	4a ef       	ldi	r20, 0xFA	; 250
    2cfe:	54 e4       	ldi	r21, 0x44	; 68
    2d00:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	f8 01       	movw	r30, r16
    2d0a:	80 83       	st	Z, r24
    2d0c:	91 83       	std	Z+1, r25	; 0x01
    2d0e:	a2 83       	std	Z+2, r26	; 0x02
    2d10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d12:	fe 01       	movw	r30, r28
    2d14:	ff 96       	adiw	r30, 0x3f	; 63
    2d16:	60 81       	ld	r22, Z
    2d18:	71 81       	ldd	r23, Z+1	; 0x01
    2d1a:	82 81       	ldd	r24, Z+2	; 0x02
    2d1c:	93 81       	ldd	r25, Z+3	; 0x03
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	40 e8       	ldi	r20, 0x80	; 128
    2d24:	5f e3       	ldi	r21, 0x3F	; 63
    2d26:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2d2a:	88 23       	and	r24, r24
    2d2c:	2c f4       	brge	.+10     	; 0x2d38 <LCD_sendCommand+0x40e>
		__ticks = 1;
    2d2e:	81 e0       	ldi	r24, 0x01	; 1
    2d30:	90 e0       	ldi	r25, 0x00	; 0
    2d32:	9e af       	std	Y+62, r25	; 0x3e
    2d34:	8d af       	std	Y+61, r24	; 0x3d
    2d36:	46 c0       	rjmp	.+140    	; 0x2dc4 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ff 96       	adiw	r30, 0x3f	; 63
    2d3c:	60 81       	ld	r22, Z
    2d3e:	71 81       	ldd	r23, Z+1	; 0x01
    2d40:	82 81       	ldd	r24, Z+2	; 0x02
    2d42:	93 81       	ldd	r25, Z+3	; 0x03
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	57 e4       	ldi	r21, 0x47	; 71
    2d4c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2d50:	18 16       	cp	r1, r24
    2d52:	64 f5       	brge	.+88     	; 0x2dac <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d54:	fe 01       	movw	r30, r28
    2d56:	ed 5b       	subi	r30, 0xBD	; 189
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e2       	ldi	r20, 0x20	; 32
    2d68:	51 e4       	ldi	r21, 0x41	; 65
    2d6a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	bc 01       	movw	r22, r24
    2d74:	cd 01       	movw	r24, r26
    2d76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d7a:	dc 01       	movw	r26, r24
    2d7c:	cb 01       	movw	r24, r22
    2d7e:	9e af       	std	Y+62, r25	; 0x3e
    2d80:	8d af       	std	Y+61, r24	; 0x3d
    2d82:	0f c0       	rjmp	.+30     	; 0x2da2 <LCD_sendCommand+0x478>
    2d84:	88 ec       	ldi	r24, 0xC8	; 200
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	9c af       	std	Y+60, r25	; 0x3c
    2d8a:	8b af       	std	Y+59, r24	; 0x3b
    2d8c:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d8e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <LCD_sendCommand+0x466>
    2d94:	9c af       	std	Y+60, r25	; 0x3c
    2d96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d98:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d9c:	01 97       	sbiw	r24, 0x01	; 1
    2d9e:	9e af       	std	Y+62, r25	; 0x3e
    2da0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2da2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2da4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	69 f7       	brne	.-38     	; 0x2d84 <LCD_sendCommand+0x45a>
    2daa:	16 c0       	rjmp	.+44     	; 0x2dd8 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dac:	fe 01       	movw	r30, r28
    2dae:	ff 96       	adiw	r30, 0x3f	; 63
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2dbc:	dc 01       	movw	r26, r24
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	9e af       	std	Y+62, r25	; 0x3e
    2dc2:	8d af       	std	Y+61, r24	; 0x3d
    2dc4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc6:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc8:	9a af       	std	Y+58, r25	; 0x3a
    2dca:	89 af       	std	Y+57, r24	; 0x39
    2dcc:	89 ad       	ldd	r24, Y+57	; 0x39
    2dce:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dd0:	01 97       	sbiw	r24, 0x01	; 1
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_sendCommand+0x4a6>
    2dd4:	9a af       	std	Y+58, r25	; 0x3a
    2dd6:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2dd8:	82 e0       	ldi	r24, 0x02	; 2
    2dda:	62 e0       	ldi	r22, 0x02	; 2
    2ddc:	40 e0       	ldi	r20, 0x00	; 0
    2dde:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	a0 e8       	ldi	r26, 0x80	; 128
    2de8:	bf e3       	ldi	r27, 0x3F	; 63
    2dea:	8d ab       	std	Y+53, r24	; 0x35
    2dec:	9e ab       	std	Y+54, r25	; 0x36
    2dee:	af ab       	std	Y+55, r26	; 0x37
    2df0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	6d a9       	ldd	r22, Y+53	; 0x35
    2df4:	7e a9       	ldd	r23, Y+54	; 0x36
    2df6:	8f a9       	ldd	r24, Y+55	; 0x37
    2df8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a ef       	ldi	r20, 0xFA	; 250
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	89 ab       	std	Y+49, r24	; 0x31
    2e0c:	9a ab       	std	Y+50, r25	; 0x32
    2e0e:	ab ab       	std	Y+51, r26	; 0x33
    2e10:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e12:	69 a9       	ldd	r22, Y+49	; 0x31
    2e14:	7a a9       	ldd	r23, Y+50	; 0x32
    2e16:	8b a9       	ldd	r24, Y+51	; 0x33
    2e18:	9c a9       	ldd	r25, Y+52	; 0x34
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	98 ab       	std	Y+48, r25	; 0x30
    2e30:	8f a7       	std	Y+47, r24	; 0x2f
    2e32:	3f c0       	rjmp	.+126    	; 0x2eb2 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2e34:	69 a9       	ldd	r22, Y+49	; 0x31
    2e36:	7a a9       	ldd	r23, Y+50	; 0x32
    2e38:	8b a9       	ldd	r24, Y+51	; 0x33
    2e3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	3f ef       	ldi	r19, 0xFF	; 255
    2e40:	4f e7       	ldi	r20, 0x7F	; 127
    2e42:	57 e4       	ldi	r21, 0x47	; 71
    2e44:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	4c f5       	brge	.+82     	; 0x2e9e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4c:	6d a9       	ldd	r22, Y+53	; 0x35
    2e4e:	7e a9       	ldd	r23, Y+54	; 0x36
    2e50:	8f a9       	ldd	r24, Y+55	; 0x37
    2e52:	98 ad       	ldd	r25, Y+56	; 0x38
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e2       	ldi	r20, 0x20	; 32
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	98 ab       	std	Y+48, r25	; 0x30
    2e72:	8f a7       	std	Y+47, r24	; 0x2f
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <LCD_sendCommand+0x56a>
    2e76:	88 ec       	ldi	r24, 0xC8	; 200
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9e a7       	std	Y+46, r25	; 0x2e
    2e7c:	8d a7       	std	Y+45, r24	; 0x2d
    2e7e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e80:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <LCD_sendCommand+0x558>
    2e86:	9e a7       	std	Y+46, r25	; 0x2e
    2e88:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e8c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	98 ab       	std	Y+48, r25	; 0x30
    2e92:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e96:	98 a9       	ldd	r25, Y+48	; 0x30
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	69 f7       	brne	.-38     	; 0x2e76 <LCD_sendCommand+0x54c>
    2e9c:	14 c0       	rjmp	.+40     	; 0x2ec6 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9e:	69 a9       	ldd	r22, Y+49	; 0x31
    2ea0:	7a a9       	ldd	r23, Y+50	; 0x32
    2ea2:	8b a9       	ldd	r24, Y+51	; 0x33
    2ea4:	9c a9       	ldd	r25, Y+52	; 0x34
    2ea6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	98 ab       	std	Y+48, r25	; 0x30
    2eb0:	8f a7       	std	Y+47, r24	; 0x2f
    2eb2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2eb4:	98 a9       	ldd	r25, Y+48	; 0x30
    2eb6:	9c a7       	std	Y+44, r25	; 0x2c
    2eb8:	8b a7       	std	Y+43, r24	; 0x2b
    2eba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ebc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <LCD_sendCommand+0x594>
    2ec2:	9c a7       	std	Y+44, r25	; 0x2c
    2ec4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2ec6:	82 e0       	ldi	r24, 0x02	; 2
    2ec8:	62 e0       	ldi	r22, 0x02	; 2
    2eca:	41 e0       	ldi	r20, 0x01	; 1
    2ecc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    2ed0:	80 e0       	ldi	r24, 0x00	; 0
    2ed2:	90 e0       	ldi	r25, 0x00	; 0
    2ed4:	a0 e8       	ldi	r26, 0x80	; 128
    2ed6:	bf e3       	ldi	r27, 0x3F	; 63
    2ed8:	8f a3       	std	Y+39, r24	; 0x27
    2eda:	98 a7       	std	Y+40, r25	; 0x28
    2edc:	a9 a7       	std	Y+41, r26	; 0x29
    2ede:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ee0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ee4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ee6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	4a ef       	ldi	r20, 0xFA	; 250
    2eee:	54 e4       	ldi	r21, 0x44	; 68
    2ef0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	8b a3       	std	Y+35, r24	; 0x23
    2efa:	9c a3       	std	Y+36, r25	; 0x24
    2efc:	ad a3       	std	Y+37, r26	; 0x25
    2efe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2f00:	6b a1       	ldd	r22, Y+35	; 0x23
    2f02:	7c a1       	ldd	r23, Y+36	; 0x24
    2f04:	8d a1       	ldd	r24, Y+37	; 0x25
    2f06:	9e a1       	ldd	r25, Y+38	; 0x26
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	40 e8       	ldi	r20, 0x80	; 128
    2f0e:	5f e3       	ldi	r21, 0x3F	; 63
    2f10:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2f14:	88 23       	and	r24, r24
    2f16:	2c f4       	brge	.+10     	; 0x2f22 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	9a a3       	std	Y+34, r25	; 0x22
    2f1e:	89 a3       	std	Y+33, r24	; 0x21
    2f20:	3f c0       	rjmp	.+126    	; 0x2fa0 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2f22:	6b a1       	ldd	r22, Y+35	; 0x23
    2f24:	7c a1       	ldd	r23, Y+36	; 0x24
    2f26:	8d a1       	ldd	r24, Y+37	; 0x25
    2f28:	9e a1       	ldd	r25, Y+38	; 0x26
    2f2a:	20 e0       	ldi	r18, 0x00	; 0
    2f2c:	3f ef       	ldi	r19, 0xFF	; 255
    2f2e:	4f e7       	ldi	r20, 0x7F	; 127
    2f30:	57 e4       	ldi	r21, 0x47	; 71
    2f32:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2f36:	18 16       	cp	r1, r24
    2f38:	4c f5       	brge	.+82     	; 0x2f8c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f3a:	6f a1       	ldd	r22, Y+39	; 0x27
    2f3c:	78 a5       	ldd	r23, Y+40	; 0x28
    2f3e:	89 a5       	ldd	r24, Y+41	; 0x29
    2f40:	9a a5       	ldd	r25, Y+42	; 0x2a
    2f42:	20 e0       	ldi	r18, 0x00	; 0
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	40 e2       	ldi	r20, 0x20	; 32
    2f48:	51 e4       	ldi	r21, 0x41	; 65
    2f4a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9a a3       	std	Y+34, r25	; 0x22
    2f60:	89 a3       	std	Y+33, r24	; 0x21
    2f62:	0f c0       	rjmp	.+30     	; 0x2f82 <LCD_sendCommand+0x658>
    2f64:	88 ec       	ldi	r24, 0xC8	; 200
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	98 a3       	std	Y+32, r25	; 0x20
    2f6a:	8f 8f       	std	Y+31, r24	; 0x1f
    2f6c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f6e:	98 a1       	ldd	r25, Y+32	; 0x20
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <LCD_sendCommand+0x646>
    2f74:	98 a3       	std	Y+32, r25	; 0x20
    2f76:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f78:	89 a1       	ldd	r24, Y+33	; 0x21
    2f7a:	9a a1       	ldd	r25, Y+34	; 0x22
    2f7c:	01 97       	sbiw	r24, 0x01	; 1
    2f7e:	9a a3       	std	Y+34, r25	; 0x22
    2f80:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f82:	89 a1       	ldd	r24, Y+33	; 0x21
    2f84:	9a a1       	ldd	r25, Y+34	; 0x22
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	69 f7       	brne	.-38     	; 0x2f64 <LCD_sendCommand+0x63a>
    2f8a:	14 c0       	rjmp	.+40     	; 0x2fb4 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f8c:	6b a1       	ldd	r22, Y+35	; 0x23
    2f8e:	7c a1       	ldd	r23, Y+36	; 0x24
    2f90:	8d a1       	ldd	r24, Y+37	; 0x25
    2f92:	9e a1       	ldd	r25, Y+38	; 0x26
    2f94:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9a a3       	std	Y+34, r25	; 0x22
    2f9e:	89 a3       	std	Y+33, r24	; 0x21
    2fa0:	89 a1       	ldd	r24, Y+33	; 0x21
    2fa2:	9a a1       	ldd	r25, Y+34	; 0x22
    2fa4:	9e 8f       	std	Y+30, r25	; 0x1e
    2fa6:	8d 8f       	std	Y+29, r24	; 0x1d
    2fa8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2faa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2fac:	01 97       	sbiw	r24, 0x01	; 1
    2fae:	f1 f7       	brne	.-4      	; 0x2fac <LCD_sendCommand+0x682>
    2fb0:	9e 8f       	std	Y+30, r25	; 0x1e
    2fb2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2fb4:	fe 01       	movw	r30, r28
    2fb6:	ed 59       	subi	r30, 0x9D	; 157
    2fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    2fba:	80 81       	ld	r24, Z
    2fbc:	98 2f       	mov	r25, r24
    2fbe:	91 70       	andi	r25, 0x01	; 1
    2fc0:	82 e0       	ldi	r24, 0x02	; 2
    2fc2:	63 e0       	ldi	r22, 0x03	; 3
    2fc4:	49 2f       	mov	r20, r25
    2fc6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    2fca:	fe 01       	movw	r30, r28
    2fcc:	ed 59       	subi	r30, 0x9D	; 157
    2fce:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd0:	80 81       	ld	r24, Z
    2fd2:	88 2f       	mov	r24, r24
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	82 70       	andi	r24, 0x02	; 2
    2fd8:	90 70       	andi	r25, 0x00	; 0
    2fda:	95 95       	asr	r25
    2fdc:	87 95       	ror	r24
    2fde:	98 2f       	mov	r25, r24
    2fe0:	82 e0       	ldi	r24, 0x02	; 2
    2fe2:	64 e0       	ldi	r22, 0x04	; 4
    2fe4:	49 2f       	mov	r20, r25
    2fe6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2fea:	fe 01       	movw	r30, r28
    2fec:	ed 59       	subi	r30, 0x9D	; 157
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	88 2f       	mov	r24, r24
    2ff4:	90 e0       	ldi	r25, 0x00	; 0
    2ff6:	84 70       	andi	r24, 0x04	; 4
    2ff8:	90 70       	andi	r25, 0x00	; 0
    2ffa:	95 95       	asr	r25
    2ffc:	87 95       	ror	r24
    2ffe:	95 95       	asr	r25
    3000:	87 95       	ror	r24
    3002:	98 2f       	mov	r25, r24
    3004:	82 e0       	ldi	r24, 0x02	; 2
    3006:	65 e0       	ldi	r22, 0x05	; 5
    3008:	49 2f       	mov	r20, r25
    300a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    300e:	fe 01       	movw	r30, r28
    3010:	ed 59       	subi	r30, 0x9D	; 157
    3012:	ff 4f       	sbci	r31, 0xFF	; 255
    3014:	80 81       	ld	r24, Z
    3016:	88 2f       	mov	r24, r24
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	88 70       	andi	r24, 0x08	; 8
    301c:	90 70       	andi	r25, 0x00	; 0
    301e:	95 95       	asr	r25
    3020:	87 95       	ror	r24
    3022:	95 95       	asr	r25
    3024:	87 95       	ror	r24
    3026:	95 95       	asr	r25
    3028:	87 95       	ror	r24
    302a:	98 2f       	mov	r25, r24
    302c:	82 e0       	ldi	r24, 0x02	; 2
    302e:	66 e0       	ldi	r22, 0x06	; 6
    3030:	49 2f       	mov	r20, r25
    3032:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    3036:	80 e0       	ldi	r24, 0x00	; 0
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	a0 e8       	ldi	r26, 0x80	; 128
    303c:	bf e3       	ldi	r27, 0x3F	; 63
    303e:	89 8f       	std	Y+25, r24	; 0x19
    3040:	9a 8f       	std	Y+26, r25	; 0x1a
    3042:	ab 8f       	std	Y+27, r26	; 0x1b
    3044:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3046:	69 8d       	ldd	r22, Y+25	; 0x19
    3048:	7a 8d       	ldd	r23, Y+26	; 0x1a
    304a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    304c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	4a ef       	ldi	r20, 0xFA	; 250
    3054:	54 e4       	ldi	r21, 0x44	; 68
    3056:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	8d 8b       	std	Y+21, r24	; 0x15
    3060:	9e 8b       	std	Y+22, r25	; 0x16
    3062:	af 8b       	std	Y+23, r26	; 0x17
    3064:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3066:	6d 89       	ldd	r22, Y+21	; 0x15
    3068:	7e 89       	ldd	r23, Y+22	; 0x16
    306a:	8f 89       	ldd	r24, Y+23	; 0x17
    306c:	98 8d       	ldd	r25, Y+24	; 0x18
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e8       	ldi	r20, 0x80	; 128
    3074:	5f e3       	ldi	r21, 0x3F	; 63
    3076:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    307a:	88 23       	and	r24, r24
    307c:	2c f4       	brge	.+10     	; 0x3088 <LCD_sendCommand+0x75e>
		__ticks = 1;
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9c 8b       	std	Y+20, r25	; 0x14
    3084:	8b 8b       	std	Y+19, r24	; 0x13
    3086:	3f c0       	rjmp	.+126    	; 0x3106 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    3088:	6d 89       	ldd	r22, Y+21	; 0x15
    308a:	7e 89       	ldd	r23, Y+22	; 0x16
    308c:	8f 89       	ldd	r24, Y+23	; 0x17
    308e:	98 8d       	ldd	r25, Y+24	; 0x18
    3090:	20 e0       	ldi	r18, 0x00	; 0
    3092:	3f ef       	ldi	r19, 0xFF	; 255
    3094:	4f e7       	ldi	r20, 0x7F	; 127
    3096:	57 e4       	ldi	r21, 0x47	; 71
    3098:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    309c:	18 16       	cp	r1, r24
    309e:	4c f5       	brge	.+82     	; 0x30f2 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30a0:	69 8d       	ldd	r22, Y+25	; 0x19
    30a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30a8:	20 e0       	ldi	r18, 0x00	; 0
    30aa:	30 e0       	ldi	r19, 0x00	; 0
    30ac:	40 e2       	ldi	r20, 0x20	; 32
    30ae:	51 e4       	ldi	r21, 0x41	; 65
    30b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9c 8b       	std	Y+20, r25	; 0x14
    30c6:	8b 8b       	std	Y+19, r24	; 0x13
    30c8:	0f c0       	rjmp	.+30     	; 0x30e8 <LCD_sendCommand+0x7be>
    30ca:	88 ec       	ldi	r24, 0xC8	; 200
    30cc:	90 e0       	ldi	r25, 0x00	; 0
    30ce:	9a 8b       	std	Y+18, r25	; 0x12
    30d0:	89 8b       	std	Y+17, r24	; 0x11
    30d2:	89 89       	ldd	r24, Y+17	; 0x11
    30d4:	9a 89       	ldd	r25, Y+18	; 0x12
    30d6:	01 97       	sbiw	r24, 0x01	; 1
    30d8:	f1 f7       	brne	.-4      	; 0x30d6 <LCD_sendCommand+0x7ac>
    30da:	9a 8b       	std	Y+18, r25	; 0x12
    30dc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30de:	8b 89       	ldd	r24, Y+19	; 0x13
    30e0:	9c 89       	ldd	r25, Y+20	; 0x14
    30e2:	01 97       	sbiw	r24, 0x01	; 1
    30e4:	9c 8b       	std	Y+20, r25	; 0x14
    30e6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30e8:	8b 89       	ldd	r24, Y+19	; 0x13
    30ea:	9c 89       	ldd	r25, Y+20	; 0x14
    30ec:	00 97       	sbiw	r24, 0x00	; 0
    30ee:	69 f7       	brne	.-38     	; 0x30ca <LCD_sendCommand+0x7a0>
    30f0:	14 c0       	rjmp	.+40     	; 0x311a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30f2:	6d 89       	ldd	r22, Y+21	; 0x15
    30f4:	7e 89       	ldd	r23, Y+22	; 0x16
    30f6:	8f 89       	ldd	r24, Y+23	; 0x17
    30f8:	98 8d       	ldd	r25, Y+24	; 0x18
    30fa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	9c 8b       	std	Y+20, r25	; 0x14
    3104:	8b 8b       	std	Y+19, r24	; 0x13
    3106:	8b 89       	ldd	r24, Y+19	; 0x13
    3108:	9c 89       	ldd	r25, Y+20	; 0x14
    310a:	98 8b       	std	Y+16, r25	; 0x10
    310c:	8f 87       	std	Y+15, r24	; 0x0f
    310e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3110:	98 89       	ldd	r25, Y+16	; 0x10
    3112:	01 97       	sbiw	r24, 0x01	; 1
    3114:	f1 f7       	brne	.-4      	; 0x3112 <LCD_sendCommand+0x7e8>
    3116:	98 8b       	std	Y+16, r25	; 0x10
    3118:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    311a:	82 e0       	ldi	r24, 0x02	; 2
    311c:	62 e0       	ldi	r22, 0x02	; 2
    311e:	40 e0       	ldi	r20, 0x00	; 0
    3120:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	a0 e8       	ldi	r26, 0x80	; 128
    312a:	bf e3       	ldi	r27, 0x3F	; 63
    312c:	8b 87       	std	Y+11, r24	; 0x0b
    312e:	9c 87       	std	Y+12, r25	; 0x0c
    3130:	ad 87       	std	Y+13, r26	; 0x0d
    3132:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3134:	6b 85       	ldd	r22, Y+11	; 0x0b
    3136:	7c 85       	ldd	r23, Y+12	; 0x0c
    3138:	8d 85       	ldd	r24, Y+13	; 0x0d
    313a:	9e 85       	ldd	r25, Y+14	; 0x0e
    313c:	20 e0       	ldi	r18, 0x00	; 0
    313e:	30 e0       	ldi	r19, 0x00	; 0
    3140:	4a ef       	ldi	r20, 0xFA	; 250
    3142:	54 e4       	ldi	r21, 0x44	; 68
    3144:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3148:	dc 01       	movw	r26, r24
    314a:	cb 01       	movw	r24, r22
    314c:	8f 83       	std	Y+7, r24	; 0x07
    314e:	98 87       	std	Y+8, r25	; 0x08
    3150:	a9 87       	std	Y+9, r26	; 0x09
    3152:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3154:	6f 81       	ldd	r22, Y+7	; 0x07
    3156:	78 85       	ldd	r23, Y+8	; 0x08
    3158:	89 85       	ldd	r24, Y+9	; 0x09
    315a:	9a 85       	ldd	r25, Y+10	; 0x0a
    315c:	20 e0       	ldi	r18, 0x00	; 0
    315e:	30 e0       	ldi	r19, 0x00	; 0
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3168:	88 23       	and	r24, r24
    316a:	2c f4       	brge	.+10     	; 0x3176 <LCD_sendCommand+0x84c>
		__ticks = 1;
    316c:	81 e0       	ldi	r24, 0x01	; 1
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	9e 83       	std	Y+6, r25	; 0x06
    3172:	8d 83       	std	Y+5, r24	; 0x05
    3174:	3f c0       	rjmp	.+126    	; 0x31f4 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    3176:	6f 81       	ldd	r22, Y+7	; 0x07
    3178:	78 85       	ldd	r23, Y+8	; 0x08
    317a:	89 85       	ldd	r24, Y+9	; 0x09
    317c:	9a 85       	ldd	r25, Y+10	; 0x0a
    317e:	20 e0       	ldi	r18, 0x00	; 0
    3180:	3f ef       	ldi	r19, 0xFF	; 255
    3182:	4f e7       	ldi	r20, 0x7F	; 127
    3184:	57 e4       	ldi	r21, 0x47	; 71
    3186:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    318a:	18 16       	cp	r1, r24
    318c:	4c f5       	brge	.+82     	; 0x31e0 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    318e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3190:	7c 85       	ldd	r23, Y+12	; 0x0c
    3192:	8d 85       	ldd	r24, Y+13	; 0x0d
    3194:	9e 85       	ldd	r25, Y+14	; 0x0e
    3196:	20 e0       	ldi	r18, 0x00	; 0
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	40 e2       	ldi	r20, 0x20	; 32
    319c:	51 e4       	ldi	r21, 0x41	; 65
    319e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    31a2:	dc 01       	movw	r26, r24
    31a4:	cb 01       	movw	r24, r22
    31a6:	bc 01       	movw	r22, r24
    31a8:	cd 01       	movw	r24, r26
    31aa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9e 83       	std	Y+6, r25	; 0x06
    31b4:	8d 83       	std	Y+5, r24	; 0x05
    31b6:	0f c0       	rjmp	.+30     	; 0x31d6 <LCD_sendCommand+0x8ac>
    31b8:	88 ec       	ldi	r24, 0xC8	; 200
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	9c 83       	std	Y+4, r25	; 0x04
    31be:	8b 83       	std	Y+3, r24	; 0x03
    31c0:	8b 81       	ldd	r24, Y+3	; 0x03
    31c2:	9c 81       	ldd	r25, Y+4	; 0x04
    31c4:	01 97       	sbiw	r24, 0x01	; 1
    31c6:	f1 f7       	brne	.-4      	; 0x31c4 <LCD_sendCommand+0x89a>
    31c8:	9c 83       	std	Y+4, r25	; 0x04
    31ca:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31cc:	8d 81       	ldd	r24, Y+5	; 0x05
    31ce:	9e 81       	ldd	r25, Y+6	; 0x06
    31d0:	01 97       	sbiw	r24, 0x01	; 1
    31d2:	9e 83       	std	Y+6, r25	; 0x06
    31d4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31d6:	8d 81       	ldd	r24, Y+5	; 0x05
    31d8:	9e 81       	ldd	r25, Y+6	; 0x06
    31da:	00 97       	sbiw	r24, 0x00	; 0
    31dc:	69 f7       	brne	.-38     	; 0x31b8 <LCD_sendCommand+0x88e>
    31de:	14 c0       	rjmp	.+40     	; 0x3208 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31e0:	6f 81       	ldd	r22, Y+7	; 0x07
    31e2:	78 85       	ldd	r23, Y+8	; 0x08
    31e4:	89 85       	ldd	r24, Y+9	; 0x09
    31e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    31e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    31ec:	dc 01       	movw	r26, r24
    31ee:	cb 01       	movw	r24, r22
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	9a 83       	std	Y+2, r25	; 0x02
    31fa:	89 83       	std	Y+1, r24	; 0x01
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	01 97       	sbiw	r24, 0x01	; 1
    3202:	f1 f7       	brne	.-4      	; 0x3200 <LCD_sendCommand+0x8d6>
    3204:	9a 83       	std	Y+2, r25	; 0x02
    3206:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3208:	cd 59       	subi	r28, 0x9D	; 157
    320a:	df 4f       	sbci	r29, 0xFF	; 255
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	de bf       	out	0x3e, r29	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	cd bf       	out	0x3d, r28	; 61
    3216:	cf 91       	pop	r28
    3218:	df 91       	pop	r29
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	08 95       	ret

00003220 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    3220:	0f 93       	push	r16
    3222:	1f 93       	push	r17
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	c3 56       	subi	r28, 0x63	; 99
    322e:	d0 40       	sbci	r29, 0x00	; 0
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	fe 01       	movw	r30, r28
    323c:	ed 59       	subi	r30, 0x9D	; 157
    323e:	ff 4f       	sbci	r31, 0xFF	; 255
    3240:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    3242:	82 e0       	ldi	r24, 0x02	; 2
    3244:	60 e0       	ldi	r22, 0x00	; 0
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    324c:	fe 01       	movw	r30, r28
    324e:	e1 5a       	subi	r30, 0xA1	; 161
    3250:	ff 4f       	sbci	r31, 0xFF	; 255
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	90 e0       	ldi	r25, 0x00	; 0
    3256:	a0 e8       	ldi	r26, 0x80	; 128
    3258:	bf e3       	ldi	r27, 0x3F	; 63
    325a:	80 83       	st	Z, r24
    325c:	91 83       	std	Z+1, r25	; 0x01
    325e:	a2 83       	std	Z+2, r26	; 0x02
    3260:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3262:	8e 01       	movw	r16, r28
    3264:	05 5a       	subi	r16, 0xA5	; 165
    3266:	1f 4f       	sbci	r17, 0xFF	; 255
    3268:	fe 01       	movw	r30, r28
    326a:	e1 5a       	subi	r30, 0xA1	; 161
    326c:	ff 4f       	sbci	r31, 0xFF	; 255
    326e:	60 81       	ld	r22, Z
    3270:	71 81       	ldd	r23, Z+1	; 0x01
    3272:	82 81       	ldd	r24, Z+2	; 0x02
    3274:	93 81       	ldd	r25, Z+3	; 0x03
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4a ef       	ldi	r20, 0xFA	; 250
    327c:	54 e4       	ldi	r21, 0x44	; 68
    327e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3282:	dc 01       	movw	r26, r24
    3284:	cb 01       	movw	r24, r22
    3286:	f8 01       	movw	r30, r16
    3288:	80 83       	st	Z, r24
    328a:	91 83       	std	Z+1, r25	; 0x01
    328c:	a2 83       	std	Z+2, r26	; 0x02
    328e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3290:	fe 01       	movw	r30, r28
    3292:	e5 5a       	subi	r30, 0xA5	; 165
    3294:	ff 4f       	sbci	r31, 0xFF	; 255
    3296:	60 81       	ld	r22, Z
    3298:	71 81       	ldd	r23, Z+1	; 0x01
    329a:	82 81       	ldd	r24, Z+2	; 0x02
    329c:	93 81       	ldd	r25, Z+3	; 0x03
    329e:	20 e0       	ldi	r18, 0x00	; 0
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	40 e8       	ldi	r20, 0x80	; 128
    32a4:	5f e3       	ldi	r21, 0x3F	; 63
    32a6:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    32aa:	88 23       	and	r24, r24
    32ac:	44 f4       	brge	.+16     	; 0x32be <LCD_displayCharacter+0x9e>
		__ticks = 1;
    32ae:	fe 01       	movw	r30, r28
    32b0:	e7 5a       	subi	r30, 0xA7	; 167
    32b2:	ff 4f       	sbci	r31, 0xFF	; 255
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	91 83       	std	Z+1, r25	; 0x01
    32ba:	80 83       	st	Z, r24
    32bc:	64 c0       	rjmp	.+200    	; 0x3386 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    32be:	fe 01       	movw	r30, r28
    32c0:	e5 5a       	subi	r30, 0xA5	; 165
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	60 81       	ld	r22, Z
    32c6:	71 81       	ldd	r23, Z+1	; 0x01
    32c8:	82 81       	ldd	r24, Z+2	; 0x02
    32ca:	93 81       	ldd	r25, Z+3	; 0x03
    32cc:	20 e0       	ldi	r18, 0x00	; 0
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	57 e4       	ldi	r21, 0x47	; 71
    32d4:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    32d8:	18 16       	cp	r1, r24
    32da:	0c f0       	brlt	.+2      	; 0x32de <LCD_displayCharacter+0xbe>
    32dc:	43 c0       	rjmp	.+134    	; 0x3364 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32de:	fe 01       	movw	r30, r28
    32e0:	e1 5a       	subi	r30, 0xA1	; 161
    32e2:	ff 4f       	sbci	r31, 0xFF	; 255
    32e4:	60 81       	ld	r22, Z
    32e6:	71 81       	ldd	r23, Z+1	; 0x01
    32e8:	82 81       	ldd	r24, Z+2	; 0x02
    32ea:	93 81       	ldd	r25, Z+3	; 0x03
    32ec:	20 e0       	ldi	r18, 0x00	; 0
    32ee:	30 e0       	ldi	r19, 0x00	; 0
    32f0:	40 e2       	ldi	r20, 0x20	; 32
    32f2:	51 e4       	ldi	r21, 0x41	; 65
    32f4:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    32f8:	dc 01       	movw	r26, r24
    32fa:	cb 01       	movw	r24, r22
    32fc:	8e 01       	movw	r16, r28
    32fe:	07 5a       	subi	r16, 0xA7	; 167
    3300:	1f 4f       	sbci	r17, 0xFF	; 255
    3302:	bc 01       	movw	r22, r24
    3304:	cd 01       	movw	r24, r26
    3306:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    330a:	dc 01       	movw	r26, r24
    330c:	cb 01       	movw	r24, r22
    330e:	f8 01       	movw	r30, r16
    3310:	91 83       	std	Z+1, r25	; 0x01
    3312:	80 83       	st	Z, r24
    3314:	1f c0       	rjmp	.+62     	; 0x3354 <LCD_displayCharacter+0x134>
    3316:	fe 01       	movw	r30, r28
    3318:	e9 5a       	subi	r30, 0xA9	; 169
    331a:	ff 4f       	sbci	r31, 0xFF	; 255
    331c:	88 ec       	ldi	r24, 0xC8	; 200
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	91 83       	std	Z+1, r25	; 0x01
    3322:	80 83       	st	Z, r24
    3324:	fe 01       	movw	r30, r28
    3326:	e9 5a       	subi	r30, 0xA9	; 169
    3328:	ff 4f       	sbci	r31, 0xFF	; 255
    332a:	80 81       	ld	r24, Z
    332c:	91 81       	ldd	r25, Z+1	; 0x01
    332e:	01 97       	sbiw	r24, 0x01	; 1
    3330:	f1 f7       	brne	.-4      	; 0x332e <LCD_displayCharacter+0x10e>
    3332:	fe 01       	movw	r30, r28
    3334:	e9 5a       	subi	r30, 0xA9	; 169
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	91 83       	std	Z+1, r25	; 0x01
    333a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    333c:	de 01       	movw	r26, r28
    333e:	a7 5a       	subi	r26, 0xA7	; 167
    3340:	bf 4f       	sbci	r27, 0xFF	; 255
    3342:	fe 01       	movw	r30, r28
    3344:	e7 5a       	subi	r30, 0xA7	; 167
    3346:	ff 4f       	sbci	r31, 0xFF	; 255
    3348:	80 81       	ld	r24, Z
    334a:	91 81       	ldd	r25, Z+1	; 0x01
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	11 96       	adiw	r26, 0x01	; 1
    3350:	9c 93       	st	X, r25
    3352:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3354:	fe 01       	movw	r30, r28
    3356:	e7 5a       	subi	r30, 0xA7	; 167
    3358:	ff 4f       	sbci	r31, 0xFF	; 255
    335a:	80 81       	ld	r24, Z
    335c:	91 81       	ldd	r25, Z+1	; 0x01
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	d1 f6       	brne	.-76     	; 0x3316 <LCD_displayCharacter+0xf6>
    3362:	27 c0       	rjmp	.+78     	; 0x33b2 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3364:	8e 01       	movw	r16, r28
    3366:	07 5a       	subi	r16, 0xA7	; 167
    3368:	1f 4f       	sbci	r17, 0xFF	; 255
    336a:	fe 01       	movw	r30, r28
    336c:	e5 5a       	subi	r30, 0xA5	; 165
    336e:	ff 4f       	sbci	r31, 0xFF	; 255
    3370:	60 81       	ld	r22, Z
    3372:	71 81       	ldd	r23, Z+1	; 0x01
    3374:	82 81       	ldd	r24, Z+2	; 0x02
    3376:	93 81       	ldd	r25, Z+3	; 0x03
    3378:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    337c:	dc 01       	movw	r26, r24
    337e:	cb 01       	movw	r24, r22
    3380:	f8 01       	movw	r30, r16
    3382:	91 83       	std	Z+1, r25	; 0x01
    3384:	80 83       	st	Z, r24
    3386:	de 01       	movw	r26, r28
    3388:	ab 5a       	subi	r26, 0xAB	; 171
    338a:	bf 4f       	sbci	r27, 0xFF	; 255
    338c:	fe 01       	movw	r30, r28
    338e:	e7 5a       	subi	r30, 0xA7	; 167
    3390:	ff 4f       	sbci	r31, 0xFF	; 255
    3392:	80 81       	ld	r24, Z
    3394:	91 81       	ldd	r25, Z+1	; 0x01
    3396:	8d 93       	st	X+, r24
    3398:	9c 93       	st	X, r25
    339a:	fe 01       	movw	r30, r28
    339c:	eb 5a       	subi	r30, 0xAB	; 171
    339e:	ff 4f       	sbci	r31, 0xFF	; 255
    33a0:	80 81       	ld	r24, Z
    33a2:	91 81       	ldd	r25, Z+1	; 0x01
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <LCD_displayCharacter+0x184>
    33a8:	fe 01       	movw	r30, r28
    33aa:	eb 5a       	subi	r30, 0xAB	; 171
    33ac:	ff 4f       	sbci	r31, 0xFF	; 255
    33ae:	91 83       	std	Z+1, r25	; 0x01
    33b0:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	62 e0       	ldi	r22, 0x02	; 2
    33b6:	41 e0       	ldi	r20, 0x01	; 1
    33b8:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    33bc:	fe 01       	movw	r30, r28
    33be:	ef 5a       	subi	r30, 0xAF	; 175
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 e0       	ldi	r24, 0x00	; 0
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	a0 e8       	ldi	r26, 0x80	; 128
    33c8:	bf e3       	ldi	r27, 0x3F	; 63
    33ca:	80 83       	st	Z, r24
    33cc:	91 83       	std	Z+1, r25	; 0x01
    33ce:	a2 83       	std	Z+2, r26	; 0x02
    33d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33d2:	8e 01       	movw	r16, r28
    33d4:	03 5b       	subi	r16, 0xB3	; 179
    33d6:	1f 4f       	sbci	r17, 0xFF	; 255
    33d8:	fe 01       	movw	r30, r28
    33da:	ef 5a       	subi	r30, 0xAF	; 175
    33dc:	ff 4f       	sbci	r31, 0xFF	; 255
    33de:	60 81       	ld	r22, Z
    33e0:	71 81       	ldd	r23, Z+1	; 0x01
    33e2:	82 81       	ldd	r24, Z+2	; 0x02
    33e4:	93 81       	ldd	r25, Z+3	; 0x03
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	4a ef       	ldi	r20, 0xFA	; 250
    33ec:	54 e4       	ldi	r21, 0x44	; 68
    33ee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    33f2:	dc 01       	movw	r26, r24
    33f4:	cb 01       	movw	r24, r22
    33f6:	f8 01       	movw	r30, r16
    33f8:	80 83       	st	Z, r24
    33fa:	91 83       	std	Z+1, r25	; 0x01
    33fc:	a2 83       	std	Z+2, r26	; 0x02
    33fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3400:	fe 01       	movw	r30, r28
    3402:	e3 5b       	subi	r30, 0xB3	; 179
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	60 81       	ld	r22, Z
    3408:	71 81       	ldd	r23, Z+1	; 0x01
    340a:	82 81       	ldd	r24, Z+2	; 0x02
    340c:	93 81       	ldd	r25, Z+3	; 0x03
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	44 f4       	brge	.+16     	; 0x342e <LCD_displayCharacter+0x20e>
		__ticks = 1;
    341e:	fe 01       	movw	r30, r28
    3420:	e5 5b       	subi	r30, 0xB5	; 181
    3422:	ff 4f       	sbci	r31, 0xFF	; 255
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	90 e0       	ldi	r25, 0x00	; 0
    3428:	91 83       	std	Z+1, r25	; 0x01
    342a:	80 83       	st	Z, r24
    342c:	64 c0       	rjmp	.+200    	; 0x34f6 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    342e:	fe 01       	movw	r30, r28
    3430:	e3 5b       	subi	r30, 0xB3	; 179
    3432:	ff 4f       	sbci	r31, 0xFF	; 255
    3434:	60 81       	ld	r22, Z
    3436:	71 81       	ldd	r23, Z+1	; 0x01
    3438:	82 81       	ldd	r24, Z+2	; 0x02
    343a:	93 81       	ldd	r25, Z+3	; 0x03
    343c:	20 e0       	ldi	r18, 0x00	; 0
    343e:	3f ef       	ldi	r19, 0xFF	; 255
    3440:	4f e7       	ldi	r20, 0x7F	; 127
    3442:	57 e4       	ldi	r21, 0x47	; 71
    3444:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3448:	18 16       	cp	r1, r24
    344a:	0c f0       	brlt	.+2      	; 0x344e <LCD_displayCharacter+0x22e>
    344c:	43 c0       	rjmp	.+134    	; 0x34d4 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    344e:	fe 01       	movw	r30, r28
    3450:	ef 5a       	subi	r30, 0xAF	; 175
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	40 e2       	ldi	r20, 0x20	; 32
    3462:	51 e4       	ldi	r21, 0x41	; 65
    3464:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	8e 01       	movw	r16, r28
    346e:	05 5b       	subi	r16, 0xB5	; 181
    3470:	1f 4f       	sbci	r17, 0xFF	; 255
    3472:	bc 01       	movw	r22, r24
    3474:	cd 01       	movw	r24, r26
    3476:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	f8 01       	movw	r30, r16
    3480:	91 83       	std	Z+1, r25	; 0x01
    3482:	80 83       	st	Z, r24
    3484:	1f c0       	rjmp	.+62     	; 0x34c4 <LCD_displayCharacter+0x2a4>
    3486:	fe 01       	movw	r30, r28
    3488:	e7 5b       	subi	r30, 0xB7	; 183
    348a:	ff 4f       	sbci	r31, 0xFF	; 255
    348c:	88 ec       	ldi	r24, 0xC8	; 200
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	91 83       	std	Z+1, r25	; 0x01
    3492:	80 83       	st	Z, r24
    3494:	fe 01       	movw	r30, r28
    3496:	e7 5b       	subi	r30, 0xB7	; 183
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	91 81       	ldd	r25, Z+1	; 0x01
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	f1 f7       	brne	.-4      	; 0x349e <LCD_displayCharacter+0x27e>
    34a2:	fe 01       	movw	r30, r28
    34a4:	e7 5b       	subi	r30, 0xB7	; 183
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	91 83       	std	Z+1, r25	; 0x01
    34aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ac:	de 01       	movw	r26, r28
    34ae:	a5 5b       	subi	r26, 0xB5	; 181
    34b0:	bf 4f       	sbci	r27, 0xFF	; 255
    34b2:	fe 01       	movw	r30, r28
    34b4:	e5 5b       	subi	r30, 0xB5	; 181
    34b6:	ff 4f       	sbci	r31, 0xFF	; 255
    34b8:	80 81       	ld	r24, Z
    34ba:	91 81       	ldd	r25, Z+1	; 0x01
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	11 96       	adiw	r26, 0x01	; 1
    34c0:	9c 93       	st	X, r25
    34c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34c4:	fe 01       	movw	r30, r28
    34c6:	e5 5b       	subi	r30, 0xB5	; 181
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	80 81       	ld	r24, Z
    34cc:	91 81       	ldd	r25, Z+1	; 0x01
    34ce:	00 97       	sbiw	r24, 0x00	; 0
    34d0:	d1 f6       	brne	.-76     	; 0x3486 <LCD_displayCharacter+0x266>
    34d2:	27 c0       	rjmp	.+78     	; 0x3522 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34d4:	8e 01       	movw	r16, r28
    34d6:	05 5b       	subi	r16, 0xB5	; 181
    34d8:	1f 4f       	sbci	r17, 0xFF	; 255
    34da:	fe 01       	movw	r30, r28
    34dc:	e3 5b       	subi	r30, 0xB3	; 179
    34de:	ff 4f       	sbci	r31, 0xFF	; 255
    34e0:	60 81       	ld	r22, Z
    34e2:	71 81       	ldd	r23, Z+1	; 0x01
    34e4:	82 81       	ldd	r24, Z+2	; 0x02
    34e6:	93 81       	ldd	r25, Z+3	; 0x03
    34e8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    34ec:	dc 01       	movw	r26, r24
    34ee:	cb 01       	movw	r24, r22
    34f0:	f8 01       	movw	r30, r16
    34f2:	91 83       	std	Z+1, r25	; 0x01
    34f4:	80 83       	st	Z, r24
    34f6:	de 01       	movw	r26, r28
    34f8:	a9 5b       	subi	r26, 0xB9	; 185
    34fa:	bf 4f       	sbci	r27, 0xFF	; 255
    34fc:	fe 01       	movw	r30, r28
    34fe:	e5 5b       	subi	r30, 0xB5	; 181
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 81       	ld	r24, Z
    3504:	91 81       	ldd	r25, Z+1	; 0x01
    3506:	8d 93       	st	X+, r24
    3508:	9c 93       	st	X, r25
    350a:	fe 01       	movw	r30, r28
    350c:	e9 5b       	subi	r30, 0xB9	; 185
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <LCD_displayCharacter+0x2f4>
    3518:	fe 01       	movw	r30, r28
    351a:	e9 5b       	subi	r30, 0xB9	; 185
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    3522:	fe 01       	movw	r30, r28
    3524:	ed 59       	subi	r30, 0x9D	; 157
    3526:	ff 4f       	sbci	r31, 0xFF	; 255
    3528:	80 81       	ld	r24, Z
    352a:	88 2f       	mov	r24, r24
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	80 71       	andi	r24, 0x10	; 16
    3530:	90 70       	andi	r25, 0x00	; 0
    3532:	95 95       	asr	r25
    3534:	87 95       	ror	r24
    3536:	95 95       	asr	r25
    3538:	87 95       	ror	r24
    353a:	95 95       	asr	r25
    353c:	87 95       	ror	r24
    353e:	95 95       	asr	r25
    3540:	87 95       	ror	r24
    3542:	98 2f       	mov	r25, r24
    3544:	82 e0       	ldi	r24, 0x02	; 2
    3546:	63 e0       	ldi	r22, 0x03	; 3
    3548:	49 2f       	mov	r20, r25
    354a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    354e:	fe 01       	movw	r30, r28
    3550:	ed 59       	subi	r30, 0x9D	; 157
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	80 81       	ld	r24, Z
    3556:	88 2f       	mov	r24, r24
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	80 72       	andi	r24, 0x20	; 32
    355c:	90 70       	andi	r25, 0x00	; 0
    355e:	95 95       	asr	r25
    3560:	87 95       	ror	r24
    3562:	95 95       	asr	r25
    3564:	87 95       	ror	r24
    3566:	95 95       	asr	r25
    3568:	87 95       	ror	r24
    356a:	95 95       	asr	r25
    356c:	87 95       	ror	r24
    356e:	95 95       	asr	r25
    3570:	87 95       	ror	r24
    3572:	98 2f       	mov	r25, r24
    3574:	82 e0       	ldi	r24, 0x02	; 2
    3576:	64 e0       	ldi	r22, 0x04	; 4
    3578:	49 2f       	mov	r20, r25
    357a:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    357e:	fe 01       	movw	r30, r28
    3580:	ed 59       	subi	r30, 0x9D	; 157
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	80 81       	ld	r24, Z
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	80 74       	andi	r24, 0x40	; 64
    358c:	90 70       	andi	r25, 0x00	; 0
    358e:	08 2e       	mov	r0, r24
    3590:	89 2f       	mov	r24, r25
    3592:	00 0c       	add	r0, r0
    3594:	88 1f       	adc	r24, r24
    3596:	99 0b       	sbc	r25, r25
    3598:	00 0c       	add	r0, r0
    359a:	88 1f       	adc	r24, r24
    359c:	99 1f       	adc	r25, r25
    359e:	98 2f       	mov	r25, r24
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	65 e0       	ldi	r22, 0x05	; 5
    35a4:	49 2f       	mov	r20, r25
    35a6:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    35aa:	fe 01       	movw	r30, r28
    35ac:	ed 59       	subi	r30, 0x9D	; 157
    35ae:	ff 4f       	sbci	r31, 0xFF	; 255
    35b0:	80 81       	ld	r24, Z
    35b2:	98 2f       	mov	r25, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	99 27       	eor	r25, r25
    35b8:	99 1f       	adc	r25, r25
    35ba:	82 e0       	ldi	r24, 0x02	; 2
    35bc:	66 e0       	ldi	r22, 0x06	; 6
    35be:	49 2f       	mov	r20, r25
    35c0:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    35c4:	fe 01       	movw	r30, r28
    35c6:	ed 5b       	subi	r30, 0xBD	; 189
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	a0 e8       	ldi	r26, 0x80	; 128
    35d0:	bf e3       	ldi	r27, 0x3F	; 63
    35d2:	80 83       	st	Z, r24
    35d4:	91 83       	std	Z+1, r25	; 0x01
    35d6:	a2 83       	std	Z+2, r26	; 0x02
    35d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35da:	8e 01       	movw	r16, r28
    35dc:	01 5c       	subi	r16, 0xC1	; 193
    35de:	1f 4f       	sbci	r17, 0xFF	; 255
    35e0:	fe 01       	movw	r30, r28
    35e2:	ed 5b       	subi	r30, 0xBD	; 189
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	60 81       	ld	r22, Z
    35e8:	71 81       	ldd	r23, Z+1	; 0x01
    35ea:	82 81       	ldd	r24, Z+2	; 0x02
    35ec:	93 81       	ldd	r25, Z+3	; 0x03
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	4a ef       	ldi	r20, 0xFA	; 250
    35f4:	54 e4       	ldi	r21, 0x44	; 68
    35f6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35fa:	dc 01       	movw	r26, r24
    35fc:	cb 01       	movw	r24, r22
    35fe:	f8 01       	movw	r30, r16
    3600:	80 83       	st	Z, r24
    3602:	91 83       	std	Z+1, r25	; 0x01
    3604:	a2 83       	std	Z+2, r26	; 0x02
    3606:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3608:	fe 01       	movw	r30, r28
    360a:	ff 96       	adiw	r30, 0x3f	; 63
    360c:	60 81       	ld	r22, Z
    360e:	71 81       	ldd	r23, Z+1	; 0x01
    3610:	82 81       	ldd	r24, Z+2	; 0x02
    3612:	93 81       	ldd	r25, Z+3	; 0x03
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 e8       	ldi	r20, 0x80	; 128
    361a:	5f e3       	ldi	r21, 0x3F	; 63
    361c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3620:	88 23       	and	r24, r24
    3622:	2c f4       	brge	.+10     	; 0x362e <LCD_displayCharacter+0x40e>
		__ticks = 1;
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	9e af       	std	Y+62, r25	; 0x3e
    362a:	8d af       	std	Y+61, r24	; 0x3d
    362c:	46 c0       	rjmp	.+140    	; 0x36ba <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    362e:	fe 01       	movw	r30, r28
    3630:	ff 96       	adiw	r30, 0x3f	; 63
    3632:	60 81       	ld	r22, Z
    3634:	71 81       	ldd	r23, Z+1	; 0x01
    3636:	82 81       	ldd	r24, Z+2	; 0x02
    3638:	93 81       	ldd	r25, Z+3	; 0x03
    363a:	20 e0       	ldi	r18, 0x00	; 0
    363c:	3f ef       	ldi	r19, 0xFF	; 255
    363e:	4f e7       	ldi	r20, 0x7F	; 127
    3640:	57 e4       	ldi	r21, 0x47	; 71
    3642:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3646:	18 16       	cp	r1, r24
    3648:	64 f5       	brge	.+88     	; 0x36a2 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    364a:	fe 01       	movw	r30, r28
    364c:	ed 5b       	subi	r30, 0xBD	; 189
    364e:	ff 4f       	sbci	r31, 0xFF	; 255
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	82 81       	ldd	r24, Z+2	; 0x02
    3656:	93 81       	ldd	r25, Z+3	; 0x03
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	30 e0       	ldi	r19, 0x00	; 0
    365c:	40 e2       	ldi	r20, 0x20	; 32
    365e:	51 e4       	ldi	r21, 0x41	; 65
    3660:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3664:	dc 01       	movw	r26, r24
    3666:	cb 01       	movw	r24, r22
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	9e af       	std	Y+62, r25	; 0x3e
    3676:	8d af       	std	Y+61, r24	; 0x3d
    3678:	0f c0       	rjmp	.+30     	; 0x3698 <LCD_displayCharacter+0x478>
    367a:	88 ec       	ldi	r24, 0xC8	; 200
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	9c af       	std	Y+60, r25	; 0x3c
    3680:	8b af       	std	Y+59, r24	; 0x3b
    3682:	8b ad       	ldd	r24, Y+59	; 0x3b
    3684:	9c ad       	ldd	r25, Y+60	; 0x3c
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_displayCharacter+0x466>
    368a:	9c af       	std	Y+60, r25	; 0x3c
    368c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    368e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3690:	9e ad       	ldd	r25, Y+62	; 0x3e
    3692:	01 97       	sbiw	r24, 0x01	; 1
    3694:	9e af       	std	Y+62, r25	; 0x3e
    3696:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3698:	8d ad       	ldd	r24, Y+61	; 0x3d
    369a:	9e ad       	ldd	r25, Y+62	; 0x3e
    369c:	00 97       	sbiw	r24, 0x00	; 0
    369e:	69 f7       	brne	.-38     	; 0x367a <LCD_displayCharacter+0x45a>
    36a0:	16 c0       	rjmp	.+44     	; 0x36ce <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36a2:	fe 01       	movw	r30, r28
    36a4:	ff 96       	adiw	r30, 0x3f	; 63
    36a6:	60 81       	ld	r22, Z
    36a8:	71 81       	ldd	r23, Z+1	; 0x01
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	93 81       	ldd	r25, Z+3	; 0x03
    36ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    36b2:	dc 01       	movw	r26, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	9e af       	std	Y+62, r25	; 0x3e
    36b8:	8d af       	std	Y+61, r24	; 0x3d
    36ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    36bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    36be:	9a af       	std	Y+58, r25	; 0x3a
    36c0:	89 af       	std	Y+57, r24	; 0x39
    36c2:	89 ad       	ldd	r24, Y+57	; 0x39
    36c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    36c6:	01 97       	sbiw	r24, 0x01	; 1
    36c8:	f1 f7       	brne	.-4      	; 0x36c6 <LCD_displayCharacter+0x4a6>
    36ca:	9a af       	std	Y+58, r25	; 0x3a
    36cc:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    36ce:	82 e0       	ldi	r24, 0x02	; 2
    36d0:	62 e0       	ldi	r22, 0x02	; 2
    36d2:	40 e0       	ldi	r20, 0x00	; 0
    36d4:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	a0 e8       	ldi	r26, 0x80	; 128
    36de:	bf e3       	ldi	r27, 0x3F	; 63
    36e0:	8d ab       	std	Y+53, r24	; 0x35
    36e2:	9e ab       	std	Y+54, r25	; 0x36
    36e4:	af ab       	std	Y+55, r26	; 0x37
    36e6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36e8:	6d a9       	ldd	r22, Y+53	; 0x35
    36ea:	7e a9       	ldd	r23, Y+54	; 0x36
    36ec:	8f a9       	ldd	r24, Y+55	; 0x37
    36ee:	98 ad       	ldd	r25, Y+56	; 0x38
    36f0:	20 e0       	ldi	r18, 0x00	; 0
    36f2:	30 e0       	ldi	r19, 0x00	; 0
    36f4:	4a ef       	ldi	r20, 0xFA	; 250
    36f6:	54 e4       	ldi	r21, 0x44	; 68
    36f8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22
    3700:	89 ab       	std	Y+49, r24	; 0x31
    3702:	9a ab       	std	Y+50, r25	; 0x32
    3704:	ab ab       	std	Y+51, r26	; 0x33
    3706:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3708:	69 a9       	ldd	r22, Y+49	; 0x31
    370a:	7a a9       	ldd	r23, Y+50	; 0x32
    370c:	8b a9       	ldd	r24, Y+51	; 0x33
    370e:	9c a9       	ldd	r25, Y+52	; 0x34
    3710:	20 e0       	ldi	r18, 0x00	; 0
    3712:	30 e0       	ldi	r19, 0x00	; 0
    3714:	40 e8       	ldi	r20, 0x80	; 128
    3716:	5f e3       	ldi	r21, 0x3F	; 63
    3718:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    371c:	88 23       	and	r24, r24
    371e:	2c f4       	brge	.+10     	; 0x372a <LCD_displayCharacter+0x50a>
		__ticks = 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	98 ab       	std	Y+48, r25	; 0x30
    3726:	8f a7       	std	Y+47, r24	; 0x2f
    3728:	3f c0       	rjmp	.+126    	; 0x37a8 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    372a:	69 a9       	ldd	r22, Y+49	; 0x31
    372c:	7a a9       	ldd	r23, Y+50	; 0x32
    372e:	8b a9       	ldd	r24, Y+51	; 0x33
    3730:	9c a9       	ldd	r25, Y+52	; 0x34
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	3f ef       	ldi	r19, 0xFF	; 255
    3736:	4f e7       	ldi	r20, 0x7F	; 127
    3738:	57 e4       	ldi	r21, 0x47	; 71
    373a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    373e:	18 16       	cp	r1, r24
    3740:	4c f5       	brge	.+82     	; 0x3794 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3742:	6d a9       	ldd	r22, Y+53	; 0x35
    3744:	7e a9       	ldd	r23, Y+54	; 0x36
    3746:	8f a9       	ldd	r24, Y+55	; 0x37
    3748:	98 ad       	ldd	r25, Y+56	; 0x38
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e2       	ldi	r20, 0x20	; 32
    3750:	51 e4       	ldi	r21, 0x41	; 65
    3752:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3756:	dc 01       	movw	r26, r24
    3758:	cb 01       	movw	r24, r22
    375a:	bc 01       	movw	r22, r24
    375c:	cd 01       	movw	r24, r26
    375e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3762:	dc 01       	movw	r26, r24
    3764:	cb 01       	movw	r24, r22
    3766:	98 ab       	std	Y+48, r25	; 0x30
    3768:	8f a7       	std	Y+47, r24	; 0x2f
    376a:	0f c0       	rjmp	.+30     	; 0x378a <LCD_displayCharacter+0x56a>
    376c:	88 ec       	ldi	r24, 0xC8	; 200
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	9e a7       	std	Y+46, r25	; 0x2e
    3772:	8d a7       	std	Y+45, r24	; 0x2d
    3774:	8d a5       	ldd	r24, Y+45	; 0x2d
    3776:	9e a5       	ldd	r25, Y+46	; 0x2e
    3778:	01 97       	sbiw	r24, 0x01	; 1
    377a:	f1 f7       	brne	.-4      	; 0x3778 <LCD_displayCharacter+0x558>
    377c:	9e a7       	std	Y+46, r25	; 0x2e
    377e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3780:	8f a5       	ldd	r24, Y+47	; 0x2f
    3782:	98 a9       	ldd	r25, Y+48	; 0x30
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	98 ab       	std	Y+48, r25	; 0x30
    3788:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    378a:	8f a5       	ldd	r24, Y+47	; 0x2f
    378c:	98 a9       	ldd	r25, Y+48	; 0x30
    378e:	00 97       	sbiw	r24, 0x00	; 0
    3790:	69 f7       	brne	.-38     	; 0x376c <LCD_displayCharacter+0x54c>
    3792:	14 c0       	rjmp	.+40     	; 0x37bc <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3794:	69 a9       	ldd	r22, Y+49	; 0x31
    3796:	7a a9       	ldd	r23, Y+50	; 0x32
    3798:	8b a9       	ldd	r24, Y+51	; 0x33
    379a:	9c a9       	ldd	r25, Y+52	; 0x34
    379c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	98 ab       	std	Y+48, r25	; 0x30
    37a6:	8f a7       	std	Y+47, r24	; 0x2f
    37a8:	8f a5       	ldd	r24, Y+47	; 0x2f
    37aa:	98 a9       	ldd	r25, Y+48	; 0x30
    37ac:	9c a7       	std	Y+44, r25	; 0x2c
    37ae:	8b a7       	std	Y+43, r24	; 0x2b
    37b0:	8b a5       	ldd	r24, Y+43	; 0x2b
    37b2:	9c a5       	ldd	r25, Y+44	; 0x2c
    37b4:	01 97       	sbiw	r24, 0x01	; 1
    37b6:	f1 f7       	brne	.-4      	; 0x37b4 <LCD_displayCharacter+0x594>
    37b8:	9c a7       	std	Y+44, r25	; 0x2c
    37ba:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    37bc:	82 e0       	ldi	r24, 0x02	; 2
    37be:	62 e0       	ldi	r22, 0x02	; 2
    37c0:	41 e0       	ldi	r20, 0x01	; 1
    37c2:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	a0 e8       	ldi	r26, 0x80	; 128
    37cc:	bf e3       	ldi	r27, 0x3F	; 63
    37ce:	8f a3       	std	Y+39, r24	; 0x27
    37d0:	98 a7       	std	Y+40, r25	; 0x28
    37d2:	a9 a7       	std	Y+41, r26	; 0x29
    37d4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37d6:	6f a1       	ldd	r22, Y+39	; 0x27
    37d8:	78 a5       	ldd	r23, Y+40	; 0x28
    37da:	89 a5       	ldd	r24, Y+41	; 0x29
    37dc:	9a a5       	ldd	r25, Y+42	; 0x2a
    37de:	20 e0       	ldi	r18, 0x00	; 0
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	4a ef       	ldi	r20, 0xFA	; 250
    37e4:	54 e4       	ldi	r21, 0x44	; 68
    37e6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37ea:	dc 01       	movw	r26, r24
    37ec:	cb 01       	movw	r24, r22
    37ee:	8b a3       	std	Y+35, r24	; 0x23
    37f0:	9c a3       	std	Y+36, r25	; 0x24
    37f2:	ad a3       	std	Y+37, r26	; 0x25
    37f4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    37f6:	6b a1       	ldd	r22, Y+35	; 0x23
    37f8:	7c a1       	ldd	r23, Y+36	; 0x24
    37fa:	8d a1       	ldd	r24, Y+37	; 0x25
    37fc:	9e a1       	ldd	r25, Y+38	; 0x26
    37fe:	20 e0       	ldi	r18, 0x00	; 0
    3800:	30 e0       	ldi	r19, 0x00	; 0
    3802:	40 e8       	ldi	r20, 0x80	; 128
    3804:	5f e3       	ldi	r21, 0x3F	; 63
    3806:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    380a:	88 23       	and	r24, r24
    380c:	2c f4       	brge	.+10     	; 0x3818 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    380e:	81 e0       	ldi	r24, 0x01	; 1
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	9a a3       	std	Y+34, r25	; 0x22
    3814:	89 a3       	std	Y+33, r24	; 0x21
    3816:	3f c0       	rjmp	.+126    	; 0x3896 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    3818:	6b a1       	ldd	r22, Y+35	; 0x23
    381a:	7c a1       	ldd	r23, Y+36	; 0x24
    381c:	8d a1       	ldd	r24, Y+37	; 0x25
    381e:	9e a1       	ldd	r25, Y+38	; 0x26
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	3f ef       	ldi	r19, 0xFF	; 255
    3824:	4f e7       	ldi	r20, 0x7F	; 127
    3826:	57 e4       	ldi	r21, 0x47	; 71
    3828:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    382c:	18 16       	cp	r1, r24
    382e:	4c f5       	brge	.+82     	; 0x3882 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3830:	6f a1       	ldd	r22, Y+39	; 0x27
    3832:	78 a5       	ldd	r23, Y+40	; 0x28
    3834:	89 a5       	ldd	r24, Y+41	; 0x29
    3836:	9a a5       	ldd	r25, Y+42	; 0x2a
    3838:	20 e0       	ldi	r18, 0x00	; 0
    383a:	30 e0       	ldi	r19, 0x00	; 0
    383c:	40 e2       	ldi	r20, 0x20	; 32
    383e:	51 e4       	ldi	r21, 0x41	; 65
    3840:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3844:	dc 01       	movw	r26, r24
    3846:	cb 01       	movw	r24, r22
    3848:	bc 01       	movw	r22, r24
    384a:	cd 01       	movw	r24, r26
    384c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3850:	dc 01       	movw	r26, r24
    3852:	cb 01       	movw	r24, r22
    3854:	9a a3       	std	Y+34, r25	; 0x22
    3856:	89 a3       	std	Y+33, r24	; 0x21
    3858:	0f c0       	rjmp	.+30     	; 0x3878 <LCD_displayCharacter+0x658>
    385a:	88 ec       	ldi	r24, 0xC8	; 200
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	98 a3       	std	Y+32, r25	; 0x20
    3860:	8f 8f       	std	Y+31, r24	; 0x1f
    3862:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3864:	98 a1       	ldd	r25, Y+32	; 0x20
    3866:	01 97       	sbiw	r24, 0x01	; 1
    3868:	f1 f7       	brne	.-4      	; 0x3866 <LCD_displayCharacter+0x646>
    386a:	98 a3       	std	Y+32, r25	; 0x20
    386c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    386e:	89 a1       	ldd	r24, Y+33	; 0x21
    3870:	9a a1       	ldd	r25, Y+34	; 0x22
    3872:	01 97       	sbiw	r24, 0x01	; 1
    3874:	9a a3       	std	Y+34, r25	; 0x22
    3876:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3878:	89 a1       	ldd	r24, Y+33	; 0x21
    387a:	9a a1       	ldd	r25, Y+34	; 0x22
    387c:	00 97       	sbiw	r24, 0x00	; 0
    387e:	69 f7       	brne	.-38     	; 0x385a <LCD_displayCharacter+0x63a>
    3880:	14 c0       	rjmp	.+40     	; 0x38aa <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3882:	6b a1       	ldd	r22, Y+35	; 0x23
    3884:	7c a1       	ldd	r23, Y+36	; 0x24
    3886:	8d a1       	ldd	r24, Y+37	; 0x25
    3888:	9e a1       	ldd	r25, Y+38	; 0x26
    388a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	9a a3       	std	Y+34, r25	; 0x22
    3894:	89 a3       	std	Y+33, r24	; 0x21
    3896:	89 a1       	ldd	r24, Y+33	; 0x21
    3898:	9a a1       	ldd	r25, Y+34	; 0x22
    389a:	9e 8f       	std	Y+30, r25	; 0x1e
    389c:	8d 8f       	std	Y+29, r24	; 0x1d
    389e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    38a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    38a2:	01 97       	sbiw	r24, 0x01	; 1
    38a4:	f1 f7       	brne	.-4      	; 0x38a2 <LCD_displayCharacter+0x682>
    38a6:	9e 8f       	std	Y+30, r25	; 0x1e
    38a8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    38aa:	fe 01       	movw	r30, r28
    38ac:	ed 59       	subi	r30, 0x9D	; 157
    38ae:	ff 4f       	sbci	r31, 0xFF	; 255
    38b0:	80 81       	ld	r24, Z
    38b2:	98 2f       	mov	r25, r24
    38b4:	91 70       	andi	r25, 0x01	; 1
    38b6:	82 e0       	ldi	r24, 0x02	; 2
    38b8:	63 e0       	ldi	r22, 0x03	; 3
    38ba:	49 2f       	mov	r20, r25
    38bc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    38c0:	fe 01       	movw	r30, r28
    38c2:	ed 59       	subi	r30, 0x9D	; 157
    38c4:	ff 4f       	sbci	r31, 0xFF	; 255
    38c6:	80 81       	ld	r24, Z
    38c8:	88 2f       	mov	r24, r24
    38ca:	90 e0       	ldi	r25, 0x00	; 0
    38cc:	82 70       	andi	r24, 0x02	; 2
    38ce:	90 70       	andi	r25, 0x00	; 0
    38d0:	95 95       	asr	r25
    38d2:	87 95       	ror	r24
    38d4:	98 2f       	mov	r25, r24
    38d6:	82 e0       	ldi	r24, 0x02	; 2
    38d8:	64 e0       	ldi	r22, 0x04	; 4
    38da:	49 2f       	mov	r20, r25
    38dc:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    38e0:	fe 01       	movw	r30, r28
    38e2:	ed 59       	subi	r30, 0x9D	; 157
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	88 2f       	mov	r24, r24
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	84 70       	andi	r24, 0x04	; 4
    38ee:	90 70       	andi	r25, 0x00	; 0
    38f0:	95 95       	asr	r25
    38f2:	87 95       	ror	r24
    38f4:	95 95       	asr	r25
    38f6:	87 95       	ror	r24
    38f8:	98 2f       	mov	r25, r24
    38fa:	82 e0       	ldi	r24, 0x02	; 2
    38fc:	65 e0       	ldi	r22, 0x05	; 5
    38fe:	49 2f       	mov	r20, r25
    3900:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    3904:	fe 01       	movw	r30, r28
    3906:	ed 59       	subi	r30, 0x9D	; 157
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	80 81       	ld	r24, Z
    390c:	88 2f       	mov	r24, r24
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	88 70       	andi	r24, 0x08	; 8
    3912:	90 70       	andi	r25, 0x00	; 0
    3914:	95 95       	asr	r25
    3916:	87 95       	ror	r24
    3918:	95 95       	asr	r25
    391a:	87 95       	ror	r24
    391c:	95 95       	asr	r25
    391e:	87 95       	ror	r24
    3920:	98 2f       	mov	r25, r24
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	66 e0       	ldi	r22, 0x06	; 6
    3926:	49 2f       	mov	r20, r25
    3928:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	a0 e8       	ldi	r26, 0x80	; 128
    3932:	bf e3       	ldi	r27, 0x3F	; 63
    3934:	89 8f       	std	Y+25, r24	; 0x19
    3936:	9a 8f       	std	Y+26, r25	; 0x1a
    3938:	ab 8f       	std	Y+27, r26	; 0x1b
    393a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    393c:	69 8d       	ldd	r22, Y+25	; 0x19
    393e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3940:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3942:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3944:	20 e0       	ldi	r18, 0x00	; 0
    3946:	30 e0       	ldi	r19, 0x00	; 0
    3948:	4a ef       	ldi	r20, 0xFA	; 250
    394a:	54 e4       	ldi	r21, 0x44	; 68
    394c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	8d 8b       	std	Y+21, r24	; 0x15
    3956:	9e 8b       	std	Y+22, r25	; 0x16
    3958:	af 8b       	std	Y+23, r26	; 0x17
    395a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    395c:	6d 89       	ldd	r22, Y+21	; 0x15
    395e:	7e 89       	ldd	r23, Y+22	; 0x16
    3960:	8f 89       	ldd	r24, Y+23	; 0x17
    3962:	98 8d       	ldd	r25, Y+24	; 0x18
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e8       	ldi	r20, 0x80	; 128
    396a:	5f e3       	ldi	r21, 0x3F	; 63
    396c:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3970:	88 23       	and	r24, r24
    3972:	2c f4       	brge	.+10     	; 0x397e <LCD_displayCharacter+0x75e>
		__ticks = 1;
    3974:	81 e0       	ldi	r24, 0x01	; 1
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	9c 8b       	std	Y+20, r25	; 0x14
    397a:	8b 8b       	std	Y+19, r24	; 0x13
    397c:	3f c0       	rjmp	.+126    	; 0x39fc <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    397e:	6d 89       	ldd	r22, Y+21	; 0x15
    3980:	7e 89       	ldd	r23, Y+22	; 0x16
    3982:	8f 89       	ldd	r24, Y+23	; 0x17
    3984:	98 8d       	ldd	r25, Y+24	; 0x18
    3986:	20 e0       	ldi	r18, 0x00	; 0
    3988:	3f ef       	ldi	r19, 0xFF	; 255
    398a:	4f e7       	ldi	r20, 0x7F	; 127
    398c:	57 e4       	ldi	r21, 0x47	; 71
    398e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3992:	18 16       	cp	r1, r24
    3994:	4c f5       	brge	.+82     	; 0x39e8 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3996:	69 8d       	ldd	r22, Y+25	; 0x19
    3998:	7a 8d       	ldd	r23, Y+26	; 0x1a
    399a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    399c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    399e:	20 e0       	ldi	r18, 0x00	; 0
    39a0:	30 e0       	ldi	r19, 0x00	; 0
    39a2:	40 e2       	ldi	r20, 0x20	; 32
    39a4:	51 e4       	ldi	r21, 0x41	; 65
    39a6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39aa:	dc 01       	movw	r26, r24
    39ac:	cb 01       	movw	r24, r22
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	9c 8b       	std	Y+20, r25	; 0x14
    39bc:	8b 8b       	std	Y+19, r24	; 0x13
    39be:	0f c0       	rjmp	.+30     	; 0x39de <LCD_displayCharacter+0x7be>
    39c0:	88 ec       	ldi	r24, 0xC8	; 200
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9a 8b       	std	Y+18, r25	; 0x12
    39c6:	89 8b       	std	Y+17, r24	; 0x11
    39c8:	89 89       	ldd	r24, Y+17	; 0x11
    39ca:	9a 89       	ldd	r25, Y+18	; 0x12
    39cc:	01 97       	sbiw	r24, 0x01	; 1
    39ce:	f1 f7       	brne	.-4      	; 0x39cc <LCD_displayCharacter+0x7ac>
    39d0:	9a 8b       	std	Y+18, r25	; 0x12
    39d2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39d4:	8b 89       	ldd	r24, Y+19	; 0x13
    39d6:	9c 89       	ldd	r25, Y+20	; 0x14
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	9c 8b       	std	Y+20, r25	; 0x14
    39dc:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39de:	8b 89       	ldd	r24, Y+19	; 0x13
    39e0:	9c 89       	ldd	r25, Y+20	; 0x14
    39e2:	00 97       	sbiw	r24, 0x00	; 0
    39e4:	69 f7       	brne	.-38     	; 0x39c0 <LCD_displayCharacter+0x7a0>
    39e6:	14 c0       	rjmp	.+40     	; 0x3a10 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39e8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ea:	7e 89       	ldd	r23, Y+22	; 0x16
    39ec:	8f 89       	ldd	r24, Y+23	; 0x17
    39ee:	98 8d       	ldd	r25, Y+24	; 0x18
    39f0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9c 8b       	std	Y+20, r25	; 0x14
    39fa:	8b 8b       	std	Y+19, r24	; 0x13
    39fc:	8b 89       	ldd	r24, Y+19	; 0x13
    39fe:	9c 89       	ldd	r25, Y+20	; 0x14
    3a00:	98 8b       	std	Y+16, r25	; 0x10
    3a02:	8f 87       	std	Y+15, r24	; 0x0f
    3a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a06:	98 89       	ldd	r25, Y+16	; 0x10
    3a08:	01 97       	sbiw	r24, 0x01	; 1
    3a0a:	f1 f7       	brne	.-4      	; 0x3a08 <LCD_displayCharacter+0x7e8>
    3a0c:	98 8b       	std	Y+16, r25	; 0x10
    3a0e:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3a10:	82 e0       	ldi	r24, 0x02	; 2
    3a12:	62 e0       	ldi	r22, 0x02	; 2
    3a14:	40 e0       	ldi	r20, 0x00	; 0
    3a16:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <GPIO_writePin>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	90 e0       	ldi	r25, 0x00	; 0
    3a1e:	a0 e8       	ldi	r26, 0x80	; 128
    3a20:	bf e3       	ldi	r27, 0x3F	; 63
    3a22:	8b 87       	std	Y+11, r24	; 0x0b
    3a24:	9c 87       	std	Y+12, r25	; 0x0c
    3a26:	ad 87       	std	Y+13, r26	; 0x0d
    3a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a32:	20 e0       	ldi	r18, 0x00	; 0
    3a34:	30 e0       	ldi	r19, 0x00	; 0
    3a36:	4a ef       	ldi	r20, 0xFA	; 250
    3a38:	54 e4       	ldi	r21, 0x44	; 68
    3a3a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a3e:	dc 01       	movw	r26, r24
    3a40:	cb 01       	movw	r24, r22
    3a42:	8f 83       	std	Y+7, r24	; 0x07
    3a44:	98 87       	std	Y+8, r25	; 0x08
    3a46:	a9 87       	std	Y+9, r26	; 0x09
    3a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a4c:	78 85       	ldd	r23, Y+8	; 0x08
    3a4e:	89 85       	ldd	r24, Y+9	; 0x09
    3a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e8       	ldi	r20, 0x80	; 128
    3a58:	5f e3       	ldi	r21, 0x3F	; 63
    3a5a:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    3a5e:	88 23       	and	r24, r24
    3a60:	2c f4       	brge	.+10     	; 0x3a6c <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	9e 83       	std	Y+6, r25	; 0x06
    3a68:	8d 83       	std	Y+5, r24	; 0x05
    3a6a:	3f c0       	rjmp	.+126    	; 0x3aea <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a6e:	78 85       	ldd	r23, Y+8	; 0x08
    3a70:	89 85       	ldd	r24, Y+9	; 0x09
    3a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a74:	20 e0       	ldi	r18, 0x00	; 0
    3a76:	3f ef       	ldi	r19, 0xFF	; 255
    3a78:	4f e7       	ldi	r20, 0x7F	; 127
    3a7a:	57 e4       	ldi	r21, 0x47	; 71
    3a7c:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    3a80:	18 16       	cp	r1, r24
    3a82:	4c f5       	brge	.+82     	; 0x3ad6 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a8c:	20 e0       	ldi	r18, 0x00	; 0
    3a8e:	30 e0       	ldi	r19, 0x00	; 0
    3a90:	40 e2       	ldi	r20, 0x20	; 32
    3a92:	51 e4       	ldi	r21, 0x41	; 65
    3a94:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3a98:	dc 01       	movw	r26, r24
    3a9a:	cb 01       	movw	r24, r22
    3a9c:	bc 01       	movw	r22, r24
    3a9e:	cd 01       	movw	r24, r26
    3aa0:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3aa4:	dc 01       	movw	r26, r24
    3aa6:	cb 01       	movw	r24, r22
    3aa8:	9e 83       	std	Y+6, r25	; 0x06
    3aaa:	8d 83       	std	Y+5, r24	; 0x05
    3aac:	0f c0       	rjmp	.+30     	; 0x3acc <LCD_displayCharacter+0x8ac>
    3aae:	88 ec       	ldi	r24, 0xC8	; 200
    3ab0:	90 e0       	ldi	r25, 0x00	; 0
    3ab2:	9c 83       	std	Y+4, r25	; 0x04
    3ab4:	8b 83       	std	Y+3, r24	; 0x03
    3ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    3aba:	01 97       	sbiw	r24, 0x01	; 1
    3abc:	f1 f7       	brne	.-4      	; 0x3aba <LCD_displayCharacter+0x89a>
    3abe:	9c 83       	std	Y+4, r25	; 0x04
    3ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	9e 83       	std	Y+6, r25	; 0x06
    3aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3acc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ace:	9e 81       	ldd	r25, Y+6	; 0x06
    3ad0:	00 97       	sbiw	r24, 0x00	; 0
    3ad2:	69 f7       	brne	.-38     	; 0x3aae <LCD_displayCharacter+0x88e>
    3ad4:	14 c0       	rjmp	.+40     	; 0x3afe <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ad8:	78 85       	ldd	r23, Y+8	; 0x08
    3ada:	89 85       	ldd	r24, Y+9	; 0x09
    3adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ade:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	cb 01       	movw	r24, r22
    3ae6:	9e 83       	std	Y+6, r25	; 0x06
    3ae8:	8d 83       	std	Y+5, r24	; 0x05
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	9e 81       	ldd	r25, Y+6	; 0x06
    3aee:	9a 83       	std	Y+2, r25	; 0x02
    3af0:	89 83       	std	Y+1, r24	; 0x01
    3af2:	89 81       	ldd	r24, Y+1	; 0x01
    3af4:	9a 81       	ldd	r25, Y+2	; 0x02
    3af6:	01 97       	sbiw	r24, 0x01	; 1
    3af8:	f1 f7       	brne	.-4      	; 0x3af6 <LCD_displayCharacter+0x8d6>
    3afa:	9a 83       	std	Y+2, r25	; 0x02
    3afc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    3afe:	cd 59       	subi	r28, 0x9D	; 157
    3b00:	df 4f       	sbci	r29, 0xFF	; 255
    3b02:	0f b6       	in	r0, 0x3f	; 63
    3b04:	f8 94       	cli
    3b06:	de bf       	out	0x3e, r29	; 62
    3b08:	0f be       	out	0x3f, r0	; 63
    3b0a:	cd bf       	out	0x3d, r28	; 61
    3b0c:	cf 91       	pop	r28
    3b0e:	df 91       	pop	r29
    3b10:	1f 91       	pop	r17
    3b12:	0f 91       	pop	r16
    3b14:	08 95       	ret

00003b16 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	00 d0       	rcall	.+0      	; 0x3b1c <LCD_displayString+0x6>
    3b1c:	0f 92       	push	r0
    3b1e:	cd b7       	in	r28, 0x3d	; 61
    3b20:	de b7       	in	r29, 0x3e	; 62
    3b22:	9b 83       	std	Y+3, r25	; 0x03
    3b24:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3b26:	19 82       	std	Y+1, r1	; 0x01
    3b28:	0e c0       	rjmp	.+28     	; 0x3b46 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    3b2a:	89 81       	ldd	r24, Y+1	; 0x01
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	30 e0       	ldi	r19, 0x00	; 0
    3b30:	8a 81       	ldd	r24, Y+2	; 0x02
    3b32:	9b 81       	ldd	r25, Y+3	; 0x03
    3b34:	fc 01       	movw	r30, r24
    3b36:	e2 0f       	add	r30, r18
    3b38:	f3 1f       	adc	r31, r19
    3b3a:	80 81       	ld	r24, Z
    3b3c:	0e 94 10 19 	call	0x3220	; 0x3220 <LCD_displayCharacter>
		i++;
    3b40:	89 81       	ldd	r24, Y+1	; 0x01
    3b42:	8f 5f       	subi	r24, 0xFF	; 255
    3b44:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    3b46:	89 81       	ldd	r24, Y+1	; 0x01
    3b48:	28 2f       	mov	r18, r24
    3b4a:	30 e0       	ldi	r19, 0x00	; 0
    3b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4e:	9b 81       	ldd	r25, Y+3	; 0x03
    3b50:	fc 01       	movw	r30, r24
    3b52:	e2 0f       	add	r30, r18
    3b54:	f3 1f       	adc	r31, r19
    3b56:	80 81       	ld	r24, Z
    3b58:	88 23       	and	r24, r24
    3b5a:	39 f7       	brne	.-50     	; 0x3b2a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	cf 91       	pop	r28
    3b64:	df 91       	pop	r29
    3b66:	08 95       	ret

00003b68 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    3b68:	df 93       	push	r29
    3b6a:	cf 93       	push	r28
    3b6c:	00 d0       	rcall	.+0      	; 0x3b6e <LCD_moveCursor+0x6>
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <LCD_moveCursor+0x8>
    3b70:	0f 92       	push	r0
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	8a 83       	std	Y+2, r24	; 0x02
    3b78:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b7c:	28 2f       	mov	r18, r24
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	3d 83       	std	Y+5, r19	; 0x05
    3b82:	2c 83       	std	Y+4, r18	; 0x04
    3b84:	8c 81       	ldd	r24, Y+4	; 0x04
    3b86:	9d 81       	ldd	r25, Y+5	; 0x05
    3b88:	81 30       	cpi	r24, 0x01	; 1
    3b8a:	91 05       	cpc	r25, r1
    3b8c:	c1 f0       	breq	.+48     	; 0x3bbe <LCD_moveCursor+0x56>
    3b8e:	2c 81       	ldd	r18, Y+4	; 0x04
    3b90:	3d 81       	ldd	r19, Y+5	; 0x05
    3b92:	22 30       	cpi	r18, 0x02	; 2
    3b94:	31 05       	cpc	r19, r1
    3b96:	2c f4       	brge	.+10     	; 0x3ba2 <LCD_moveCursor+0x3a>
    3b98:	8c 81       	ldd	r24, Y+4	; 0x04
    3b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    3b9c:	00 97       	sbiw	r24, 0x00	; 0
    3b9e:	61 f0       	breq	.+24     	; 0x3bb8 <LCD_moveCursor+0x50>
    3ba0:	19 c0       	rjmp	.+50     	; 0x3bd4 <LCD_moveCursor+0x6c>
    3ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    3ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    3ba6:	22 30       	cpi	r18, 0x02	; 2
    3ba8:	31 05       	cpc	r19, r1
    3baa:	69 f0       	breq	.+26     	; 0x3bc6 <LCD_moveCursor+0x5e>
    3bac:	8c 81       	ldd	r24, Y+4	; 0x04
    3bae:	9d 81       	ldd	r25, Y+5	; 0x05
    3bb0:	83 30       	cpi	r24, 0x03	; 3
    3bb2:	91 05       	cpc	r25, r1
    3bb4:	61 f0       	breq	.+24     	; 0x3bce <LCD_moveCursor+0x66>
    3bb6:	0e c0       	rjmp	.+28     	; 0x3bd4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    3bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3bba:	89 83       	std	Y+1, r24	; 0x01
    3bbc:	0b c0       	rjmp	.+22     	; 0x3bd4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    3bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc0:	80 5c       	subi	r24, 0xC0	; 192
    3bc2:	89 83       	std	Y+1, r24	; 0x01
    3bc4:	07 c0       	rjmp	.+14     	; 0x3bd4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    3bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    3bc8:	80 5f       	subi	r24, 0xF0	; 240
    3bca:	89 83       	std	Y+1, r24	; 0x01
    3bcc:	03 c0       	rjmp	.+6      	; 0x3bd4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    3bce:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd0:	80 5b       	subi	r24, 0xB0	; 176
    3bd2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	80 68       	ori	r24, 0x80	; 128
    3bd8:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
}
    3bdc:	0f 90       	pop	r0
    3bde:	0f 90       	pop	r0
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	00 d0       	rcall	.+0      	; 0x3bf2 <LCD_displayStringRowColumn+0x6>
    3bf2:	00 d0       	rcall	.+0      	; 0x3bf4 <LCD_displayStringRowColumn+0x8>
    3bf4:	cd b7       	in	r28, 0x3d	; 61
    3bf6:	de b7       	in	r29, 0x3e	; 62
    3bf8:	89 83       	std	Y+1, r24	; 0x01
    3bfa:	6a 83       	std	Y+2, r22	; 0x02
    3bfc:	5c 83       	std	Y+4, r21	; 0x04
    3bfe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    3c00:	89 81       	ldd	r24, Y+1	; 0x01
    3c02:	6a 81       	ldd	r22, Y+2	; 0x02
    3c04:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3c08:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0c:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <LCD_displayString>
}
    3c10:	0f 90       	pop	r0
    3c12:	0f 90       	pop	r0
    3c14:	0f 90       	pop	r0
    3c16:	0f 90       	pop	r0
    3c18:	cf 91       	pop	r28
    3c1a:	df 91       	pop	r29
    3c1c:	08 95       	ret

00003c1e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	cd b7       	in	r28, 0x3d	; 61
    3c24:	de b7       	in	r29, 0x3e	; 62
    3c26:	62 97       	sbiw	r28, 0x12	; 18
    3c28:	0f b6       	in	r0, 0x3f	; 63
    3c2a:	f8 94       	cli
    3c2c:	de bf       	out	0x3e, r29	; 62
    3c2e:	0f be       	out	0x3f, r0	; 63
    3c30:	cd bf       	out	0x3d, r28	; 61
    3c32:	9a 8b       	std	Y+18, r25	; 0x12
    3c34:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3c36:	89 89       	ldd	r24, Y+17	; 0x11
    3c38:	9a 89       	ldd	r25, Y+18	; 0x12
    3c3a:	9e 01       	movw	r18, r28
    3c3c:	2f 5f       	subi	r18, 0xFF	; 255
    3c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c40:	b9 01       	movw	r22, r18
    3c42:	4a e0       	ldi	r20, 0x0A	; 10
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	0e 94 c2 1e 	call	0x3d84	; 0x3d84 <itoa>
   LCD_displayString(buff); /* Display the string */
    3c4a:	ce 01       	movw	r24, r28
    3c4c:	01 96       	adiw	r24, 0x01	; 1
    3c4e:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <LCD_displayString>
}
    3c52:	62 96       	adiw	r28, 0x12	; 18
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	f8 94       	cli
    3c58:	de bf       	out	0x3e, r29	; 62
    3c5a:	0f be       	out	0x3f, r0	; 63
    3c5c:	cd bf       	out	0x3d, r28	; 61
    3c5e:	cf 91       	pop	r28
    3c60:	df 91       	pop	r29
    3c62:	08 95       	ret

00003c64 <LCD_floatToString>:
/*
 * Description :
 * Display the required float value on the screen
 */
void LCD_floatToString(float32 data)
{
    3c64:	0f 93       	push	r16
    3c66:	1f 93       	push	r17
    3c68:	df 93       	push	r29
    3c6a:	cf 93       	push	r28
    3c6c:	cd b7       	in	r28, 0x3d	; 61
    3c6e:	de b7       	in	r29, 0x3e	; 62
    3c70:	64 97       	sbiw	r28, 0x14	; 20
    3c72:	0f b6       	in	r0, 0x3f	; 63
    3c74:	f8 94       	cli
    3c76:	de bf       	out	0x3e, r29	; 62
    3c78:	0f be       	out	0x3f, r0	; 63
    3c7a:	cd bf       	out	0x3d, r28	; 61
    3c7c:	69 8b       	std	Y+17, r22	; 0x11
    3c7e:	7a 8b       	std	Y+18, r23	; 0x12
    3c80:	8b 8b       	std	Y+19, r24	; 0x13
    3c82:	9c 8b       	std	Y+20, r25	; 0x14
   sint8 buff[16]; /* String to hold the ascii result */
   dtostrf(data,5,3,buff);
    3c84:	89 89       	ldd	r24, Y+17	; 0x11
    3c86:	9a 89       	ldd	r25, Y+18	; 0x12
    3c88:	ab 89       	ldd	r26, Y+19	; 0x13
    3c8a:	bc 89       	ldd	r27, Y+20	; 0x14
    3c8c:	bc 01       	movw	r22, r24
    3c8e:	cd 01       	movw	r24, r26
    3c90:	45 e0       	ldi	r20, 0x05	; 5
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	23 e0       	ldi	r18, 0x03	; 3
    3c96:	30 e0       	ldi	r19, 0x00	; 0
    3c98:	fe 01       	movw	r30, r28
    3c9a:	31 96       	adiw	r30, 0x01	; 1
    3c9c:	8f 01       	movw	r16, r30
    3c9e:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <dtostrf>
   LCD_displayString(buff); /* Display the string */
    3ca2:	ce 01       	movw	r24, r28
    3ca4:	01 96       	adiw	r24, 0x01	; 1
    3ca6:	0e 94 8b 1d 	call	0x3b16	; 0x3b16 <LCD_displayString>
}
    3caa:	64 96       	adiw	r28, 0x14	; 20
    3cac:	0f b6       	in	r0, 0x3f	; 63
    3cae:	f8 94       	cli
    3cb0:	de bf       	out	0x3e, r29	; 62
    3cb2:	0f be       	out	0x3f, r0	; 63
    3cb4:	cd bf       	out	0x3d, r28	; 61
    3cb6:	cf 91       	pop	r28
    3cb8:	df 91       	pop	r29
    3cba:	1f 91       	pop	r17
    3cbc:	0f 91       	pop	r16
    3cbe:	08 95       	ret

00003cc0 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3cc0:	df 93       	push	r29
    3cc2:	cf 93       	push	r28
    3cc4:	cd b7       	in	r28, 0x3d	; 61
    3cc6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	0e 94 95 14 	call	0x292a	; 0x292a <LCD_sendCommand>
}
    3cce:	cf 91       	pop	r28
    3cd0:	df 91       	pop	r29
    3cd2:	08 95       	ret

00003cd4 <__prologue_saves__>:
    3cd4:	2f 92       	push	r2
    3cd6:	3f 92       	push	r3
    3cd8:	4f 92       	push	r4
    3cda:	5f 92       	push	r5
    3cdc:	6f 92       	push	r6
    3cde:	7f 92       	push	r7
    3ce0:	8f 92       	push	r8
    3ce2:	9f 92       	push	r9
    3ce4:	af 92       	push	r10
    3ce6:	bf 92       	push	r11
    3ce8:	cf 92       	push	r12
    3cea:	df 92       	push	r13
    3cec:	ef 92       	push	r14
    3cee:	ff 92       	push	r15
    3cf0:	0f 93       	push	r16
    3cf2:	1f 93       	push	r17
    3cf4:	cf 93       	push	r28
    3cf6:	df 93       	push	r29
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	ca 1b       	sub	r28, r26
    3cfe:	db 0b       	sbc	r29, r27
    3d00:	0f b6       	in	r0, 0x3f	; 63
    3d02:	f8 94       	cli
    3d04:	de bf       	out	0x3e, r29	; 62
    3d06:	0f be       	out	0x3f, r0	; 63
    3d08:	cd bf       	out	0x3d, r28	; 61
    3d0a:	09 94       	ijmp

00003d0c <__epilogue_restores__>:
    3d0c:	2a 88       	ldd	r2, Y+18	; 0x12
    3d0e:	39 88       	ldd	r3, Y+17	; 0x11
    3d10:	48 88       	ldd	r4, Y+16	; 0x10
    3d12:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d14:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d16:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d18:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d1e:	b9 84       	ldd	r11, Y+9	; 0x09
    3d20:	c8 84       	ldd	r12, Y+8	; 0x08
    3d22:	df 80       	ldd	r13, Y+7	; 0x07
    3d24:	ee 80       	ldd	r14, Y+6	; 0x06
    3d26:	fd 80       	ldd	r15, Y+5	; 0x05
    3d28:	0c 81       	ldd	r16, Y+4	; 0x04
    3d2a:	1b 81       	ldd	r17, Y+3	; 0x03
    3d2c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d2e:	b9 81       	ldd	r27, Y+1	; 0x01
    3d30:	ce 0f       	add	r28, r30
    3d32:	d1 1d       	adc	r29, r1
    3d34:	0f b6       	in	r0, 0x3f	; 63
    3d36:	f8 94       	cli
    3d38:	de bf       	out	0x3e, r29	; 62
    3d3a:	0f be       	out	0x3f, r0	; 63
    3d3c:	cd bf       	out	0x3d, r28	; 61
    3d3e:	ed 01       	movw	r28, r26
    3d40:	08 95       	ret

00003d42 <dtostrf>:
    3d42:	ef 92       	push	r14
    3d44:	ff 92       	push	r15
    3d46:	0f 93       	push	r16
    3d48:	1f 93       	push	r17
    3d4a:	f2 2f       	mov	r31, r18
    3d4c:	f0 2e       	mov	r15, r16
    3d4e:	47 fd       	sbrc	r20, 7
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <dtostrf+0x14>
    3d52:	e4 e0       	ldi	r30, 0x04	; 4
    3d54:	01 c0       	rjmp	.+2      	; 0x3d58 <dtostrf+0x16>
    3d56:	e4 e1       	ldi	r30, 0x14	; 20
    3d58:	24 2f       	mov	r18, r20
    3d5a:	33 27       	eor	r19, r19
    3d5c:	27 fd       	sbrc	r18, 7
    3d5e:	30 95       	com	r19
    3d60:	37 ff       	sbrs	r19, 7
    3d62:	03 c0       	rjmp	.+6      	; 0x3d6a <dtostrf+0x28>
    3d64:	30 95       	com	r19
    3d66:	21 95       	neg	r18
    3d68:	3f 4f       	sbci	r19, 0xFF	; 255
    3d6a:	4f 2d       	mov	r20, r15
    3d6c:	51 2f       	mov	r21, r17
    3d6e:	0f 2f       	mov	r16, r31
    3d70:	ee 2e       	mov	r14, r30
    3d72:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <dtoa_prf>
    3d76:	8f 2d       	mov	r24, r15
    3d78:	91 2f       	mov	r25, r17
    3d7a:	1f 91       	pop	r17
    3d7c:	0f 91       	pop	r16
    3d7e:	ff 90       	pop	r15
    3d80:	ef 90       	pop	r14
    3d82:	08 95       	ret

00003d84 <itoa>:
    3d84:	fb 01       	movw	r30, r22
    3d86:	9f 01       	movw	r18, r30
    3d88:	e8 94       	clt
    3d8a:	42 30       	cpi	r20, 0x02	; 2
    3d8c:	c4 f0       	brlt	.+48     	; 0x3dbe <itoa+0x3a>
    3d8e:	45 32       	cpi	r20, 0x25	; 37
    3d90:	b4 f4       	brge	.+44     	; 0x3dbe <itoa+0x3a>
    3d92:	4a 30       	cpi	r20, 0x0A	; 10
    3d94:	29 f4       	brne	.+10     	; 0x3da0 <itoa+0x1c>
    3d96:	97 fb       	bst	r25, 7
    3d98:	1e f4       	brtc	.+6      	; 0x3da0 <itoa+0x1c>
    3d9a:	90 95       	com	r25
    3d9c:	81 95       	neg	r24
    3d9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3da0:	64 2f       	mov	r22, r20
    3da2:	77 27       	eor	r23, r23
    3da4:	0e 94 2d 21 	call	0x425a	; 0x425a <__udivmodhi4>
    3da8:	80 5d       	subi	r24, 0xD0	; 208
    3daa:	8a 33       	cpi	r24, 0x3A	; 58
    3dac:	0c f0       	brlt	.+2      	; 0x3db0 <itoa+0x2c>
    3dae:	89 5d       	subi	r24, 0xD9	; 217
    3db0:	81 93       	st	Z+, r24
    3db2:	cb 01       	movw	r24, r22
    3db4:	00 97       	sbiw	r24, 0x00	; 0
    3db6:	a1 f7       	brne	.-24     	; 0x3da0 <itoa+0x1c>
    3db8:	16 f4       	brtc	.+4      	; 0x3dbe <itoa+0x3a>
    3dba:	5d e2       	ldi	r21, 0x2D	; 45
    3dbc:	51 93       	st	Z+, r21
    3dbe:	10 82       	st	Z, r1
    3dc0:	c9 01       	movw	r24, r18
    3dc2:	0c 94 1d 21 	jmp	0x423a	; 0x423a <strrev>

00003dc6 <dtoa_prf>:
    3dc6:	a9 e0       	ldi	r26, 0x09	; 9
    3dc8:	b0 e0       	ldi	r27, 0x00	; 0
    3dca:	e9 ee       	ldi	r30, 0xE9	; 233
    3dcc:	fe e1       	ldi	r31, 0x1E	; 30
    3dce:	0c 94 6e 1e 	jmp	0x3cdc	; 0x3cdc <__prologue_saves__+0x8>
    3dd2:	6a 01       	movw	r12, r20
    3dd4:	12 2f       	mov	r17, r18
    3dd6:	a0 2e       	mov	r10, r16
    3dd8:	be 2c       	mov	r11, r14
    3dda:	2b e3       	ldi	r18, 0x3B	; 59
    3ddc:	20 17       	cp	r18, r16
    3dde:	18 f4       	brcc	.+6      	; 0x3de6 <dtoa_prf+0x20>
    3de0:	2c e3       	ldi	r18, 0x3C	; 60
    3de2:	92 2e       	mov	r9, r18
    3de4:	02 c0       	rjmp	.+4      	; 0x3dea <dtoa_prf+0x24>
    3de6:	90 2e       	mov	r9, r16
    3de8:	93 94       	inc	r9
    3dea:	ae 01       	movw	r20, r28
    3dec:	4f 5f       	subi	r20, 0xFF	; 255
    3dee:	5f 4f       	sbci	r21, 0xFF	; 255
    3df0:	27 e0       	ldi	r18, 0x07	; 7
    3df2:	09 2d       	mov	r16, r9
    3df4:	0e 94 45 20 	call	0x408a	; 0x408a <__ftoa_engine>
    3df8:	bc 01       	movw	r22, r24
    3dfa:	89 81       	ldd	r24, Y+1	; 0x01
    3dfc:	e8 2e       	mov	r14, r24
    3dfe:	ff 24       	eor	r15, r15
    3e00:	c7 01       	movw	r24, r14
    3e02:	89 70       	andi	r24, 0x09	; 9
    3e04:	90 70       	andi	r25, 0x00	; 0
    3e06:	01 97       	sbiw	r24, 0x01	; 1
    3e08:	11 f4       	brne	.+4      	; 0x3e0e <dtoa_prf+0x48>
    3e0a:	ad e2       	ldi	r26, 0x2D	; 45
    3e0c:	09 c0       	rjmp	.+18     	; 0x3e20 <dtoa_prf+0x5a>
    3e0e:	b1 fe       	sbrs	r11, 1
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <dtoa_prf+0x50>
    3e12:	ab e2       	ldi	r26, 0x2B	; 43
    3e14:	05 c0       	rjmp	.+10     	; 0x3e20 <dtoa_prf+0x5a>
    3e16:	b0 fc       	sbrc	r11, 0
    3e18:	02 c0       	rjmp	.+4      	; 0x3e1e <dtoa_prf+0x58>
    3e1a:	a0 e0       	ldi	r26, 0x00	; 0
    3e1c:	01 c0       	rjmp	.+2      	; 0x3e20 <dtoa_prf+0x5a>
    3e1e:	a0 e2       	ldi	r26, 0x20	; 32
    3e20:	e3 fe       	sbrs	r14, 3
    3e22:	3b c0       	rjmp	.+118    	; 0x3e9a <dtoa_prf+0xd4>
    3e24:	aa 23       	and	r26, r26
    3e26:	11 f4       	brne	.+4      	; 0x3e2c <dtoa_prf+0x66>
    3e28:	23 e0       	ldi	r18, 0x03	; 3
    3e2a:	01 c0       	rjmp	.+2      	; 0x3e2e <dtoa_prf+0x68>
    3e2c:	24 e0       	ldi	r18, 0x04	; 4
    3e2e:	21 17       	cp	r18, r17
    3e30:	10 f0       	brcs	.+4      	; 0x3e36 <dtoa_prf+0x70>
    3e32:	20 e0       	ldi	r18, 0x00	; 0
    3e34:	02 c0       	rjmp	.+4      	; 0x3e3a <dtoa_prf+0x74>
    3e36:	12 1b       	sub	r17, r18
    3e38:	21 2f       	mov	r18, r17
    3e3a:	eb 2c       	mov	r14, r11
    3e3c:	b4 fe       	sbrs	r11, 4
    3e3e:	02 c0       	rjmp	.+4      	; 0x3e44 <dtoa_prf+0x7e>
    3e40:	32 2f       	mov	r19, r18
    3e42:	0a c0       	rjmp	.+20     	; 0x3e58 <dtoa_prf+0x92>
    3e44:	f6 01       	movw	r30, r12
    3e46:	32 2f       	mov	r19, r18
    3e48:	80 e2       	ldi	r24, 0x20	; 32
    3e4a:	02 c0       	rjmp	.+4      	; 0x3e50 <dtoa_prf+0x8a>
    3e4c:	81 93       	st	Z+, r24
    3e4e:	31 50       	subi	r19, 0x01	; 1
    3e50:	33 23       	and	r19, r19
    3e52:	e1 f7       	brne	.-8      	; 0x3e4c <dtoa_prf+0x86>
    3e54:	c2 0e       	add	r12, r18
    3e56:	d1 1c       	adc	r13, r1
    3e58:	aa 23       	and	r26, r26
    3e5a:	19 f0       	breq	.+6      	; 0x3e62 <dtoa_prf+0x9c>
    3e5c:	f6 01       	movw	r30, r12
    3e5e:	a1 93       	st	Z+, r26
    3e60:	6f 01       	movw	r12, r30
    3e62:	f6 01       	movw	r30, r12
    3e64:	31 96       	adiw	r30, 0x01	; 1
    3e66:	e2 fe       	sbrs	r14, 2
    3e68:	05 c0       	rjmp	.+10     	; 0x3e74 <dtoa_prf+0xae>
    3e6a:	9e e4       	ldi	r25, 0x4E	; 78
    3e6c:	d6 01       	movw	r26, r12
    3e6e:	9c 93       	st	X, r25
    3e70:	81 e4       	ldi	r24, 0x41	; 65
    3e72:	04 c0       	rjmp	.+8      	; 0x3e7c <dtoa_prf+0xb6>
    3e74:	9e e6       	ldi	r25, 0x6E	; 110
    3e76:	d6 01       	movw	r26, r12
    3e78:	9c 93       	st	X, r25
    3e7a:	81 e6       	ldi	r24, 0x61	; 97
    3e7c:	11 96       	adiw	r26, 0x01	; 1
    3e7e:	8c 93       	st	X, r24
    3e80:	91 83       	std	Z+1, r25	; 0x01
    3e82:	32 96       	adiw	r30, 0x02	; 2
    3e84:	df 01       	movw	r26, r30
    3e86:	83 2f       	mov	r24, r19
    3e88:	90 e2       	ldi	r25, 0x20	; 32
    3e8a:	02 c0       	rjmp	.+4      	; 0x3e90 <dtoa_prf+0xca>
    3e8c:	9d 93       	st	X+, r25
    3e8e:	81 50       	subi	r24, 0x01	; 1
    3e90:	88 23       	and	r24, r24
    3e92:	e1 f7       	brne	.-8      	; 0x3e8c <dtoa_prf+0xc6>
    3e94:	e3 0f       	add	r30, r19
    3e96:	f1 1d       	adc	r31, r1
    3e98:	40 c0       	rjmp	.+128    	; 0x3f1a <dtoa_prf+0x154>
    3e9a:	e2 fe       	sbrs	r14, 2
    3e9c:	42 c0       	rjmp	.+132    	; 0x3f22 <dtoa_prf+0x15c>
    3e9e:	aa 23       	and	r26, r26
    3ea0:	11 f4       	brne	.+4      	; 0x3ea6 <dtoa_prf+0xe0>
    3ea2:	23 e0       	ldi	r18, 0x03	; 3
    3ea4:	01 c0       	rjmp	.+2      	; 0x3ea8 <dtoa_prf+0xe2>
    3ea6:	24 e0       	ldi	r18, 0x04	; 4
    3ea8:	21 17       	cp	r18, r17
    3eaa:	10 f0       	brcs	.+4      	; 0x3eb0 <dtoa_prf+0xea>
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <dtoa_prf+0xee>
    3eb0:	12 1b       	sub	r17, r18
    3eb2:	21 2f       	mov	r18, r17
    3eb4:	eb 2c       	mov	r14, r11
    3eb6:	b4 fe       	sbrs	r11, 4
    3eb8:	02 c0       	rjmp	.+4      	; 0x3ebe <dtoa_prf+0xf8>
    3eba:	92 2f       	mov	r25, r18
    3ebc:	0a c0       	rjmp	.+20     	; 0x3ed2 <dtoa_prf+0x10c>
    3ebe:	f6 01       	movw	r30, r12
    3ec0:	92 2f       	mov	r25, r18
    3ec2:	80 e2       	ldi	r24, 0x20	; 32
    3ec4:	02 c0       	rjmp	.+4      	; 0x3eca <dtoa_prf+0x104>
    3ec6:	81 93       	st	Z+, r24
    3ec8:	91 50       	subi	r25, 0x01	; 1
    3eca:	99 23       	and	r25, r25
    3ecc:	e1 f7       	brne	.-8      	; 0x3ec6 <dtoa_prf+0x100>
    3ece:	c2 0e       	add	r12, r18
    3ed0:	d1 1c       	adc	r13, r1
    3ed2:	aa 23       	and	r26, r26
    3ed4:	19 f0       	breq	.+6      	; 0x3edc <dtoa_prf+0x116>
    3ed6:	f6 01       	movw	r30, r12
    3ed8:	a1 93       	st	Z+, r26
    3eda:	6f 01       	movw	r12, r30
    3edc:	f6 01       	movw	r30, r12
    3ede:	31 96       	adiw	r30, 0x01	; 1
    3ee0:	e2 fe       	sbrs	r14, 2
    3ee2:	08 c0       	rjmp	.+16     	; 0x3ef4 <dtoa_prf+0x12e>
    3ee4:	89 e4       	ldi	r24, 0x49	; 73
    3ee6:	d6 01       	movw	r26, r12
    3ee8:	8c 93       	st	X, r24
    3eea:	8e e4       	ldi	r24, 0x4E	; 78
    3eec:	11 96       	adiw	r26, 0x01	; 1
    3eee:	8c 93       	st	X, r24
    3ef0:	86 e4       	ldi	r24, 0x46	; 70
    3ef2:	07 c0       	rjmp	.+14     	; 0x3f02 <dtoa_prf+0x13c>
    3ef4:	89 e6       	ldi	r24, 0x69	; 105
    3ef6:	d6 01       	movw	r26, r12
    3ef8:	8c 93       	st	X, r24
    3efa:	8e e6       	ldi	r24, 0x6E	; 110
    3efc:	11 96       	adiw	r26, 0x01	; 1
    3efe:	8c 93       	st	X, r24
    3f00:	86 e6       	ldi	r24, 0x66	; 102
    3f02:	81 83       	std	Z+1, r24	; 0x01
    3f04:	32 96       	adiw	r30, 0x02	; 2
    3f06:	df 01       	movw	r26, r30
    3f08:	89 2f       	mov	r24, r25
    3f0a:	20 e2       	ldi	r18, 0x20	; 32
    3f0c:	02 c0       	rjmp	.+4      	; 0x3f12 <dtoa_prf+0x14c>
    3f0e:	2d 93       	st	X+, r18
    3f10:	81 50       	subi	r24, 0x01	; 1
    3f12:	88 23       	and	r24, r24
    3f14:	e1 f7       	brne	.-8      	; 0x3f0e <dtoa_prf+0x148>
    3f16:	e9 0f       	add	r30, r25
    3f18:	f1 1d       	adc	r31, r1
    3f1a:	10 82       	st	Z, r1
    3f1c:	2e ef       	ldi	r18, 0xFE	; 254
    3f1e:	3f ef       	ldi	r19, 0xFF	; 255
    3f20:	af c0       	rjmp	.+350    	; 0x4080 <dtoa_prf+0x2ba>
    3f22:	16 16       	cp	r1, r22
    3f24:	17 06       	cpc	r1, r23
    3f26:	1c f0       	brlt	.+6      	; 0x3f2e <dtoa_prf+0x168>
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	50 e0       	ldi	r21, 0x00	; 0
    3f2c:	03 c0       	rjmp	.+6      	; 0x3f34 <dtoa_prf+0x16e>
    3f2e:	ab 01       	movw	r20, r22
    3f30:	4f 5f       	subi	r20, 0xFF	; 255
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	aa 20       	and	r10, r10
    3f36:	19 f4       	brne	.+6      	; 0x3f3e <dtoa_prf+0x178>
    3f38:	80 e0       	ldi	r24, 0x00	; 0
    3f3a:	90 e0       	ldi	r25, 0x00	; 0
    3f3c:	03 c0       	rjmp	.+6      	; 0x3f44 <dtoa_prf+0x17e>
    3f3e:	8a 2d       	mov	r24, r10
    3f40:	90 e0       	ldi	r25, 0x00	; 0
    3f42:	01 96       	adiw	r24, 0x01	; 1
    3f44:	20 e0       	ldi	r18, 0x00	; 0
    3f46:	30 e0       	ldi	r19, 0x00	; 0
    3f48:	aa 23       	and	r26, r26
    3f4a:	11 f0       	breq	.+4      	; 0x3f50 <dtoa_prf+0x18a>
    3f4c:	21 e0       	ldi	r18, 0x01	; 1
    3f4e:	30 e0       	ldi	r19, 0x00	; 0
    3f50:	24 0f       	add	r18, r20
    3f52:	35 1f       	adc	r19, r21
    3f54:	28 0f       	add	r18, r24
    3f56:	39 1f       	adc	r19, r25
    3f58:	81 2f       	mov	r24, r17
    3f5a:	90 e0       	ldi	r25, 0x00	; 0
    3f5c:	28 17       	cp	r18, r24
    3f5e:	39 07       	cpc	r19, r25
    3f60:	14 f0       	brlt	.+4      	; 0x3f66 <dtoa_prf+0x1a0>
    3f62:	20 e0       	ldi	r18, 0x00	; 0
    3f64:	02 c0       	rjmp	.+4      	; 0x3f6a <dtoa_prf+0x1a4>
    3f66:	12 1b       	sub	r17, r18
    3f68:	21 2f       	mov	r18, r17
    3f6a:	4b 2d       	mov	r20, r11
    3f6c:	50 e0       	ldi	r21, 0x00	; 0
    3f6e:	ca 01       	movw	r24, r20
    3f70:	80 71       	andi	r24, 0x10	; 16
    3f72:	90 70       	andi	r25, 0x00	; 0
    3f74:	b4 fc       	sbrc	r11, 4
    3f76:	0d c0       	rjmp	.+26     	; 0x3f92 <dtoa_prf+0x1cc>
    3f78:	b3 fc       	sbrc	r11, 3
    3f7a:	0b c0       	rjmp	.+22     	; 0x3f92 <dtoa_prf+0x1cc>
    3f7c:	f6 01       	movw	r30, r12
    3f7e:	32 2f       	mov	r19, r18
    3f80:	40 e2       	ldi	r20, 0x20	; 32
    3f82:	02 c0       	rjmp	.+4      	; 0x3f88 <dtoa_prf+0x1c2>
    3f84:	41 93       	st	Z+, r20
    3f86:	31 50       	subi	r19, 0x01	; 1
    3f88:	33 23       	and	r19, r19
    3f8a:	e1 f7       	brne	.-8      	; 0x3f84 <dtoa_prf+0x1be>
    3f8c:	c2 0e       	add	r12, r18
    3f8e:	d1 1c       	adc	r13, r1
    3f90:	01 c0       	rjmp	.+2      	; 0x3f94 <dtoa_prf+0x1ce>
    3f92:	32 2f       	mov	r19, r18
    3f94:	aa 23       	and	r26, r26
    3f96:	19 f0       	breq	.+6      	; 0x3f9e <dtoa_prf+0x1d8>
    3f98:	f6 01       	movw	r30, r12
    3f9a:	a1 93       	st	Z+, r26
    3f9c:	6f 01       	movw	r12, r30
    3f9e:	89 2b       	or	r24, r25
    3fa0:	11 f0       	breq	.+4      	; 0x3fa6 <dtoa_prf+0x1e0>
    3fa2:	13 2f       	mov	r17, r19
    3fa4:	0a c0       	rjmp	.+20     	; 0x3fba <dtoa_prf+0x1f4>
    3fa6:	f6 01       	movw	r30, r12
    3fa8:	13 2f       	mov	r17, r19
    3faa:	80 e3       	ldi	r24, 0x30	; 48
    3fac:	02 c0       	rjmp	.+4      	; 0x3fb2 <dtoa_prf+0x1ec>
    3fae:	81 93       	st	Z+, r24
    3fb0:	11 50       	subi	r17, 0x01	; 1
    3fb2:	11 23       	and	r17, r17
    3fb4:	e1 f7       	brne	.-8      	; 0x3fae <dtoa_prf+0x1e8>
    3fb6:	c3 0e       	add	r12, r19
    3fb8:	d1 1c       	adc	r13, r1
    3fba:	09 2d       	mov	r16, r9
    3fbc:	06 0f       	add	r16, r22
    3fbe:	ba 80       	ldd	r11, Y+2	; 0x02
    3fc0:	90 e1       	ldi	r25, 0x10	; 16
    3fc2:	89 2e       	mov	r8, r25
    3fc4:	91 2c       	mov	r9, r1
    3fc6:	8e 20       	and	r8, r14
    3fc8:	9f 20       	and	r9, r15
    3fca:	e4 fe       	sbrs	r14, 4
    3fcc:	04 c0       	rjmp	.+8      	; 0x3fd6 <dtoa_prf+0x210>
    3fce:	f1 e3       	ldi	r31, 0x31	; 49
    3fd0:	bf 16       	cp	r11, r31
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <dtoa_prf+0x210>
    3fd4:	01 50       	subi	r16, 0x01	; 1
    3fd6:	10 16       	cp	r1, r16
    3fd8:	14 f0       	brlt	.+4      	; 0x3fde <dtoa_prf+0x218>
    3fda:	01 e0       	ldi	r16, 0x01	; 1
    3fdc:	03 c0       	rjmp	.+6      	; 0x3fe4 <dtoa_prf+0x21e>
    3fde:	09 30       	cpi	r16, 0x09	; 9
    3fe0:	08 f0       	brcs	.+2      	; 0x3fe4 <dtoa_prf+0x21e>
    3fe2:	08 e0       	ldi	r16, 0x08	; 8
    3fe4:	9b 01       	movw	r18, r22
    3fe6:	77 ff       	sbrs	r23, 7
    3fe8:	02 c0       	rjmp	.+4      	; 0x3fee <dtoa_prf+0x228>
    3fea:	20 e0       	ldi	r18, 0x00	; 0
    3fec:	30 e0       	ldi	r19, 0x00	; 0
    3fee:	cb 01       	movw	r24, r22
    3ff0:	01 96       	adiw	r24, 0x01	; 1
    3ff2:	82 1b       	sub	r24, r18
    3ff4:	93 0b       	sbc	r25, r19
    3ff6:	fe 01       	movw	r30, r28
    3ff8:	31 96       	adiw	r30, 0x01	; 1
    3ffa:	e8 0f       	add	r30, r24
    3ffc:	f9 1f       	adc	r31, r25
    3ffe:	8e e2       	ldi	r24, 0x2E	; 46
    4000:	f8 2e       	mov	r15, r24
    4002:	3b 01       	movw	r6, r22
    4004:	60 1a       	sub	r6, r16
    4006:	71 08       	sbc	r7, r1
    4008:	8a 2d       	mov	r24, r10
    400a:	90 e0       	ldi	r25, 0x00	; 0
    400c:	44 27       	eor	r20, r20
    400e:	55 27       	eor	r21, r21
    4010:	48 1b       	sub	r20, r24
    4012:	59 0b       	sbc	r21, r25
    4014:	8f ef       	ldi	r24, 0xFF	; 255
    4016:	2f 3f       	cpi	r18, 0xFF	; 255
    4018:	38 07       	cpc	r19, r24
    401a:	19 f4       	brne	.+6      	; 0x4022 <dtoa_prf+0x25c>
    401c:	d6 01       	movw	r26, r12
    401e:	fd 92       	st	X+, r15
    4020:	6d 01       	movw	r12, r26
    4022:	62 17       	cp	r22, r18
    4024:	73 07       	cpc	r23, r19
    4026:	2c f0       	brlt	.+10     	; 0x4032 <dtoa_prf+0x26c>
    4028:	62 16       	cp	r6, r18
    402a:	73 06       	cpc	r7, r19
    402c:	14 f4       	brge	.+4      	; 0x4032 <dtoa_prf+0x26c>
    402e:	80 81       	ld	r24, Z
    4030:	01 c0       	rjmp	.+2      	; 0x4034 <dtoa_prf+0x26e>
    4032:	80 e3       	ldi	r24, 0x30	; 48
    4034:	21 50       	subi	r18, 0x01	; 1
    4036:	30 40       	sbci	r19, 0x00	; 0
    4038:	31 96       	adiw	r30, 0x01	; 1
    403a:	24 17       	cp	r18, r20
    403c:	35 07       	cpc	r19, r21
    403e:	24 f0       	brlt	.+8      	; 0x4048 <dtoa_prf+0x282>
    4040:	d6 01       	movw	r26, r12
    4042:	8d 93       	st	X+, r24
    4044:	6d 01       	movw	r12, r26
    4046:	e6 cf       	rjmp	.-52     	; 0x4014 <dtoa_prf+0x24e>
    4048:	26 17       	cp	r18, r22
    404a:	37 07       	cpc	r19, r23
    404c:	49 f4       	brne	.+18     	; 0x4060 <dtoa_prf+0x29a>
    404e:	b5 e3       	ldi	r27, 0x35	; 53
    4050:	bb 15       	cp	r27, r11
    4052:	28 f0       	brcs	.+10     	; 0x405e <dtoa_prf+0x298>
    4054:	bb 16       	cp	r11, r27
    4056:	21 f4       	brne	.+8      	; 0x4060 <dtoa_prf+0x29a>
    4058:	81 14       	cp	r8, r1
    405a:	91 04       	cpc	r9, r1
    405c:	09 f4       	brne	.+2      	; 0x4060 <dtoa_prf+0x29a>
    405e:	81 e3       	ldi	r24, 0x31	; 49
    4060:	f6 01       	movw	r30, r12
    4062:	81 93       	st	Z+, r24
    4064:	d6 01       	movw	r26, r12
    4066:	81 2f       	mov	r24, r17
    4068:	90 e2       	ldi	r25, 0x20	; 32
    406a:	02 c0       	rjmp	.+4      	; 0x4070 <dtoa_prf+0x2aa>
    406c:	9c 93       	st	X, r25
    406e:	81 50       	subi	r24, 0x01	; 1
    4070:	11 96       	adiw	r26, 0x01	; 1
    4072:	88 23       	and	r24, r24
    4074:	d9 f7       	brne	.-10     	; 0x406c <dtoa_prf+0x2a6>
    4076:	e1 0f       	add	r30, r17
    4078:	f1 1d       	adc	r31, r1
    407a:	10 82       	st	Z, r1
    407c:	20 e0       	ldi	r18, 0x00	; 0
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	c9 01       	movw	r24, r18
    4082:	29 96       	adiw	r28, 0x09	; 9
    4084:	ee e0       	ldi	r30, 0x0E	; 14
    4086:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__epilogue_restores__+0x8>

0000408a <__ftoa_engine>:
    408a:	28 30       	cpi	r18, 0x08	; 8
    408c:	08 f0       	brcs	.+2      	; 0x4090 <__ftoa_engine+0x6>
    408e:	27 e0       	ldi	r18, 0x07	; 7
    4090:	33 27       	eor	r19, r19
    4092:	da 01       	movw	r26, r20
    4094:	99 0f       	add	r25, r25
    4096:	31 1d       	adc	r19, r1
    4098:	87 fd       	sbrc	r24, 7
    409a:	91 60       	ori	r25, 0x01	; 1
    409c:	00 96       	adiw	r24, 0x00	; 0
    409e:	61 05       	cpc	r22, r1
    40a0:	71 05       	cpc	r23, r1
    40a2:	39 f4       	brne	.+14     	; 0x40b2 <__ftoa_engine+0x28>
    40a4:	32 60       	ori	r19, 0x02	; 2
    40a6:	2e 5f       	subi	r18, 0xFE	; 254
    40a8:	3d 93       	st	X+, r19
    40aa:	30 e3       	ldi	r19, 0x30	; 48
    40ac:	2a 95       	dec	r18
    40ae:	e1 f7       	brne	.-8      	; 0x40a8 <__ftoa_engine+0x1e>
    40b0:	08 95       	ret
    40b2:	9f 3f       	cpi	r25, 0xFF	; 255
    40b4:	30 f0       	brcs	.+12     	; 0x40c2 <__ftoa_engine+0x38>
    40b6:	80 38       	cpi	r24, 0x80	; 128
    40b8:	71 05       	cpc	r23, r1
    40ba:	61 05       	cpc	r22, r1
    40bc:	09 f0       	breq	.+2      	; 0x40c0 <__ftoa_engine+0x36>
    40be:	3c 5f       	subi	r19, 0xFC	; 252
    40c0:	3c 5f       	subi	r19, 0xFC	; 252
    40c2:	3d 93       	st	X+, r19
    40c4:	91 30       	cpi	r25, 0x01	; 1
    40c6:	08 f0       	brcs	.+2      	; 0x40ca <__ftoa_engine+0x40>
    40c8:	80 68       	ori	r24, 0x80	; 128
    40ca:	91 1d       	adc	r25, r1
    40cc:	df 93       	push	r29
    40ce:	cf 93       	push	r28
    40d0:	1f 93       	push	r17
    40d2:	0f 93       	push	r16
    40d4:	ff 92       	push	r15
    40d6:	ef 92       	push	r14
    40d8:	19 2f       	mov	r17, r25
    40da:	98 7f       	andi	r25, 0xF8	; 248
    40dc:	96 95       	lsr	r25
    40de:	e9 2f       	mov	r30, r25
    40e0:	96 95       	lsr	r25
    40e2:	96 95       	lsr	r25
    40e4:	e9 0f       	add	r30, r25
    40e6:	ff 27       	eor	r31, r31
    40e8:	e2 55       	subi	r30, 0x52	; 82
    40ea:	ff 4f       	sbci	r31, 0xFF	; 255
    40ec:	99 27       	eor	r25, r25
    40ee:	33 27       	eor	r19, r19
    40f0:	ee 24       	eor	r14, r14
    40f2:	ff 24       	eor	r15, r15
    40f4:	a7 01       	movw	r20, r14
    40f6:	e7 01       	movw	r28, r14
    40f8:	05 90       	lpm	r0, Z+
    40fa:	08 94       	sec
    40fc:	07 94       	ror	r0
    40fe:	28 f4       	brcc	.+10     	; 0x410a <__ftoa_engine+0x80>
    4100:	36 0f       	add	r19, r22
    4102:	e7 1e       	adc	r14, r23
    4104:	f8 1e       	adc	r15, r24
    4106:	49 1f       	adc	r20, r25
    4108:	51 1d       	adc	r21, r1
    410a:	66 0f       	add	r22, r22
    410c:	77 1f       	adc	r23, r23
    410e:	88 1f       	adc	r24, r24
    4110:	99 1f       	adc	r25, r25
    4112:	06 94       	lsr	r0
    4114:	a1 f7       	brne	.-24     	; 0x40fe <__ftoa_engine+0x74>
    4116:	05 90       	lpm	r0, Z+
    4118:	07 94       	ror	r0
    411a:	28 f4       	brcc	.+10     	; 0x4126 <__ftoa_engine+0x9c>
    411c:	e7 0e       	add	r14, r23
    411e:	f8 1e       	adc	r15, r24
    4120:	49 1f       	adc	r20, r25
    4122:	56 1f       	adc	r21, r22
    4124:	c1 1d       	adc	r28, r1
    4126:	77 0f       	add	r23, r23
    4128:	88 1f       	adc	r24, r24
    412a:	99 1f       	adc	r25, r25
    412c:	66 1f       	adc	r22, r22
    412e:	06 94       	lsr	r0
    4130:	a1 f7       	brne	.-24     	; 0x411a <__ftoa_engine+0x90>
    4132:	05 90       	lpm	r0, Z+
    4134:	07 94       	ror	r0
    4136:	28 f4       	brcc	.+10     	; 0x4142 <__ftoa_engine+0xb8>
    4138:	f8 0e       	add	r15, r24
    413a:	49 1f       	adc	r20, r25
    413c:	56 1f       	adc	r21, r22
    413e:	c7 1f       	adc	r28, r23
    4140:	d1 1d       	adc	r29, r1
    4142:	88 0f       	add	r24, r24
    4144:	99 1f       	adc	r25, r25
    4146:	66 1f       	adc	r22, r22
    4148:	77 1f       	adc	r23, r23
    414a:	06 94       	lsr	r0
    414c:	a1 f7       	brne	.-24     	; 0x4136 <__ftoa_engine+0xac>
    414e:	05 90       	lpm	r0, Z+
    4150:	07 94       	ror	r0
    4152:	20 f4       	brcc	.+8      	; 0x415c <__ftoa_engine+0xd2>
    4154:	49 0f       	add	r20, r25
    4156:	56 1f       	adc	r21, r22
    4158:	c7 1f       	adc	r28, r23
    415a:	d8 1f       	adc	r29, r24
    415c:	99 0f       	add	r25, r25
    415e:	66 1f       	adc	r22, r22
    4160:	77 1f       	adc	r23, r23
    4162:	88 1f       	adc	r24, r24
    4164:	06 94       	lsr	r0
    4166:	a9 f7       	brne	.-22     	; 0x4152 <__ftoa_engine+0xc8>
    4168:	84 91       	lpm	r24, Z+
    416a:	10 95       	com	r17
    416c:	17 70       	andi	r17, 0x07	; 7
    416e:	41 f0       	breq	.+16     	; 0x4180 <__ftoa_engine+0xf6>
    4170:	d6 95       	lsr	r29
    4172:	c7 95       	ror	r28
    4174:	57 95       	ror	r21
    4176:	47 95       	ror	r20
    4178:	f7 94       	ror	r15
    417a:	e7 94       	ror	r14
    417c:	1a 95       	dec	r17
    417e:	c1 f7       	brne	.-16     	; 0x4170 <__ftoa_engine+0xe6>
    4180:	e4 e5       	ldi	r30, 0x54	; 84
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	68 94       	set
    4186:	15 90       	lpm	r1, Z+
    4188:	15 91       	lpm	r17, Z+
    418a:	35 91       	lpm	r19, Z+
    418c:	65 91       	lpm	r22, Z+
    418e:	95 91       	lpm	r25, Z+
    4190:	05 90       	lpm	r0, Z+
    4192:	7f e2       	ldi	r23, 0x2F	; 47
    4194:	73 95       	inc	r23
    4196:	e1 18       	sub	r14, r1
    4198:	f1 0a       	sbc	r15, r17
    419a:	43 0b       	sbc	r20, r19
    419c:	56 0b       	sbc	r21, r22
    419e:	c9 0b       	sbc	r28, r25
    41a0:	d0 09       	sbc	r29, r0
    41a2:	c0 f7       	brcc	.-16     	; 0x4194 <__ftoa_engine+0x10a>
    41a4:	e1 0c       	add	r14, r1
    41a6:	f1 1e       	adc	r15, r17
    41a8:	43 1f       	adc	r20, r19
    41aa:	56 1f       	adc	r21, r22
    41ac:	c9 1f       	adc	r28, r25
    41ae:	d0 1d       	adc	r29, r0
    41b0:	7e f4       	brtc	.+30     	; 0x41d0 <__ftoa_engine+0x146>
    41b2:	70 33       	cpi	r23, 0x30	; 48
    41b4:	11 f4       	brne	.+4      	; 0x41ba <__ftoa_engine+0x130>
    41b6:	8a 95       	dec	r24
    41b8:	e6 cf       	rjmp	.-52     	; 0x4186 <__ftoa_engine+0xfc>
    41ba:	e8 94       	clt
    41bc:	01 50       	subi	r16, 0x01	; 1
    41be:	30 f0       	brcs	.+12     	; 0x41cc <__ftoa_engine+0x142>
    41c0:	08 0f       	add	r16, r24
    41c2:	0a f4       	brpl	.+2      	; 0x41c6 <__ftoa_engine+0x13c>
    41c4:	00 27       	eor	r16, r16
    41c6:	02 17       	cp	r16, r18
    41c8:	08 f4       	brcc	.+2      	; 0x41cc <__ftoa_engine+0x142>
    41ca:	20 2f       	mov	r18, r16
    41cc:	23 95       	inc	r18
    41ce:	02 2f       	mov	r16, r18
    41d0:	7a 33       	cpi	r23, 0x3A	; 58
    41d2:	28 f0       	brcs	.+10     	; 0x41de <__ftoa_engine+0x154>
    41d4:	79 e3       	ldi	r23, 0x39	; 57
    41d6:	7d 93       	st	X+, r23
    41d8:	2a 95       	dec	r18
    41da:	e9 f7       	brne	.-6      	; 0x41d6 <__ftoa_engine+0x14c>
    41dc:	10 c0       	rjmp	.+32     	; 0x41fe <__ftoa_engine+0x174>
    41de:	7d 93       	st	X+, r23
    41e0:	2a 95       	dec	r18
    41e2:	89 f6       	brne	.-94     	; 0x4186 <__ftoa_engine+0xfc>
    41e4:	06 94       	lsr	r0
    41e6:	97 95       	ror	r25
    41e8:	67 95       	ror	r22
    41ea:	37 95       	ror	r19
    41ec:	17 95       	ror	r17
    41ee:	17 94       	ror	r1
    41f0:	e1 18       	sub	r14, r1
    41f2:	f1 0a       	sbc	r15, r17
    41f4:	43 0b       	sbc	r20, r19
    41f6:	56 0b       	sbc	r21, r22
    41f8:	c9 0b       	sbc	r28, r25
    41fa:	d0 09       	sbc	r29, r0
    41fc:	98 f0       	brcs	.+38     	; 0x4224 <__ftoa_engine+0x19a>
    41fe:	23 95       	inc	r18
    4200:	7e 91       	ld	r23, -X
    4202:	73 95       	inc	r23
    4204:	7a 33       	cpi	r23, 0x3A	; 58
    4206:	08 f0       	brcs	.+2      	; 0x420a <__ftoa_engine+0x180>
    4208:	70 e3       	ldi	r23, 0x30	; 48
    420a:	7c 93       	st	X, r23
    420c:	20 13       	cpse	r18, r16
    420e:	b8 f7       	brcc	.-18     	; 0x41fe <__ftoa_engine+0x174>
    4210:	7e 91       	ld	r23, -X
    4212:	70 61       	ori	r23, 0x10	; 16
    4214:	7d 93       	st	X+, r23
    4216:	30 f0       	brcs	.+12     	; 0x4224 <__ftoa_engine+0x19a>
    4218:	83 95       	inc	r24
    421a:	71 e3       	ldi	r23, 0x31	; 49
    421c:	7d 93       	st	X+, r23
    421e:	70 e3       	ldi	r23, 0x30	; 48
    4220:	2a 95       	dec	r18
    4222:	e1 f7       	brne	.-8      	; 0x421c <__ftoa_engine+0x192>
    4224:	11 24       	eor	r1, r1
    4226:	ef 90       	pop	r14
    4228:	ff 90       	pop	r15
    422a:	0f 91       	pop	r16
    422c:	1f 91       	pop	r17
    422e:	cf 91       	pop	r28
    4230:	df 91       	pop	r29
    4232:	99 27       	eor	r25, r25
    4234:	87 fd       	sbrc	r24, 7
    4236:	90 95       	com	r25
    4238:	08 95       	ret

0000423a <strrev>:
    423a:	dc 01       	movw	r26, r24
    423c:	fc 01       	movw	r30, r24
    423e:	67 2f       	mov	r22, r23
    4240:	71 91       	ld	r23, Z+
    4242:	77 23       	and	r23, r23
    4244:	e1 f7       	brne	.-8      	; 0x423e <strrev+0x4>
    4246:	32 97       	sbiw	r30, 0x02	; 2
    4248:	04 c0       	rjmp	.+8      	; 0x4252 <strrev+0x18>
    424a:	7c 91       	ld	r23, X
    424c:	6d 93       	st	X+, r22
    424e:	70 83       	st	Z, r23
    4250:	62 91       	ld	r22, -Z
    4252:	ae 17       	cp	r26, r30
    4254:	bf 07       	cpc	r27, r31
    4256:	c8 f3       	brcs	.-14     	; 0x424a <strrev+0x10>
    4258:	08 95       	ret

0000425a <__udivmodhi4>:
    425a:	aa 1b       	sub	r26, r26
    425c:	bb 1b       	sub	r27, r27
    425e:	51 e1       	ldi	r21, 0x11	; 17
    4260:	07 c0       	rjmp	.+14     	; 0x4270 <__udivmodhi4_ep>

00004262 <__udivmodhi4_loop>:
    4262:	aa 1f       	adc	r26, r26
    4264:	bb 1f       	adc	r27, r27
    4266:	a6 17       	cp	r26, r22
    4268:	b7 07       	cpc	r27, r23
    426a:	10 f0       	brcs	.+4      	; 0x4270 <__udivmodhi4_ep>
    426c:	a6 1b       	sub	r26, r22
    426e:	b7 0b       	sbc	r27, r23

00004270 <__udivmodhi4_ep>:
    4270:	88 1f       	adc	r24, r24
    4272:	99 1f       	adc	r25, r25
    4274:	5a 95       	dec	r21
    4276:	a9 f7       	brne	.-22     	; 0x4262 <__udivmodhi4_loop>
    4278:	80 95       	com	r24
    427a:	90 95       	com	r25
    427c:	bc 01       	movw	r22, r24
    427e:	cd 01       	movw	r24, r26
    4280:	08 95       	ret

00004282 <_exit>:
    4282:	f8 94       	cli

00004284 <__stop_program>:
    4284:	ff cf       	rjmp	.-2      	; 0x4284 <__stop_program>
